package pgc

import (
	"encoding/hex"
	"encoding/json"
	"github.com/ethereum/go-ethereum/crypto"
	"math/big"
	"testing"
	"time"
)

func TestClient(t *testing.T) {
	url := "http://127.0.0.1:8545"
	c, _ := Dial(url)
	accounts, err := c.GetAccounts()
	if err != nil {
		t.Error(err)
		return
	}

	// test send 1 eth from first account to second account.
	tx := Transaction{}
	tx.From = accounts[0]
	tx.To = accounts[1]
	tx.Value = new(big.Int).SetUint64(1000 * 1000 * 1000 * 1000).String()
	tx.GasLimit = "100000"
	txHash, err := c.SendTx(&tx)
	if err != nil {
		t.Log(err)
		return
	}
	t.Log(txHash.Hex())
}

func TestTronClient(t *testing.T) {
	url := "http://127.0.0.1:9090"
	url = "https://api.shasta.trongrid.io"
	c := NewTronClient(url)

	deployTx := make(map[string]interface{}, 0)
	deployTx["abi"] = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gVector\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hVector\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"u\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"getG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getU\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGVector\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[32]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHVector\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[32]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]"
	deployTx["bytecode"] = "60806040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b5060016004600001819055506002600460010181905550620000936040805190810160405280601a81526020017f672067656e657261746f72206f66207477697374656420656c670000000000008152506200017b640100000000026401000000009004565b600080820151816000015560208201518160010155905050620000fa6040805190810160405280601a81526020017f682067656e657261746f72206f66207477697374656420656c670000000000008152506200017b640100000000026401000000009004565b6002600082015181600001556020820151816001015590505060008001546006600001819055506000600101546006600101819055506200017460056004604080519081016040529081600082015481526020016001820154815250506200026c6401000000000262000751179091906401000000009004565b506200047c565b620001856200041c565b60006200021f836040516020018082805190602001908083835b602083101515620001c657805182526020820191506020810190506020830392506200019f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120600190046200033664010000000002620007fe176401000000009004565b905062000264816004604080519081016040529081600082015481526020016001820154815250506200026c6401000000000262000751179091906401000000009004565b915050919050565b620002766200041c565b6001821415620002895782905062000330565b6002821415620002b657620002ae838462000371640100000000026401000000009004565b905062000330565b620002c062000436565b8360000151816000600381101515620002d557fe5b6020020181815250508360200151816001600381101515620002f357fe5b602002018181525050828160026003811015156200030d57fe5b6020020181815250506040826060836007600019fa15156200032e57600080fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080838115156200036857fe5b06915050919050565b6200037b6200041c565b6200038562000459565b83600001518160006004811015156200039a57fe5b6020020181815250508360200151816001600481101515620003b857fe5b6020020181815250508260000151816002600481101515620003d657fe5b6020020181815250508260200151816003600481101515620003f457fe5b6020020181815250506040826080836006600019fa15156200041557600080fd5b5092915050565b604080519081016040528060008152602001600081525090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b610966806200048c6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b506004361061012c576000357c01000000000000000000000000000000000000000000000000000000009004806352c9b965116100ce578063c6a898c51161009d578063c6a898c51461037e578063da897224146103a3578063e2179b8e146103c1578063ffe237f0146103e65761012c565b806352c9b965146102a557806356e2736c146102ca57806382529fdb14610313578063b8c9d365146103595761012c565b80632e52d6061161010a5780632e52d606146102065780633e8d3764146102245780633e95522514610242578063483767f0146102605761012c565b806304c09ce9146101315780630c00f8a01461017757806324d6147d146101c0575b600080fd5b61013961042b565b6040518082600260200280838360005b83811015610164578082015181840152602081019050610149565b5050505090500191505060405180910390f35b6101a36004803603602081101561018d57600080fd5b810190808035906020019092919050505061047d565b604051808381526020018281526020019250505060405180910390f35b6101c86104a6565b6040518082600260200280838360005b838110156101f35780820151818401526020810190506101d8565b5050505090500191505060405180910390f35b61020e6104f9565b6040518082815260200191505060405180910390f35b61022c6104fe565b6040518082815260200191505060405180910390f35b61024a610503565b6040518082815260200191505060405180910390f35b61026861050c565b60405180826020800280838360005b83811015610292578082015181840152602081019050610277565b5050505090500191505060405180910390f35b6102ad6105a5565b604051808381526020018281526020019250505060405180910390f35b6102f6600480360360208110156102e057600080fd5b81019080803590602001909291905050506105b7565b604051808381526020018281526020019250505060405180910390f35b61031b6105e0565b6040518082600260200280838360005b8381101561034657808201518184015260208101905061032b565b5050505090500191505060405180910390f35b610361610633565b604051808381526020018281526020019250505060405180910390f35b610386610645565b604051808381526020018281526020019250505060405180910390f35b6103ab610657565b6040518082815260200191505060405180910390f35b6103c9610660565b604051808381526020018281526020019250505060405180910390f35b6103ee610672565b60405180826020800280838360005b838110156104185780820151818401526020810190506103fd565b5050505090500191505060405180910390f35b61043361070b565b61043b61070b565b600080015481600060028110151561044f57fe5b60200201818152505060006001015481600160028110151561046d57fe5b6020020181815250508091505090565b60088160108110151561048c57fe5b600202016000915090508060000154908060010154905082565b6104ae61070b565b6104b661070b565b6006600001548160006002811015156104cb57fe5b6020020181815250506006600101548160016002811015156104e957fe5b6020020181815250508091505090565b600481565b601081565b60006004905090565b61051461072d565b61051c61072d565b60008090505b601081101561059d5760288160108110151561053a57fe5b6002020160000154828260020260208110151561055357fe5b60200201818152505060288160108110151561056b57fe5b6002020160010154826001836002020160208110151561058757fe5b6020020181815250508080600101915050610522565b508091505090565b60048060000154908060010154905082565b6028816010811015156105c657fe5b600202016000915090508060000154908060010154905082565b6105e861070b565b6105f061070b565b60026000015481600060028110151561060557fe5b60200201818152505060026001015481600160028110151561062357fe5b6020020181815250508091505090565b60028060000154908060010154905082565b60068060000154908060010154905082565b60006010905090565b60008060000154908060010154905082565b61067a61072d565b61068261072d565b60008090505b6010811015610703576008816010811015156106a057fe5b600202016000015482826002026020811015156106b957fe5b6020020181815250506008816010811015156106d157fe5b600202016001015482600183600202016020811015156106ed57fe5b6020020181815250508080600101915050610688565b508091505090565b6040805190810160405280600290602082028038833980820191505090505090565b61040060405190810160405280602090602082028038833980820191505090505090565b6107596108da565b600182141561076a578290506107f8565b60028214156107845761077d8384610838565b90506107f8565b61078c6108f4565b83600001518160006003811015156107a057fe5b60200201818152505083602001518160016003811015156107bd57fe5b602002018181525050828160026003811015156107d657fe5b6020020181815250506040826060836007600019fa15156107f657600080fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381151561082f57fe5b06915050919050565b6108406108da565b610848610917565b836000015181600060048110151561085c57fe5b602002018181525050836020015181600160048110151561087957fe5b602002018181525050826000015181600260048110151561089657fe5b60200201818152505082602001518160036004811015156108b357fe5b6020020181815250506040826080836006600019fa15156108d357600080fd5b5092915050565b604080519081016040528060008152602001600081525090565b606060405190810160405280600390602082028038833980820191505090505090565b60806040519081016040528060049060208202803883398082019150509050509056fea165627a7a72305820f2ddfe465aabccd67919474d6f4b2aae29a911cb42bf02014707cc3af20a62370029"
	deployTx["parameter"] = ""
	deployTx["name"] = "params"
	deployTx["consume_user_resource_percent"] = 30
	deployTx["fee_limit"] = 100000000
	deployTx["origin_energy_limit"] = 1000000000
	deployTx["owner_address"] = "41216dfb6f11ef5fe1af87b044a3c1e562aaff4e42"

	// freeebalance to get energy.
	freeTx := make(map[string]interface{}, 0)
	freeTx["owner_address"] = "41216dfb6f11ef5fe1af87b044a3c1e562aaff4e42"
	freeTx["frozen_balance"] = 1000000000
	freeTx["frozen_duration"] = 3
	freeTx["resource"] = "ENERGY"
	freeTx["receiveraddress"] = "41216dfb6f11ef5fe1af87b044a3c1e562aaff4e42"
	freeTxInfo, err := c.FreezeBalance(freeTx)
	t.Log(err)

	t.Log(string(freeTxInfo))

	// sign for the tx.
	key, _ := crypto.HexToECDSA("e20110fd419dcf4df775d4feb3aeb17230aca7064b425ced47047e12c4b5e140")
	var freeTxMap map[string]interface{}
	json.Unmarshal(freeTxInfo, &freeTxMap)
	freeSig, _ := SignTronTx(freeTxMap["raw_data_hex"].(string), key)
	fsig := make([]string, 0)
	fsig = append(fsig, hex.EncodeToString(freeSig))
	freeTxMap["signature"] = fsig
	freeTxA, _ := c.BroadcastTx(freeTxMap)
	t.Log(string(freeTxA))
	// wait for mining
	time.Sleep(3 * time.Second)

	txInfo, err := c.DeployContract(deployTx)
	t.Log(string(txInfo))
	var txMap map[string]interface{}
	json.Unmarshal(txInfo, &txMap)

	sig, _ := SignTronTx(txMap["raw_data_hex"].(string), key)

	signature := make([]string, 0)
	signature = append(signature, hex.EncodeToString(sig))
	txMap["signature"] = signature

	// braodcast tx.
	btx, _ := c.BroadcastTx(txMap)
	t.Log(string(btx))
	// wait for mining
	time.Sleep(4 * time.Second)

	// get contract.
	request := make(map[string]interface{}, 0)
	request["value"] = txMap["contract_address"]
	contract, _ := c.GetContract(request)
	t.Log(string(contract))
}
