// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PgcABI is the input ABI used to generate the binding from.
const PgcABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pgcVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"params_\",\"type\":\"address\"},{\"name\":\"pgcVerifier_\",\"type\":\"address\"},{\"name\":\"tokenConverter_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tox\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogDepositAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct\",\"type\":\"uint256[6]\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogAggTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct1\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct2\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurnPart\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"epochLength_\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"openPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"closePending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"depositAccountETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[36]\"},{\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"name\":\"l\",\"type\":\"uint256[14]\"},{\"name\":\"r\",\"type\":\"uint256[14]\"}],\"name\":\"aggTransferETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[36]\"},{\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"l\",\"type\":\"uint256[14]\"},{\"name\":\"r\",\"type\":\"uint256[14]\"}],\"name\":\"aggTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getPendingFunNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burnETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"receiver\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256[18]\"},{\"name\":\"scalar\",\"type\":\"uint256[12]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[24]\"},{\"name\":\"r\",\"type\":\"uint256[24]\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"verifyBurnPartSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PgcBin is the compiled bytecode used for deploying new contracts.
const PgcBin = ``

// DeployPgc deploys a new Ethereum contract, binding an instance of Pgc to it.
func DeployPgc(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, pgcVerifier_ common.Address, tokenConverter_ common.Address) (common.Address, *types.Transaction, *Pgc, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PgcBin), backend, params_, pgcVerifier_, tokenConverter_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// Pgc is an auto generated Go binding around an Ethereum contract.
type Pgc struct {
	PgcCaller     // Read-only binding to the contract
	PgcTransactor // Write-only binding to the contract
	PgcFilterer   // Log filterer for contract events
}

// PgcCaller is an auto generated read-only Go binding around an Ethereum contract.
type PgcCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PgcTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PgcFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PgcSession struct {
	Contract     *Pgc              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PgcCallerSession struct {
	Contract *PgcCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PgcTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PgcTransactorSession struct {
	Contract     *PgcTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcRaw is an auto generated low-level Go binding around an Ethereum contract.
type PgcRaw struct {
	Contract *Pgc // Generic contract binding to access the raw methods on
}

// PgcCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PgcCallerRaw struct {
	Contract *PgcCaller // Generic read-only contract binding to access the raw methods on
}

// PgcTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PgcTransactorRaw struct {
	Contract *PgcTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPgc creates a new instance of Pgc, bound to a specific deployed contract.
func NewPgc(address common.Address, backend bind.ContractBackend) (*Pgc, error) {
	contract, err := bindPgc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// NewPgcCaller creates a new read-only instance of Pgc, bound to a specific deployed contract.
func NewPgcCaller(address common.Address, caller bind.ContractCaller) (*PgcCaller, error) {
	contract, err := bindPgc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PgcCaller{contract: contract}, nil
}

// NewPgcTransactor creates a new write-only instance of Pgc, bound to a specific deployed contract.
func NewPgcTransactor(address common.Address, transactor bind.ContractTransactor) (*PgcTransactor, error) {
	contract, err := bindPgc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PgcTransactor{contract: contract}, nil
}

// NewPgcFilterer creates a new log filterer instance of Pgc, bound to a specific deployed contract.
func NewPgcFilterer(address common.Address, filterer bind.ContractFilterer) (*PgcFilterer, error) {
	contract, err := bindPgc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PgcFilterer{contract: contract}, nil
}

// bindPgc binds a generic wrapper to an already deployed contract.
func bindPgc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.PgcCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcCallerSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcCaller) GetPendingFunNonce(opts *bind.CallOpts, x *big.Int, y *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "getPendingFunNonce", x, y)
	return *ret0, err
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcCallerSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCaller) GetUserBalance(opts *bind.CallOpts, x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	ret := new(struct {
		Ct    [4]*big.Int
		Nonce *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "getUserBalance", x, y, token)
	return *ret, err
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCallerSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcCaller) MaxNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "maxNumber")
	return *ret0, err
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcCallerSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcCallerSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcCallerSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcCaller) PgcVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "pgcVerifier")
	return *ret0, err
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcSession) PgcVerifier() (common.Address, error) {
	return _Pgc.Contract.PgcVerifier(&_Pgc.CallOpts)
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcCallerSession) PgcVerifier() (common.Address, error) {
	return _Pgc.Contract.PgcVerifier(&_Pgc.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcCaller) TokenConverter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "tokenConverter")
	return *ret0, err
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcCallerSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0x2ef866bd.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[24] l, uint256[24] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCaller) VerifyBurnPartSig(opts *bind.CallOpts, receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [24]*big.Int, r [24]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "verifyBurnPartSig", receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
	return *ret0, err
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0x2ef866bd.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[24] l, uint256[24] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcSession) VerifyBurnPartSig(receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [24]*big.Int, r [24]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnPartSig(&_Pgc.CallOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0x2ef866bd.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[24] l, uint256[24] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCallerSession) VerifyBurnPartSig(receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [24]*big.Int, r [24]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnPartSig(&_Pgc.CallOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x9caf5716.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[10] scalar, uint256 token, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcTransactor) AggTransfer(opts *bind.TransactOpts, points [36]*big.Int, scalar [10]*big.Int, token *big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "aggTransfer", points, scalar, token, l, r)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x9caf5716.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[10] scalar, uint256 token, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcSession) AggTransfer(points [36]*big.Int, scalar [10]*big.Int, token *big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, token, l, r)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x9caf5716.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[10] scalar, uint256 token, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcTransactorSession) AggTransfer(points [36]*big.Int, scalar [10]*big.Int, token *big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, token, l, r)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0x2748fe85.
//
// Solidity: function aggTransferETH(uint256[36] points, uint256[10] scalar, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcTransactor) AggTransferETH(opts *bind.TransactOpts, points [36]*big.Int, scalar [10]*big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "aggTransferETH", points, scalar, l, r)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0x2748fe85.
//
// Solidity: function aggTransferETH(uint256[36] points, uint256[10] scalar, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcSession) AggTransferETH(points [36]*big.Int, scalar [10]*big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransferETH(&_Pgc.TransactOpts, points, scalar, l, r)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0x2748fe85.
//
// Solidity: function aggTransferETH(uint256[36] points, uint256[10] scalar, uint256[14] l, uint256[14] r) returns(bool)
func (_Pgc *PgcTransactorSession) AggTransferETH(points [36]*big.Int, scalar [10]*big.Int, l [14]*big.Int, r [14]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransferETH(&_Pgc.TransactOpts, points, scalar, l, r)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcTransactor) Burn(opts *bind.TransactOpts, receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burn", receiver, token, amount, publicKey, proof, z)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, publicKey, proof, z)
}

// Burn is a paid mutator transaction binding the contract method 0xe7cceb65.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcTransactorSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcTransactor) BurnETH(opts *bind.TransactOpts, receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burnETH", receiver, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcSession) BurnETH(receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnETH(&_Pgc.TransactOpts, receiver, amount, publicKey, proof, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0xd933900a.
//
// Solidity: function burnETH(address receiver, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z) returns(bool)
func (_Pgc *PgcTransactorSession) BurnETH(receiver common.Address, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnETH(&_Pgc.TransactOpts, receiver, amount, publicKey, proof, z)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) ClosePending(opts *bind.TransactOpts, x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "closePending", x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcTransactor) DepositAccount(opts *bind.TransactOpts, publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "depositAccount", publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcTransactorSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) returns(bool)
func (_Pgc *PgcTransactor) DepositAccountETH(opts *bind.TransactOpts, publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "depositAccountETH", publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) returns(bool)
func (_Pgc *PgcSession) DepositAccountETH(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccountETH(&_Pgc.TransactOpts, publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0xdedef233.
//
// Solidity: function depositAccountETH(uint256[2] publicKey) returns(bool)
func (_Pgc *PgcTransactorSession) DepositAccountETH(publicKey [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccountETH(&_Pgc.TransactOpts, publicKey)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) OpenPending(opts *bind.TransactOpts, x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "openPending", x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// PgcLogAggTransferIterator is returned from FilterLogAggTransfer and is used to iterate over the raw logs and unpacked data for LogAggTransfer events raised by the Pgc contract.
type PgcLogAggTransferIterator struct {
	Event *PgcLogAggTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogAggTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogAggTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogAggTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogAggTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogAggTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogAggTransfer represents a LogAggTransfer event raised by the Pgc contract.
type PgcLogAggTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct     [6]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogAggTransfer is a free log retrieval operation binding the contract event 0xa61999d16fd311c353dc0c95b37a4d72bfad304f45e4c3cea245741c29265266.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Pgc *PgcFilterer) FilterLogAggTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogAggTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogAggTransferIterator{contract: _Pgc.contract, event: "LogAggTransfer", logs: logs, sub: sub}, nil
}

// WatchLogAggTransfer is a free log subscription operation binding the contract event 0xa61999d16fd311c353dc0c95b37a4d72bfad304f45e4c3cea245741c29265266.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Pgc *PgcFilterer) WatchLogAggTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogAggTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogAggTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogAggTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the Pgc contract.
type PgcLogBurnIterator struct {
	Event *PgcLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurn represents a LogBurn event raised by the Pgc contract.
type PgcLogBurn struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurn(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnIterator{contract: _Pgc.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *PgcLogBurn, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurn)
				if err := _Pgc.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogBurnPartIterator is returned from FilterLogBurnPart and is used to iterate over the raw logs and unpacked data for LogBurnPart events raised by the Pgc contract.
type PgcLogBurnPartIterator struct {
	Event *PgcLogBurnPart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnPartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurnPart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurnPart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnPartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnPartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurnPart represents a LogBurnPart event raised by the Pgc contract.
type PgcLogBurnPart struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurnPart is a free log retrieval operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurnPart(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnPartIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnPartIterator{contract: _Pgc.contract, event: "LogBurnPart", logs: logs, sub: sub}, nil
}

// WatchLogBurnPart is a free log subscription operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurnPart(opts *bind.WatchOpts, sink chan<- *PgcLogBurnPart, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurnPart)
				if err := _Pgc.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogDepositAccountIterator is returned from FilterLogDepositAccount and is used to iterate over the raw logs and unpacked data for LogDepositAccount events raised by the Pgc contract.
type PgcLogDepositAccountIterator struct {
	Event *PgcLogDepositAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogDepositAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogDepositAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogDepositAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogDepositAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogDepositAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogDepositAccount represents a LogDepositAccount event raised by the Pgc contract.
type PgcLogDepositAccount struct {
	Proxy  common.Address
	Token  common.Address
	Tox    *big.Int
	Toy    *big.Int
	Amount *big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDepositAccount is a free log retrieval operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogDepositAccount(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogDepositAccountIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogDepositAccountIterator{contract: _Pgc.contract, event: "LogDepositAccount", logs: logs, sub: sub}, nil
}

// WatchLogDepositAccount is a free log subscription operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogDepositAccount(opts *bind.WatchOpts, sink chan<- *PgcLogDepositAccount, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogDepositAccount)
				if err := _Pgc.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogTransferIterator is returned from FilterLogTransfer and is used to iterate over the raw logs and unpacked data for LogTransfer events raised by the Pgc contract.
type PgcLogTransferIterator struct {
	Event *PgcLogTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogTransfer represents a LogTransfer event raised by the Pgc contract.
type PgcLogTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct1    [4]*big.Int
	Ct2    [4]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogTransfer is a free log retrieval operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) FilterLogTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogTransferIterator{contract: _Pgc.contract, event: "LogTransfer", logs: logs, sub: sub}, nil
}

// WatchLogTransfer is a free log subscription operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) WatchLogTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
