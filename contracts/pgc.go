// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PgcABI is the input ABI used to generate the binding from.
const PgcABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pgcVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"params_\",\"type\":\"address\"},{\"name\":\"pgcVerifier_\",\"type\":\"address\"},{\"name\":\"tokenConverter_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tox\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogDepositAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct\",\"type\":\"uint256[6]\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogAggTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct1\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"ct2\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurnPart\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"epochLength_\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"openPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"closePending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[36]\"},{\"name\":\"scalar\",\"type\":\"uint256[11]\"},{\"name\":\"l\",\"type\":\"uint256[12]\"},{\"name\":\"r\",\"type\":\"uint256[12]\"}],\"name\":\"aggTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[28]\"},{\"name\":\"scalar\",\"type\":\"uint256[14]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[20]\"},{\"name\":\"r\",\"type\":\"uint256[20]\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getPendingFunNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256[18]\"},{\"name\":\"scalar\",\"type\":\"uint256[12]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[20]\"},{\"name\":\"r\",\"type\":\"uint256[20]\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"burnPart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"receiver\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256[18]\"},{\"name\":\"scalar\",\"type\":\"uint256[12]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[20]\"},{\"name\":\"r\",\"type\":\"uint256[20]\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"verifyBurnPartSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"receiver\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"verifyBurnSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PgcBin is the compiled bytecode used for deploying new contracts.
const PgcBin = `0x60806040523480156200001157600080fd5b5060405160608062005ee2833981018060405260608110156200003357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001256200047e565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620001a957600080fd5b505afa158015620001be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620001e457600080fd5b81019080919050509050620001f86200047e565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200027c57600080fd5b505afa15801562000291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620002b757600080fd5b81019080919050509050816000600281101515620002d157fe5b6020020151600860000181905550816001600281101515620002ef57fe5b60200201516008600101819055508060006002811015156200030d57fe5b6020020151600a600001819055508060016002811015156200032b57fe5b6020020151600a60010181905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015620003be57600080fd5b505afa158015620003d3573d6000803e3d6000fd5b505050506040513d6020811015620003ea57600080fd5b8101908080519060200190929190505050602014151562000473576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f62697473697a65206e6f7420657175616c00000000000000000000000000000081525060200191505060405180910390fd5b5050505050620004a0565b6040805190810160405280600290602082028038833980820191505090505090565b615a3280620004b06000396000f3fe608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630508fdab1461010c5780632e52d6061461031f578063325a2ee71461034a5780633a4f69991461049f5780633e8d3764146104ca57806344573fea146104f557806348d5754c1461059c5780635606a4ca1461064457806359cfef5c1461069d5780635f90d6c9146107dc5780636ed72bbb1461092e578063a67aee1f14610985578063b8c9d365146109dc578063c1897e7414610a0e578063cff0ab9614610c0b578063d405e5a714610c62578063dde0536c14610cf2578063e2179b8e14610edb578063ee42cf7314610f0d575b600080fd5b34801561011857600080fd5b506103056004803603610b8081101561013057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610fa7565b604051808215151515815260200191505060405180910390f35b34801561032b57600080fd5b50610334611a3d565b6040518082815260200191505060405180910390f35b34801561035657600080fd5b5061048560048036036101a081101561036e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611a42565b604051808215151515815260200191505060405180910390f35b3480156104ab57600080fd5b506104b46122f0565b6040518082815260200191505060405180910390f35b3480156104d657600080fd5b506104df6122f8565b6040518082815260200191505060405180910390f35b6105826004803603608081101561050b57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506122fd565b604051808215151515815260200191505060405180910390f35b3480156105a857600080fd5b506105ff600480360360608110156105bf57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612869565b6040518083600460200280838360005b8381101561062a57808201518184015260208101905061060f565b505050509050018281526020019250505060405180910390f35b34801561065057600080fd5b506106876004803603604081101561066757600080fd5b810190808035906020019092919080359060200190929190505050612938565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506107c260048036036101a08110156106c157600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050612967565b604051808215151515815260200191505060405180910390f35b3480156107e857600080fd5b5061091460048036036108e081101561080057600080fd5b810190808061048001906024806020026040519081016040528092919082602460200280828437600081840152601f19601f8201169050808301925050505050509192919290806101600190600b806020026040519081016040528092919082600b60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f8201169050808301925050505050509192919290505050612a87565b604051808215151515815260200191505060405180910390f35b34801561093a57600080fd5b506109436131e5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561099157600080fd5b5061099a61320b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109e857600080fd5b506109f1613231565b604051808381526020018281526020019250505060405180910390f35b348015610a1a57600080fd5b50610bf16004803603610b80811015610a3257600080fd5b810190808035906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050613243565b604051808215151515815260200191505060405180910390f35b348015610c1757600080fd5b50610c206133ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c6e57600080fd5b50610cf0600480360360a0811015610c8557600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050613413565b005b348015610cfe57600080fd5b50610ec16004803603610cc0811015610d1657600080fd5b81019080806103800190601c806020026040519081016040528092919082601c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f82011690508083019250505050505091929192908061028001906014806020026040519081016040528092919082601460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506136f2565b604051808215151515815260200191505060405180910390f35b348015610ee757600080fd5b50610ef0614001565b604051808381526020018281526020019250505060405180910390f35b348015610f1957600080fd5b50610fa5600480360360c0811015610f3057600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050614013565b005b600060018910151515611022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b61104a8b73ffffffffffffffffffffffffffffffffffffffff168b8b8b8b8b8b8b8b8b613243565b15156110be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269667920736967206661696c656420666f72206275726e20706172740081525060200191505060405180910390fd5b6110c6615842565b8a816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061113389600060128110151561111057fe5b60200201518a600160128110151561112457fe5b60200201518360600151612869565b8191508260c0018360e0018281525082905250508060e00151841415156111c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663122d6e468b8b8b8b8b8b8860c001516040518863ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018088815260200187601260200280838360005b8381101561126757808201518184015260208101905061124c565b5050505090500186600c60200280838360005b8381101561129557808201518184015260208101905061127a565b5050505090500185601060200280838360005b838110156112c35780820151818401526020810190506112a8565b5050505090500184601460200280838360005b838110156112f15780820151818401526020810190506112d6565b5050505090500183601460200280838360005b8381101561131f578082015181840152602081019050611304565b5050505090500182600460200280838360005b8381101561134d578082015181840152602081019050611332565b50505050905001975050505050505050602060405180830381600087803b15801561137757600080fd5b505af115801561138b573d6000803e3d6000fd5b505050506040513d60208110156113a157600080fd5b81019080805190602001909291905050501515611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f766572696679206275726e706172742070726f6f6673206661696c656400000081525060200191505060405180910390fd5b60408051908101604052808a600260128110151561144057fe5b602002015181526020018a600360128110151561145957fe5b602002015181525081600001516000018190525060408051908101604052808a600460128110151561148757fe5b602002015181526020018a60056012811015156114a057fe5b60200201518152508160000151602001819052506114e58960006012811015156114c657fe5b60200201518a60016012811015156114da57fe5b60200201518d614309565b8160400181905250611518611501826000015160000151614807565b82604001516000015161489790919063ffffffff16565b81604001516000018190525061154f611538826000015160200151614807565b82604001516020015161489790919063ffffffff16565b81604001516020018190525061159181604001518a600060128110151561157257fe5b60200201518b600160128110151561158657fe5b60200201518e614939565b60008b14156116e4578b73ffffffffffffffffffffffffffffffffffffffff166108fc600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d160008e6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561167857600080fd5b505afa15801561168c573d6000803e3d6000fd5b505050506040513d60208110156116a257600080fd5b81019080805190602001909291905050509081150290604051600060405180830381858888f193505050501580156116de573d6000803e3d6000fd5b50611970565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d182606001518c6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156117ab57600080fd5b505afa1580156117bf573d6000803e3d6000fd5b505050506040513d60208110156117d557600080fd5b8101908080519060200190929190505050816080018181525050806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d83608001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561189a57600080fd5b505af11580156118ae573d6000803e3d6000fd5b505050506040513d60208110156118c457600080fd5b8101908080519060200190929190505050151561196f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b806060015173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c18c60006012811015156119e957fe5b60200201518d60016012811015156119fd57fe5b60200201518f426040518085815260200184815260200183815260200182815260200194505050505060405180910390a4509a9950505050505050505050565b600581565b6000611a6a8973ffffffffffffffffffffffffffffffffffffffff1689898989898989612967565b1515611ade576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f696e76616c69642073696720666f72206275726e74780000000000000000000081525060200191505060405180910390fd5b60018710151515611b57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b611b5f6158ea565b6000611b92886000600281101515611b7357fe5b6020020151896001600281101515611b8757fe5b60200201518c612869565b80925081935050508085141515611c11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3bbd7208a8a8a8a876040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018086815260200185600260200280838360005b83811015611cb0578082015181840152602081019050611c95565b5050505090500184600460200280838360005b83811015611cde578082015181840152602081019050611cc3565b5050505090500183815260200182600460200280838360005b83811015611d12578082015181840152602081019050611cf7565b505050509050019550505050505060206040518083038186803b158015611d3857600080fd5b505afa158015611d4c573d6000803e3d6000fd5b505050506040513d6020811015611d6257600080fd5b81019080805190602001909291905050501515611de7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f646c65207369676d6120766572696679206661696c656400000000000000000081525060200191505060405180910390fd5b611def61590d565b6040805190810160405280600081526020016000815250816000018190525060408051908101604052806000815260200160008152508160200181905250611e5f818a6000600281101515611e4057fe5b60200201518b6001600281101515611e5457fe5b60200201518e614939565b60008b1415611fb1578b73ffffffffffffffffffffffffffffffffffffffff166108fc600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18e8e6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d6020811015611f6f57600080fd5b81019080805190602001909291905050509081150290604051600060405180830381858888f19350505050158015611fab573d6000803e3d6000fd5b50612227565b8a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18f8f6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561209157600080fd5b505afa1580156120a5573d6000803e3d6000fd5b505050506040513d60208110156120bb57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561215157600080fd5b505af1158015612165573d6000803e3d6000fd5b505050506040513d602081101561217b57600080fd5b81019080805190602001909291905050501515612226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b98c600060028110151561229c57fe5b60200201518d60016002811015156122b057fe5b60200201518f426040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505098975050505050505050565b602060020a81565b602081565b60008060008473ffffffffffffffffffffffffffffffffffffffff16141561242457600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485346040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156123e257600080fd5b505afa1580156123f6573d6000803e3d6000fd5b505050506040513d602081101561240c57600080fd5b81019080805190602001909291905050509050612723565b60003414151561249c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6465706f73697420746f6b656e20646f6e27742072656365697665206574680081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561257357600080fd5b505af1158015612587573d6000803e3d6000fd5b505050506040513d602081101561259d57600080fd5b81019080805190602001909291905050501515612622576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156126e557600080fd5b505afa1580156126f9573d6000803e3d6000fd5b505050506040513d602081101561270f57600080fd5b810190808051906020019092919050505090505b61272b61590d565b61276f82604080519081016040528089600060028110151561274957fe5b6020020151815260200189600160028110151561276257fe5b6020020151815250614e93565b90506127b98187600060028110151561278457fe5b602002015188600160028110151561279857fe5b60200201518873ffffffffffffffffffffffffffffffffffffffff16614f88565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e7488600060028110151561281757fe5b602002015189600160028110151561282b57fe5b602002015186426040518085815260200184815260200183815260200182815260200194505050505060405180910390a36001925050509392505050565b6128716158ea565b600061287b61590d565b61289c86868673ffffffffffffffffffffffffffffffffffffffff16614309565b90508060000151600001518360006004811015156128b657fe5b6020020181815250508060000151602001518360016004811015156128d757fe5b6020020181815250508060200151600001518360026004811015156128f857fe5b60200201818152505080602001516020015183600360048110151561291957fe5b6020020181815250508060400151915082829250925050935093915050565b600060076000848152602001908152602001600020600083815260200190815260200160002054905092915050565b600080612a1d8a8a8a8a8a8a8a6040516020018088815260200187815260200186815260200185600260200280838360005b838110156129b4578082015181840152602081019050612999565b5050505090500184600460200280838360005b838110156129e25780820151818401526020810190506129c7565b5050505090500183815260200182815260200197505050505050505060405160208183030381529060405280519060200120600190046153a1565b9050612a7881886000600281101515612a3257fe5b6020020151896001600281101515612a4657fe5b6020020151866000600281101515612a5a57fe5b6020020151876001600281101515612a6e57fe5b60200201516153db565b91505098975050505050505050565b6000612a91615842565b6000809050612ac8876000602481101515612aa857fe5b6020020151886001602481101515612abc57fe5b60200201516000612869565b8191508360c0018460e0018281525082905250508160e00151866000600b81101515612af057fe5b6020020151141515612b6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8ae1897888888888760c001516040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018086602460200280838360005b83811015612c07578082015181840152602081019050612bec565b5050505090500185600b60200280838360005b83811015612c35578082015181840152602081019050612c1a565b5050505090500184600c60200280838360005b83811015612c63578082015181840152602081019050612c48565b5050505090500183600c60200280838360005b83811015612c91578082015181840152602081019050612c76565b5050505090500182600460200280838360005b83811015612cbf578082015181840152602081019050612ca4565b5050505090500195505050505050602060405180830381600087803b158015612ce757600080fd5b505af1158015612cfb573d6000803e3d6000fd5b505050506040513d6020811015612d1157600080fd5b81019080805190602001909291905050501515612d96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7472616e736665722070726f6f667320696e76616c696400000000000000000081525060200191505060405180910390fd5b6040805190810160405280886010602481101515612db057fe5b60200201518152602001886011602481101515612dc957fe5b60200201518152508260400151600001819052506040805190810160405280886012602481101515612df757fe5b60200201518152602001886013602481101515612e1057fe5b6020020151815250826040015160200181905250612e5a8260400151886000602481101515612e3b57fe5b6020020151896001602481101515612e4f57fe5b602002015184614939565b6040805190810160405280886006602481101515612e7457fe5b60200201518152602001886007602481101515612e8d57fe5b60200201518152508260200151600001819052506040805190810160405280886008602481101515612ebb57fe5b60200201518152602001886009602481101515612ed457fe5b6020020151815250826020015160200181905250612f1e8260200151886002602481101515612eff57fe5b6020020151896003602481101515612f1357fe5b602002015184614f88565b866000602481101515612f2d57fe5b60200201518261010001516000600481101515612f4657fe5b602002018181525050866001602481101515612f5e57fe5b60200201518261010001516001600481101515612f7757fe5b602002018181525050866002602481101515612f8f57fe5b60200201518261010001516002600481101515612fa857fe5b602002018181525050866003602481101515612fc057fe5b60200201518261010001516003600481101515612fd957fe5b602002018181525050866004602481101515612ff157fe5b6020020151826101600151600060068110151561300a57fe5b60200201818152505086600560248110151561302257fe5b6020020151826101600151600160068110151561303b57fe5b60200201818152505086600660248110151561305357fe5b6020020151826101600151600260068110151561306c57fe5b60200201818152505086600760248110151561308457fe5b6020020151826101600151600360068110151561309d57fe5b6020020181815250508660086024811015156130b557fe5b602002015182610160015160046006811015156130ce57fe5b6020020181815250508660096024811015156130e657fe5b602002015182610160015160056006811015156130ff57fe5b6020020181815250508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa61999d16fd311c353dc0c95b37a4d72bfad304f45e4c3cea245741c29265266846101000151856101600151426040518084600460200280838360005b8381101561318f578082015181840152602081019050613174565b5050505090500183600660200280838360005b838110156131bd5780820151818401526020810190506131a2565b50505050905001828152602001935050505060405180910390a3600192505050949350505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088060000154908060010154905082565b6000806133818c8c8c8c8c8c8c8c8c604051602001808a815260200189815260200188815260200187601260200280838360005b83811015613292578082015181840152602081019050613277565b5050505090500186600c60200280838360005b838110156132c05780820151818401526020810190506132a5565b5050505090500185601060200280838360005b838110156132ee5780820151818401526020810190506132d3565b5050505090500184601460200280838360005b8381101561331c578082015181840152602081019050613301565b5050505090500183601460200280838360005b8381101561334a57808201518184015260208101905061332f565b50505050905001828152602001995050505050505050505060405160208183030381529060405280519060200120600190046153a1565b90506133dc818a600060128110151561339657fe5b60200201518b60016012811015156133aa57fe5b60200201518660006002811015156133be57fe5b60200201518760016002811015156133d257fe5b60200201516153db565b9150509a9950505050505050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615156134b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70656e64696e6720616c726561647920636c6f7365640000000000000000000081525060200191505060405180910390fd5b60006007600086815260200190815260200160002060008581526020019081526020016000205490508083141515613559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b600061359e86868660405160200180848152602001838152602001828152602001935050505060405160208183030381529060405280519060200120600190046153a1565b90506135d38187878660006002811015156135b557fe5b60200201518760016002811015156135c957fe5b60200201516153db565b1515613647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269667920636c6f73652070656e64696e6720736967206661696c65640081525060200191505060405180910390fd5b600060036000888152602001908152602001600020600087815260200190815260200160002081905550600060066000888152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff0219169083151502179055506136c26001836154b590919063ffffffff16565b60076000888152602001908152602001600020600087815260200190815260200160002081905550505050505050565b600061370489898989898989896154f1565b1515613778576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f76657269667920736967206661696c656420666f72207472616e73666572747881525060200191505060405180910390fd5b613780615842565b6137b18a6000601c8110151561379257fe5b60200201518b6001601c811015156137a657fe5b602002015187612869565b8191508260c0018360e0018281525082905250508060e0015184141515613840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3c357f68b8b8b8b8b8760c001516040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018087601c60200280838360005b838110156138de5780820151818401526020810190506138c3565b5050505090500186600e60200280838360005b8381101561390c5780820151818401526020810190506138f1565b5050505090500185601060200280838360005b8381101561393a57808201518184015260208101905061391f565b5050505090500184601460200280838360005b8381101561396857808201518184015260208101905061394d565b5050505090500183601460200280838360005b8381101561399657808201518184015260208101905061397b565b5050505090500182600460200280838360005b838110156139c45780820151818401526020810190506139a9565b505050509050019650505050505050602060405180830381600087803b1580156139ed57600080fd5b505af1158015613a01573d6000803e3d6000fd5b505050506040513d6020811015613a1757600080fd5b81019080805190602001909291905050501515613ac2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f7665726966792070726f6f667320666f72207472616e73666572206661696c6581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60408051908101604052808b6002601c81101515613adc57fe5b602002015181526020018b6003601c81101515613af557fe5b602002015181525081600001516000018190525060408051908101604052808b6004601c81101515613b2357fe5b602002015181526020018b6005601c81101515613b3c57fe5b602002015181525081600001516020018190525060408051908101604052808b6014601c81101515613b6a57fe5b602002015181526020018b6015601c81101515613b8357fe5b602002015181525081604001516000018190525060408051908101604052808b6016601c81101515613bb157fe5b602002015181526020018b6017601c81101515613bca57fe5b6020020151815250816040015160200181905250613c1481604001518b6000601c81101515613bf557fe5b60200201518c6001601c81101515613c0957fe5b602002015188614939565b60408051908101604052808b6008601c81101515613c2e57fe5b602002015181526020018b6009601c81101515613c4757fe5b602002015181525081602001516000018190525060408051908101604052808b600a601c81101515613c7557fe5b602002015181526020018b600b601c81101515613c8e57fe5b6020020151815250816020015160200181905250613cd881602001518b6006601c81101515613cb957fe5b60200201518c6007601c81101515613ccd57fe5b602002015188614f88565b896000601c81101515613ce757fe5b60200201518161010001516000600481101515613d0057fe5b602002018181525050896001601c81101515613d1857fe5b60200201518161010001516001600481101515613d3157fe5b602002018181525050896006601c81101515613d4957fe5b60200201518161010001516002600481101515613d6257fe5b602002018181525050896007601c81101515613d7a57fe5b60200201518161010001516003600481101515613d9357fe5b602002018181525050806000015160000151600001518161012001516000600481101515613dbd57fe5b602002018181525050806000015160000151602001518161012001516001600481101515613de757fe5b602002018181525050806000015160200151600001518161012001516002600481101515613e1157fe5b602002018181525050806000015160200151602001518161012001516003600481101515613e3b57fe5b602002018181525050806020015160000151600001518161014001516000600481101515613e6557fe5b602002018181525050806020015160000151602001518161014001516001600481101515613e8f57fe5b602002018181525050806020015160200151600001518161014001516002600481101515613eb957fe5b602002018181525050806020015160200151602001518161014001516003600481101515613ee357fe5b6020020181815250508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185836101000151846101200151856101400151426040518085600460200280838360005b83811015613f79578082015181840152602081019050613f5e565b5050505090500184600460200280838360005b83811015613fa7578082015181840152602081019050613f8c565b5050505090500183600460200280838360005b83811015613fd5578082015181840152602081019050613fba565b5050505090500182815260200194505050505060405180910390a3600191505098975050505050505050565b600a8060000154908060010154905082565b60066000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff161515156140ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70656e64696e6720616c7265616479206f70656e65640000000000000000000081525060200191505060405180910390fd5b6000600760008781526020019081526020016000206000868152602001908152602001600020549050808314151561415a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b60006141a7878787876040516020018085815260200184815260200183815260200182815260200194505050505060405160208183030381529060405280519060200120600190046153a1565b90506141dc8188888660006002811015156141be57fe5b60200201518760016002811015156141d257fe5b60200201516153db565b1515614250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f766572696679206f70656e2070656e64696e6720736967206661696c6564000081525060200191505060405180910390fd5b600585101561425e57603294505b8460036000898152602001908152602001600020600088815260200190815260200160002081905550600160066000898152602001908152602001600020600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506142d86001836154b590919063ffffffff16565b6007600089815260200190815260200160002060008881526020019081526020016000208190555050505050505050565b61431161590d565b61431961590d565b6000808681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060606040519081016040529081600082016040805190810160405290816000820154815260200160018201548152505081526020016002820160408051908101604052908160008201548152602001600182015481525050815260200160048201548152505090506143bd61590d565b6001600087815260200190815260200160002060008681526020019081526020016000206000858152602001908152602001600020606060405190810160405290816000820160408051908101604052908160008201548152602001600182015481525050815260200160028201604080519081016040529081600082015481526020016001820154815250508152602001600482015481525050905061446261590d565b826040015181604001818152505061448b8260000151846000015161489790919063ffffffff16565b81600001819052506144ae8260200151846020015161489790919063ffffffff16565b816020018190525060066000888152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff161580156145315750600060026000898152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000206002016000015414155b15614621576145a3600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060000160408051908101604052908160008201548152602001600182015481525050826000015161489790919063ffffffff16565b8160000181905250614618600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060020160408051908101604052908160008201548152602001600182015481525050826020015161489790919063ffffffff16565b81602001819052505b60066000888152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff16801561469b5750600060026000898152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000206002016000015414155b801561470a5750600560008881526020019081526020016000206000878152602001908152602001600020600086815260200190815260200160002054600360008981526020019081526020016000206000888152602001908152602001600020544381151561470757fe5b04115b156147fa5761477c600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060000160408051908101604052908160008201548152602001600182015481525050826000015161489790919063ffffffff16565b81600001819052506147f1600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060020160408051908101604052908160008201548152602001600182015481525050826020015161489790919063ffffffff16565b81602001819052505b8093505050509392505050565b61480f61593b565b60008260000151148015614827575060008260200151145b1561484a5760408051908101604052806000815260200160008152509050614892565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b61489f61593b565b6148a76158ea565b83600001518160006004811015156148bb57fe5b60200201818152505083602001518160016004811015156148d857fe5b60200201818152505082600001518160026004811015156148f557fe5b602002018181525050826020015181600360048110151561491257fe5b6020020181815250506040826080836006600019fa151561493257600080fd5b5092915050565b83600080858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206000820151816000016000820151816000015560208201518160010155505060208201518160020160008201518160000155602082015181600101555050604082015181600401559050506149d1600185604001516154b590919063ffffffff16565b60008085815260200190815260200160002060008481526020019081526020016000206000838152602001908152602001600020600401819055506000600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160000154141515614b1e576040805190810160405280600081526020016000815250600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040805190810160405280600081526020016000815250600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16158015614b995750600060026000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206002016000015414155b15614c6b576040805190810160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040805190810160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff168015614d0c57506005600084815260200190815260200160002060008381526020019081526020016000206000828152602001908152602001600020546003600085815260200190815260200160002060008481526020019081526020016000205443811515614d0957fe5b04115b15614e8d576003600084815260200190815260200160002060008381526020019081526020016000205443811515614d4057fe5b046005600085815260200190815260200160002060008481526020019081526020016000206000838152602001908152602001600020819055506000600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160000154141515614e8c576040805190810160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040805190810160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b5b50505050565b614e9b61590d565b602060020a83101515614f16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f616d6f756e74206f7574206f662072616e67650000000000000000000000000081525060200191505060405180910390fd5b6000809050614f2361590d565b60408051908101604052806000815260200160008152508160000181905250614f7585600a6040805190810160405290816000820154815260200160018201548152505061568990919063ffffffff16565b8160200181905250809250505092915050565b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615156150a65760008060008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002090506150318560000151826000016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b8160000160008201518160000155602082015181600101559050506150858560200151826002016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b8160020160008201518160000155602082015181600101559050505061539b565b6000600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002090506000600260008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002090506000600360008781526020019081526020016000206000868152602001908152602001600020544381151561514957fe5b049050600560008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002054811415615239576151c28760000151836000016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b8260000160008201518160000155602082015181600101559050506152168760200151836002016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b82600201600082015181600001556020820151816001015590505050505061539b565b6152908260000160408051908101604052908160008201548152602001600182015481525050846000016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b8360000160008201518160000155602082015181600101559050506153028260020160408051908101604052908160008201548152602001600182015481525050846002016040805190810160405290816000820154815260200160018201548152505061489790919063ffffffff16565b83600201600082015181600001556020820151816001015590505086600001518260000160008201518160000155602082015181600101559050508660200151826002016000820151816000015560208201518160010155905050806005600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020819055505050505b50505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080838115156153d257fe5b06915050919050565b60006153e682615736565b915060006153fd838861580690919063ffffffff16565b90506000615414848661580690919063ffffffff16565b905061541e61593b565b6154896154488360408051908101604052808c81526020018b81525061568990919063ffffffff16565b61547b8560086040805190810160405290816000820154815260200160018201548152505061568990919063ffffffff16565b61489790919063ffffffff16565b90508581600001511415156154a457600093505050506154ac565b600193505050505b95945050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808015156154e557fe5b83850891505092915050565b60008061561f8a8a8a8a8a8a8a6040516020018088601c60200280838360005b8381101561552c578082015181840152602081019050615511565b5050505090500187600e60200280838360005b8381101561555a57808201518184015260208101905061553f565b5050505090500186601060200280838360005b8381101561558857808201518184015260208101905061556d565b5050505090500185601460200280838360005b838110156155b657808201518184015260208101905061559b565b5050505090500184601460200280838360005b838110156155e45780820151818401526020810190506155c9565b5050505090500183815260200182815260200197505050505050505060405160208183030381529060405280519060200120600190046153a1565b905061567a818b6000601c8110151561563457fe5b60200201518c6001601c8110151561564857fe5b602002015186600060028110151561565c57fe5b602002015187600160028110151561567057fe5b60200201516153db565b91505098975050505050505050565b61569161593b565b60018214156156a257829050615730565b60028214156156bc576156b58384614897565b9050615730565b6156c4615955565b83600001518160006003811015156156d857fe5b60200201818152505083602001518160016003811015156156f557fe5b6020020181815250508281600260038110151561570e57fe5b6020020181815250506040826060836007600019fa151561572e57600080fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506000839050600081141561577557600092505050615801565b8181111561578c57818181151561578857fe5b0690505b600080600190506000849050600084905060005b6000821415156157d95781838115156157b557fe5b049050838482028603838484028603809550819650829750839850505050506157a0565b60008512156157f657846000038703975050505050505050615801565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561583657fe5b83850991505092915050565b61052060405190810160405280615857615978565b8152602001615864615978565b8152602001615871615978565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016158a96159a6565b8152602001600081526020016158bd6159a6565b81526020016158ca6159a6565b81526020016158d76159a6565b81526020016158e46159c9565b81525090565b608060405190810160405280600490602082028038833980820191505090505090565b60a0604051908101604052806159216159ec565b815260200161592e6159ec565b8152602001600081525090565b604080519081016040528060008152602001600081525090565b606060405190810160405280600390602082028038833980820191505090505090565b60a06040519081016040528061598c6159ec565b81526020016159996159ec565b8152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b60c060405190810160405280600690602082028038833980820191505090505090565b60408051908101604052806000815260200160008152509056fea165627a7a72305820928b5dd83a9ad45ccca4e051fb1ae69fa05adf660769da077beafb3d52411eed0029`

// DeployPgc deploys a new Ethereum contract, binding an instance of Pgc to it.
func DeployPgc(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, pgcVerifier_ common.Address, tokenConverter_ common.Address) (common.Address, *types.Transaction, *Pgc, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PgcBin), backend, params_, pgcVerifier_, tokenConverter_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// Pgc is an auto generated Go binding around an Ethereum contract.
type Pgc struct {
	PgcCaller     // Read-only binding to the contract
	PgcTransactor // Write-only binding to the contract
	PgcFilterer   // Log filterer for contract events
}

// PgcCaller is an auto generated read-only Go binding around an Ethereum contract.
type PgcCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PgcTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PgcFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PgcSession struct {
	Contract     *Pgc              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PgcCallerSession struct {
	Contract *PgcCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PgcTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PgcTransactorSession struct {
	Contract     *PgcTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcRaw is an auto generated low-level Go binding around an Ethereum contract.
type PgcRaw struct {
	Contract *Pgc // Generic contract binding to access the raw methods on
}

// PgcCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PgcCallerRaw struct {
	Contract *PgcCaller // Generic read-only contract binding to access the raw methods on
}

// PgcTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PgcTransactorRaw struct {
	Contract *PgcTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPgc creates a new instance of Pgc, bound to a specific deployed contract.
func NewPgc(address common.Address, backend bind.ContractBackend) (*Pgc, error) {
	contract, err := bindPgc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// NewPgcCaller creates a new read-only instance of Pgc, bound to a specific deployed contract.
func NewPgcCaller(address common.Address, caller bind.ContractCaller) (*PgcCaller, error) {
	contract, err := bindPgc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PgcCaller{contract: contract}, nil
}

// NewPgcTransactor creates a new write-only instance of Pgc, bound to a specific deployed contract.
func NewPgcTransactor(address common.Address, transactor bind.ContractTransactor) (*PgcTransactor, error) {
	contract, err := bindPgc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PgcTransactor{contract: contract}, nil
}

// NewPgcFilterer creates a new log filterer instance of Pgc, bound to a specific deployed contract.
func NewPgcFilterer(address common.Address, filterer bind.ContractFilterer) (*PgcFilterer, error) {
	contract, err := bindPgc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PgcFilterer{contract: contract}, nil
}

// bindPgc binds a generic wrapper to an already deployed contract.
func bindPgc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.PgcCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgc *PgcCallerSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcCaller) GetPendingFunNonce(opts *bind.CallOpts, x *big.Int, y *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "getPendingFunNonce", x, y)
	return *ret0, err
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) constant returns(uint256)
func (_Pgc *PgcCallerSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCaller) GetUserBalance(opts *bind.CallOpts, x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	ret := new(struct {
		Ct    [4]*big.Int
		Nonce *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "getUserBalance", x, y, token)
	return *ret, err
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) constant returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCallerSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgc.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcCaller) MaxNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "maxNumber")
	return *ret0, err
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgc *PgcCallerSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgc *PgcCallerSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgc *PgcCallerSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcCaller) PgcVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "pgcVerifier")
	return *ret0, err
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcSession) PgcVerifier() (common.Address, error) {
	return _Pgc.Contract.PgcVerifier(&_Pgc.CallOpts)
}

// PgcVerifier is a free data retrieval call binding the contract method 0x6ed72bbb.
//
// Solidity: function pgcVerifier() constant returns(address)
func (_Pgc *PgcCallerSession) PgcVerifier() (common.Address, error) {
	return _Pgc.Contract.PgcVerifier(&_Pgc.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcCaller) TokenConverter(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "tokenConverter")
	return *ret0, err
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() constant returns(address)
func (_Pgc *PgcCallerSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0xc1897e74.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCaller) VerifyBurnPartSig(opts *bind.CallOpts, receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "verifyBurnPartSig", receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
	return *ret0, err
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0xc1897e74.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcSession) VerifyBurnPartSig(receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnPartSig(&_Pgc.CallOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// VerifyBurnPartSig is a free data retrieval call binding the contract method 0xc1897e74.
//
// Solidity: function verifyBurnPartSig(uint256 receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCallerSession) VerifyBurnPartSig(receiver *big.Int, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnPartSig(&_Pgc.CallOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// VerifyBurnSig is a free data retrieval call binding the contract method 0x59cfef5c.
//
// Solidity: function verifyBurnSig(uint256 receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCaller) VerifyBurnSig(opts *bind.CallOpts, receiver *big.Int, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pgc.contract.Call(opts, out, "verifyBurnSig", receiver, token, amount, publicKey, proof, z, nonce, sig)
	return *ret0, err
}

// VerifyBurnSig is a free data retrieval call binding the contract method 0x59cfef5c.
//
// Solidity: function verifyBurnSig(uint256 receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcSession) VerifyBurnSig(receiver *big.Int, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnSig(&_Pgc.CallOpts, receiver, token, amount, publicKey, proof, z, nonce, sig)
}

// VerifyBurnSig is a free data retrieval call binding the contract method 0x59cfef5c.
//
// Solidity: function verifyBurnSig(uint256 receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) constant returns(bool)
func (_Pgc *PgcCallerSession) VerifyBurnSig(receiver *big.Int, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (bool, error) {
	return _Pgc.Contract.VerifyBurnSig(&_Pgc.CallOpts, receiver, token, amount, publicKey, proof, z, nonce, sig)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x5f90d6c9.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Pgc *PgcTransactor) AggTransfer(opts *bind.TransactOpts, points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "aggTransfer", points, scalar, l, r)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x5f90d6c9.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Pgc *PgcSession) AggTransfer(points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, l, r)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x5f90d6c9.
//
// Solidity: function aggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r) returns(bool)
func (_Pgc *PgcTransactorSession) AggTransfer(points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, l, r)
}

// Burn is a paid mutator transaction binding the contract method 0x325a2ee7.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactor) Burn(opts *bind.TransactOpts, receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burn", receiver, token, amount, publicKey, proof, z, nonce, sig)
}

// Burn is a paid mutator transaction binding the contract method 0x325a2ee7.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, publicKey, proof, z, nonce, sig)
}

// Burn is a paid mutator transaction binding the contract method 0x325a2ee7.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactorSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, publicKey, proof, z, nonce, sig)
}

// BurnPart is a paid mutator transaction binding the contract method 0x0508fdab.
//
// Solidity: function burnPart(address receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactor) BurnPart(opts *bind.TransactOpts, receiver common.Address, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burnPart", receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// BurnPart is a paid mutator transaction binding the contract method 0x0508fdab.
//
// Solidity: function burnPart(address receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcSession) BurnPart(receiver common.Address, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnPart(&_Pgc.TransactOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// BurnPart is a paid mutator transaction binding the contract method 0x0508fdab.
//
// Solidity: function burnPart(address receiver, uint256 token, uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactorSession) BurnPart(receiver common.Address, token *big.Int, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnPart(&_Pgc.TransactOpts, receiver, token, amount, points, scalar, rpoints, l, r, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) ClosePending(opts *bind.TransactOpts, x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "closePending", x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcTransactor) DepositAccount(opts *bind.TransactOpts, publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "depositAccount", publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x44573fea.
//
// Solidity: function depositAccount(uint256[2] publicKey, address tokenAddr, uint256 tokenAmount) returns(bool)
func (_Pgc *PgcTransactorSession) DepositAccount(publicKey [2]*big.Int, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) OpenPending(opts *bind.TransactOpts, x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "openPending", x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// Transfer is a paid mutator transaction binding the contract method 0xdde0536c.
//
// Solidity: function transfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 token, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactor) Transfer(opts *bind.TransactOpts, points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, token *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "transfer", points, scalar, rpoints, l, r, token, nonce, sig)
}

// Transfer is a paid mutator transaction binding the contract method 0xdde0536c.
//
// Solidity: function transfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 token, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcSession) Transfer(points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, token *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Transfer(&_Pgc.TransactOpts, points, scalar, rpoints, l, r, token, nonce, sig)
}

// Transfer is a paid mutator transaction binding the contract method 0xdde0536c.
//
// Solidity: function transfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256 token, uint256 nonce, uint256[2] sig) returns(bool)
func (_Pgc *PgcTransactorSession) Transfer(points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, token *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Transfer(&_Pgc.TransactOpts, points, scalar, rpoints, l, r, token, nonce, sig)
}

// PgcLogAggTransferIterator is returned from FilterLogAggTransfer and is used to iterate over the raw logs and unpacked data for LogAggTransfer events raised by the Pgc contract.
type PgcLogAggTransferIterator struct {
	Event *PgcLogAggTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogAggTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogAggTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogAggTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogAggTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogAggTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogAggTransfer represents a LogAggTransfer event raised by the Pgc contract.
type PgcLogAggTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct     [6]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogAggTransfer is a free log retrieval operation binding the contract event 0xa61999d16fd311c353dc0c95b37a4d72bfad304f45e4c3cea245741c29265266.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Pgc *PgcFilterer) FilterLogAggTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogAggTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogAggTransferIterator{contract: _Pgc.contract, event: "LogAggTransfer", logs: logs, sub: sub}, nil
}

// WatchLogAggTransfer is a free log subscription operation binding the contract event 0xa61999d16fd311c353dc0c95b37a4d72bfad304f45e4c3cea245741c29265266.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[6] ct, uint256 time)
func (_Pgc *PgcFilterer) WatchLogAggTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogAggTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogAggTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogAggTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the Pgc contract.
type PgcLogBurnIterator struct {
	Event *PgcLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurn represents a LogBurn event raised by the Pgc contract.
type PgcLogBurn struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurn(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnIterator{contract: _Pgc.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *PgcLogBurn, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurn)
				if err := _Pgc.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogBurnPartIterator is returned from FilterLogBurnPart and is used to iterate over the raw logs and unpacked data for LogBurnPart events raised by the Pgc contract.
type PgcLogBurnPartIterator struct {
	Event *PgcLogBurnPart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnPartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurnPart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurnPart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnPartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnPartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurnPart represents a LogBurnPart event raised by the Pgc contract.
type PgcLogBurnPart struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurnPart is a free log retrieval operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurnPart(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnPartIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnPartIterator{contract: _Pgc.contract, event: "LogBurnPart", logs: logs, sub: sub}, nil
}

// WatchLogBurnPart is a free log subscription operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurnPart(opts *bind.WatchOpts, sink chan<- *PgcLogBurnPart, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurnPart)
				if err := _Pgc.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogDepositAccountIterator is returned from FilterLogDepositAccount and is used to iterate over the raw logs and unpacked data for LogDepositAccount events raised by the Pgc contract.
type PgcLogDepositAccountIterator struct {
	Event *PgcLogDepositAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogDepositAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogDepositAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogDepositAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogDepositAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogDepositAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogDepositAccount represents a LogDepositAccount event raised by the Pgc contract.
type PgcLogDepositAccount struct {
	Proxy  common.Address
	Token  common.Address
	Tox    *big.Int
	Toy    *big.Int
	Amount *big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDepositAccount is a free log retrieval operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogDepositAccount(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogDepositAccountIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogDepositAccountIterator{contract: _Pgc.contract, event: "LogDepositAccount", logs: logs, sub: sub}, nil
}

// WatchLogDepositAccount is a free log subscription operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogDepositAccount(opts *bind.WatchOpts, sink chan<- *PgcLogDepositAccount, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogDepositAccount)
				if err := _Pgc.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PgcLogTransferIterator is returned from FilterLogTransfer and is used to iterate over the raw logs and unpacked data for LogTransfer events raised by the Pgc contract.
type PgcLogTransferIterator struct {
	Event *PgcLogTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogTransfer represents a LogTransfer event raised by the Pgc contract.
type PgcLogTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct1    [4]*big.Int
	Ct2    [4]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogTransfer is a free log retrieval operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) FilterLogTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogTransferIterator{contract: _Pgc.contract, event: "LogTransfer", logs: logs, sub: sub}, nil
}

// WatchLogTransfer is a free log subscription operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) WatchLogTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
