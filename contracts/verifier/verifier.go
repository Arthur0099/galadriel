// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BN128G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN128G1Point struct {
	X *big.Int
	Y *big.Int
}

// VerifierAggProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierAggProof struct {
	A   BN128G1Point
	S   BN128G1Point
	T1  BN128G1Point
	T2  BN128G1Point
	T   *big.Int
	Txx *big.Int
	U   *big.Int
	L   []BN128G1Point
	R   []BN128G1Point
	Ap  *big.Int
	Bp  *big.Int
}

// VerifierCT is an auto generated low-level Go binding around an user-defined struct.
type VerifierCT struct {
	X BN128G1Point
	Y BN128G1Point
}

// VerifierCTVProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierCTVProof struct {
	A  BN128G1Point
	B  BN128G1Point
	Z1 *big.Int
	Z2 *big.Int
}

// VerifierDLEProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierDLEProof struct {
	A1 BN128G1Point
	A2 BN128G1Point
	Z  *big.Int
}

// VerifierMRCT is an auto generated low-level Go binding around an user-defined struct.
type VerifierMRCT struct {
	X1 BN128G1Point
	X2 BN128G1Point
	X3 BN128G1Point
	Y  BN128G1Point
}

// VerifierPTEProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierPTEProof struct {
	A1 BN128G1Point
	A2 BN128G1Point
	A3 BN128G1Point
	B  BN128G1Point
	Z1 *big.Int
	Z2 *big.Int
}

// VerifierTransferProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierTransferProof struct {
	PteProof VerifierPTEProof
	DleProof VerifierDLEProof
	CtvProof VerifierCTVProof
	AggProof VerifierAggProof
}

// VerifierTransferStatement is an auto generated low-level Go binding around an user-defined struct.
type VerifierTransferStatement struct {
	Pk1     BN128G1Point
	Pk2     BN128G1Point
	Mrct    VerifierMRCT
	Updated VerifierCT
	Refresh VerifierCT
	Custom  []*big.Int
}

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"params_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contractPublicParams\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pkauth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_step\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes\",\"name\":\"lr\",\"type\":\"bytes\"},{\"internalType\":\"uint256[4]\",\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"B\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z2\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.PTEProof\",\"name\":\"pteProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.DLEProof\",\"name\":\"dleProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"B\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z2\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.CTVProof\",\"name\":\"ctvProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"S\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"T1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"T2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point[]\",\"name\":\"l\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point[]\",\"name\":\"r\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"ap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.AggProof\",\"name\":\"aggProof\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.TransferProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"pk1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"pk2\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.MRCT\",\"name\":\"mrct\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.CT\",\"name\":\"updated\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.CT\",\"name\":\"refresh\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"custom\",\"type\":\"uint256[]\"}],\"internalType\":\"structVerifier.TransferStatement\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"verifyAggTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"ub\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"verifyBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200512538038062005125833981810160405281019062000037919062000a30565b8061010860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff1660e01b8152600401604080518083038186803b158015620000e457600080fd5b505afa158015620000f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011f919062000a5c565b9050600061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff1660e01b8152600401604080518083038186803b1580156200018c57600080fd5b505afa158015620001a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c7919062000a5c565b9050600061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff1660e01b8152600401604080518083038186803b1580156200023457600080fd5b505afa15801562000249573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200026f919062000a5c565b9050600061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac9e14f56040518163ffffffff1660e01b8152600401604080518083038186803b158015620002dc57600080fd5b505afa158015620002f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000317919062000a5c565b9050836000600281106200032757fe5b60200201516000800181905550836001600281106200034257fe5b6020020151600060010181905550826000600281106200035e57fe5b6020020151600260000181905550826001600281106200037a57fe5b6020020151600260010181905550816000600281106200039657fe5b602002015160046000018190555081600160028110620003b257fe5b602002015160046001018190555080600060028110620003ce57fe5b602002015160066000018190555080600160028110620003ea57fe5b602002015160066001018190555061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff1660e01b815260040160206040518083038186803b1580156200046257600080fd5b505afa15801562000477573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049d919062000a88565b602014620004e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004d99062000be0565b60405180910390fd5b620004f46020620004ff60201b60201c565b505050505062000cf9565b60005b600260200281101562000542576000600882604081106200051f57fe5b60020201600001541415620005345762000542565b808060010191505062000502565b6040811015620005615762000560818383016200056560201b60201c565b5b5050565b600080604051806040016040528060018152602001600281525090506000620005c2604051602001620005989062000bac565b6040516020818303038152906040528051906020012060001c6200077b60201b62000dd71760201c565b905060008590505b8481108015620005dd5750600260200281105b15620006795762000626818301604051602001620005fc919062000bc3565b6040516020818303038152906040528051906020012060001c6200077b60201b62000dd71760201c565b9350620006428484620007b460201b62000e0f1790919060201c565b600882604081106200065057fe5b6002020160008201518160000155602082015181600101559050508080600101915050620005ca565b506000620006bb604051602001620006919062000b95565b6040516020818303038152906040528051906020012060001c6200077b60201b62000dd71760201c565b905060008690505b8581108015620006d65750600260200281105b1562000772576200071f828201604051602001620006f5919062000bc3565b6040516020818303038152906040528051906020012060001c6200077b60201b62000dd71760201c565b94506200073b8585620007b460201b62000e0f1790919060201c565b608882604081106200074957fe5b6002020160008201518160000155602082015181600101559050508080600101915050620006c3565b50505050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381620007ab57fe5b06915050919050565b620007be6200090e565b6001821415620007d15782905062000867565b6002821415620007f557620007ed83846200086d60201b60201c565b905062000867565b620007ff62000928565b8360000151816000600381106200081257fe5b6020020181815250508360200151816001600381106200082e57fe5b60200201818152505082816002600381106200084657fe5b6020020181815250506040826060836007600019fa6200086557600080fd5b505b92915050565b620008776200090e565b620008816200094a565b8360000151816000600481106200089457fe5b602002018181525050836020015181600160048110620008b057fe5b602002018181525050826000015181600260048110620008cc57fe5b602002018181525050826020015181600360048110620008e857fe5b6020020181815250506040826080836006600019fa6200090757600080fd5b5092915050565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6000620009836200097d8462000c36565b62000c02565b905080828560208602820111156200099a57600080fd5b60005b85811015620009ce5781620009b3888262000a19565b8452602084019350602083019250506001810190506200099d565b5050509392505050565b600081519050620009e98162000cc5565b92915050565b600082601f83011262000a0157600080fd5b600262000a108482856200096c565b91505092915050565b60008151905062000a2a8162000cdf565b92915050565b60006020828403121562000a4357600080fd5b600062000a5384828501620009d8565b91505092915050565b60006040828403121562000a6f57600080fd5b600062000a7f84828501620009ef565b91505092915050565b60006020828403121562000a9b57600080fd5b600062000aab8482850162000a19565b91505092915050565b600062000ac360038362000c70565b91507f68767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b600062000b0560118362000c5f565b91507f62697473697a65206e6f7420657175616c0000000000000000000000000000006000830152602082019050919050565b600062000b4760038362000c70565b91507f67767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b62000b8f62000b898262000caf565b62000cb9565b82525050565b600062000ba28262000ab4565b9150819050919050565b600062000bb98262000b38565b9150819050919050565b600062000bd1828462000b7a565b60208201915081905092915050565b6000602082019050818103600083015262000bfb8162000af6565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000c2c5762000c2b62000cc3565b5b8060405250919050565b600067ffffffffffffffff82111562000c545762000c5362000cc3565b5b602082029050919050565b600082825260208201905092915050565b600081905092915050565b600062000c888262000c8f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565bfe5b62000cd08162000c7b565b811462000cdc57600080fd5b50565b62000cea8162000caf565b811462000cf657600080fd5b50565b61441c8062000d096000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806356e2736c1161008c578063b7b0422d11610066578063b7b0422d14610240578063b8c9d3651461025c578063cff0ab961461027b578063e2179b8e14610299576100cf565b806356e2736c146101af578063637fe7ed146101e0578063b1a7a0b814610210576100cf565b80630214120b146100d45780630c00f8a0146100f35780631213e201146101245780632e52d606146101435780633c5c1736146101615780633e8d376414610191575b600080fd5b6100dc6102b8565b6040516100ea9291906141b8565b60405180910390f35b61010d60048036038101906101089190613c05565b6102ca565b60405161011b9291906141b8565b60405180910390f35b61012c6102f4565b60405161013a9291906141b8565b60405180910390f35b61014b610306565b604051610158919061419d565b60405180910390f35b61017b60048036038101906101769190613c2e565b61030b565b60405161018891906140c7565b60405180910390f35b61019961045a565b6040516101a6919061419d565b60405180910390f35b6101c960048036038101906101c49190613c05565b61045f565b6040516101d79291906141b8565b60405180910390f35b6101fa60048036038101906101f59190613b99565b610489565b60405161020791906140c7565b60405180910390f35b61022a60048036038101906102259190613adb565b610638565b60405161023791906140c7565b60405180910390f35b61025a60048036038101906102559190613c05565b610d34565b005b610264610d8c565b6040516102729291906141b8565b60405180910390f35b610283610d9e565b60405161029091906140e2565b60405180910390f35b6102a1610dc5565b6040516102af9291906141b8565b60405180910390f35b60068060000154908060010154905082565b600881604081106102da57600080fd5b600202016000915090508060000154908060010154905082565b60048060000154908060010154905082565b600581565b6000610315612eef565b8360006004811061032257fe5b6020020151816000015160000181815250508360016004811061034157fe5b6020020151816000015160200181815250508360026004811061036057fe5b6020020151816020015160000181815250508360036004811061037f57fe5b602002015181602001516020018181525050600061039c87610eb4565b90506103a6612f15565b816001815181106103b357fe5b60200260200101518160000181905250816002815181106103d057fe5b602002602001015181602001819052508681604001818152505061040b8984846000815181106103fc57fe5b60200260200101518489610fd1565b61044a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104419061413d565b60405180910390fd5b6001935050505095945050505050565b602081565b6088816040811061046f57600080fd5b600202016000915090508060000154908060010154905082565b60006104a78260000151836020015184604001518660000151611076565b6104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd9061415d565b60405180910390fd5b61050782606001518360800151846000015186602001518660a00151611331565b610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d9061417d565b60405180910390fd5b61055d8260000151836080015185604001516113bb565b61059c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610593906140fd565b60405180910390fd5b6105a4612f42565b826040015160600151816000600281106105ba57fe5b6020020181905250826080015160200151816001600281106105d857fe5b60200201819052506105ee818560600151611557565b61062d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106249061411d565b60405180910390fd5b600191505092915050565b6000610642612f6f565b61064a612faf565b60006106558a610eb4565b90508060008151811061066457fe5b602002602001015182600001819052508060018151811061068157fe5b602002602001015182602001819052506040518060400160405280886000600481106106a957fe5b60200201518152602001886001600481106106c057fe5b60200201518152508260600151600001819052506040518060400160405280886002600481106106ec57fe5b602002015181526020018860036004811061070357fe5b602002015181525082606001516020018190525080600a8151811061072457fe5b602002602001015182608001516000018190525080600b8151811061074557fe5b60200260200101518260800151602001819052508060028151811061076657fe5b60200260200101518260400151600001819052508060038151811061078757fe5b6020026020010151826040015160200181905250806004815181106107a857fe5b6020026020010151826040015160400181905250806005815181106107c957fe5b6020026020010151826040015160600181905250600e67ffffffffffffffff811180156107f557600080fd5b506040519080825280602002602001820160405280156108245781602001602082028036833780820191505090505b508260a00181905250858260a0015160008151811061083f57fe5b602002602001018181525050848260a0015160018151811061085d57fe5b60200260200101818152505060005b60068110156108f95781818151811061088157fe5b6020026020010151600001518360a0015160028302600201815181106108a357fe5b6020026020010181815250508181815181106108bb57fe5b6020026020010151602001518360a0015160016002840260020101815181106108e057fe5b602002602001018181525050808060010191505061086c565b508060068151811061090757fe5b60200260200101518360000151600001819052508060078151811061092857fe5b60200260200101518360000151602001819052508060088151811061094957fe5b60200260200101518360000151604001819052508060098151811061096a57fe5b6020026020010151836000015160600181905250886000600a811061098b57fe5b602002015183600001516080018181525050886001600a81106109aa57fe5b6020020151836000015160a001818152505080600e815181106109c957fe5b602002602001015183602001516000018190525080600f815181106109ea57fe5b6020026020010151836020015160200181905250886004600a8110610a0b57fe5b60200201518360200151604001818152505080600c81518110610a2a57fe5b602002602001015183604001516000018190525080600d81518110610a4b57fe5b6020026020010151836040015160200181905250886002600a8110610a6c57fe5b602002015183604001516040018181525050886003600a8110610a8b57fe5b60200201518360400151606001818152505080601081518110610aaa57fe5b602002602001015183606001516000018190525080601181518110610acb57fe5b602002602001015183606001516020018190525080601281518110610aec57fe5b602002602001015183606001516040018190525080601381518110610b0d57fe5b6020026020010151836060015160600181905250886005600a8110610b2e57fe5b602002015183606001516080018181525050886006600a8110610b4d57fe5b6020020151836060015160a0018181525050886007600a8110610b6c57fe5b6020020151836060015160c0018181525050886008600a8110610b8b57fe5b60200201518360600151610120018181525050886009600a8110610bab57fe5b60200201518360600151610140018181525050600160050167ffffffffffffffff81118015610bd957600080fd5b50604051908082528060200260200182016040528015610c1357816020015b610c00613003565b815260200190600190039081610bf85790505b50836060015160e00181905250600160050167ffffffffffffffff81118015610c3b57600080fd5b50604051908082528060200260200182016040528015610c7557816020015b610c62613003565b815260200190600190039081610c5a5790505b50836060015161010001819052506000610c8e89610eb4565b905060005b6001600501811015610d1957818181518110610cab57fe5b6020026020010151856060015160e001518281518110610cc757fe5b6020026020010181905250816001600501820181518110610ce457fe5b6020026020010151856060015161010001518281518110610d0157fe5b60200260200101819052508080600101915050610c93565b50610d248484610489565b9450505050509695505050505050565b60005b6002602002811015610d7257600060088260408110610d5257fe5b60020201600001541415610d6557610d72565b8080600101915050610d37565b6040811015610d8857610d87818383016122d9565b5b5050565b60008060000154908060010154905082565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028060000154908060010154905082565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381610e0657fe5b06915050919050565b610e17613003565b6001821415610e2857829050610eae565b6002821415610e4257610e3b838461249d565b9050610eae565b610e4a61301d565b836000015181600060038110610e5c57fe5b602002018181525050836020015181600160038110610e7757fe5b6020020181815250508281600260038110610e8e57fe5b6020020181815250506040826060836007600019fa610eac57600080fd5b505b92915050565b606060006021835181610ec357fe5b0614610f1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806143c26025913960400191505060405180910390fd5b60006021835181610f2757fe5b0490508067ffffffffffffffff81118015610f4157600080fd5b50604051908082528060200260200182016040528015610f7b57816020015b610f68613003565b815260200190600190039081610f605790505b50915060005b81811015610fca57600080610f968684612535565b91509150610fa48183612588565b858481518110610fb057fe5b602002602001018190525050508080600101915050610f81565b5050919050565b60008061102561101261100d89600260405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b6126ed565b876020015161249d90919063ffffffff16565b90506000866000015190506000806040518060400160405290816000820154815260200160018201548152505090506000879050611067848484848b8b61277d565b94505050505095945050505050565b6000806110f98360000151600001518460000151602001518560200151600001518660200151602001518760400151600001518860400151602001518960600151600001518a60600151602001516040516020016110db989796959493929190614035565b6040516020818303038152906040528051906020012060001c610dd7565b90506000611114846080015188610e0f90919063ffffffff16565b905060006111458560000151611137858960000151610e0f90919063ffffffff16565b61249d90919063ffffffff16565b905061115a818361289290919063ffffffff16565b61116a5760009350505050611329565b611181856080015188610e0f90919063ffffffff16565b91506111b085602001516111a2858960200151610e0f90919063ffffffff16565b61249d90919063ffffffff16565b90506111c5818361289290919063ffffffff16565b6111d55760009350505050611329565b61120c8560800151600660405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b915061123b856040015161122d858960400151610e0f90919063ffffffff16565b61249d90919063ffffffff16565b9050611250818361289290919063ffffffff16565b6112605760009350505050611329565b6112df61129a8660a00151600260405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b6112d18760800151600060405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b61249d90919063ffffffff16565b915061130e6112fb848860600151610e0f90919063ffffffff16565b866060015161249d90919063ffffffff16565b9050611323818361289290919063ffffffff16565b93505050505b949350505050565b60008061135761134488602001516126ed565b876020015161249d90919063ffffffff16565b9050600061137e61136b89600001516126ed565b886000015161249d90919063ffffffff16565b90506113ae828260006040518060400160405290816000820154815260200160018201548152505089898961277d565b9250505095945050505050565b6000806114168360000151600001518460000151602001518560200151600001518660200151602001516040516020016113f89493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b90506000611431846040015187610e0f90919063ffffffff16565b9050600061146261144f848860000151610e0f90919063ffffffff16565b866000015161249d90919063ffffffff16565b9050611477818361289290919063ffffffff16565b6114875760009350505050611550565b6115066114c18660400151600060405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b6114f88760600151600260405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b61249d90919063ffffffff16565b9150611535611522848860200151610e0f90919063ffffffff16565b866020015161249d90919063ffffffff16565b905061154a818361289290919063ffffffff16565b93505050505b9392505050565b6000806008604080602002604051908101604052809291906000905b828210156115af578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611573565b50505050905060006088604080602002604051908101604052809291906000905b8282101561160c5783826002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906115d0565b50505050905061161a61303f565b6116728560000151600001518660000151602001518760200151600001518860200151602001516040516020016116549493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b8160000181815250506116d38560200151600001518660200151602001518760000151600001518860000151602001516040516020016116b59493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b8160200181815250506116e981600001516128ba565b816101000181905250611707611702826000015161295a565b6128ba565b81610120018190525061171d8160200151612a24565b81604001818152505061174961174482602001518360200151612a5090919063ffffffff16565b610dd7565b81606001818152505061177561177082602001518360600151612a5090919063ffffffff16565b610dd7565b8160800181815250506117886002612a8a565b8161014001819052506117e98560400151600001518660400151602001518760600151600001518860600151602001516040516020016117cb9493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b8160a001818152505061180d8160a001518260a00151612a5090919063ffffffff16565b8160c00181815250506118cf6118348260c001518760600151610e0f90919063ffffffff16565b6118c16118528460a001518960400151610e0f90919063ffffffff16565b6118b361187d86608001518c60016002811061186a57fe5b6020020151610e0f90919063ffffffff16565b6118a587606001518d60006002811061189257fe5b6020020151610e0f90919063ffffffff16565b61249d90919063ffffffff16565b61249d90919063ffffffff16565b61249d90919063ffffffff16565b8161026001819052506119476118ff6118ec836101400151612b27565b8360800151612a5090919063ffffffff16565b611939611910846101000151612b8a565b61192b85606001518660200151612bf090919063ffffffff16565b612a5090919063ffffffff16565b612bf090919063ffffffff16565b8160e00181815250506119a061198d611964836101400151612b27565b61197f84602001518560800151612a5090919063ffffffff16565b612a5090919063ffffffff16565b8260e00151612bf090919063ffffffff16565b8160e0018181525050611a3e6119e38660a00151600060405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b611a30611a018460e001518960800151612bf090919063ffffffff16565b600260405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b61249d90919063ffffffff16565b816102800181905250611a6481610280015182610260015161289290919063ffffffff16565b611a7457600093505050506122d3565b611a7c613003565b611aad611a9a8360a001518860200151610e0f90919063ffffffff16565b876000015161249d90919063ffffffff16565b905060005b8660e0015151811015611cc4576000611b678860e001518381518110611ad457fe5b6020026020010151600001518960e001518481518110611af057fe5b6020026020010151602001518a61010001518581518110611b0d57fe5b6020026020010151600001518b61010001518681518110611b2a57fe5b602002602001015160200151604051602001611b499493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b9050808461016001518360068110611b7b57fe5b602002018181525050611b9f611b9a8283612a5090919063ffffffff16565b610dd7565b846101a001518360068110611bb057fe5b602002018181525050611bd7846101a001518360068110611bcd57fe5b602002015161295a565b846101c001518360068110611be857fe5b6020020181815250508760e001518281518110611c0157fe5b6020026020010151846102a00181905250611c51611c42856101a001518460068110611c2957fe5b6020020151866102a00151610e0f90919063ffffffff16565b8461249d90919063ffffffff16565b92508761010001518281518110611c6457fe5b6020026020010151846102a00181905250611cb4611ca5856101c001518460068110611c8c57fe5b6020020151866102a00151610e0f90919063ffffffff16565b8461249d90919063ffffffff16565b9250508080600101915050611ab2565b5060005b6040811015612160576000811415611df45760005b8760e0015151811015611d865760008461016001518260068110611cfd57fe5b602002015190506000821415611d2d57808561020001518460408110611d1f57fe5b602002018181525050611d78565b611d5d611d58828761020001518660408110611d4557fe5b6020020151612a5090919063ffffffff16565b610dd7565b8561020001518460408110611d6e57fe5b6020020181815250505b508080600101915050611cdd565b508261020001518160408110611d9857fe5b60200201518361024001518260408110611dae57fe5b602002018181525050611dd58361020001518260408110611dcb57fe5b602002015161295a565b8361020001518260408110611de657fe5b602002018181525050611eef565b6000611e05828960e0015151612c35565b9050611e60611e5b856101a00151838b60e00151510360068110611e2557fe5b6020020151866102000151611e3c60018603612c7a565b860360408110611e4857fe5b6020020151612a5090919063ffffffff16565b610dd7565b8461020001518360408110611e7157fe5b602002018181525050611ed3611ece856101c00151838b60e00151510360068110611e9857fe5b6020020151866102400151611eaf60018603612c7a565b860360408110611ebb57fe5b6020020151612a5090919063ffffffff16565b610dd7565b8461024001518360408110611ee457fe5b602002018181525050505b8261020001518160408110611f0057fe5b6020020151836101e001518260408110611f1657fe5b6020020181815250508261024001518160408110611f3057fe5b60200201518361022001518260408110611f4657fe5b602002018181525050611f928360200151611f84896101200151866101e001518560408110611f7157fe5b6020020151612a5090919063ffffffff16565b612cc290919063ffffffff16565b836101e001518260408110611fa357fe5b602002018181525050611fd98761014001518461022001518360408110611fc657fe5b6020020151612a5090919063ffffffff16565b8361022001518260408110611fea57fe5b602002018181525050602081101561206e5761204f61202b846101400151836020811061201357fe5b60200201518560600151612a5090919063ffffffff16565b846102200151836040811061203c57fe5b6020020151612bf090919063ffffffff16565b836102200151826040811061206057fe5b6020020181815250506120e6565b6120cb6120a78461014001516020848161208457fe5b066020811061208f57fe5b60200201518560800151612a5090919063ffffffff16565b84610220015183604081106120b857fe5b6020020151612bf090919063ffffffff16565b83610220015182604081106120dc57fe5b6020020181815250505b612139836020015161212b856101200151846040811061210257fe5b6020020151866102200151856040811061211857fe5b6020020151612a5090919063ffffffff16565b612bf090919063ffffffff16565b836102200151826040811061214a57fe5b6020020181815250508080600101915050611cc8565b506000612199876080015160405160200161217b9190613fa0565b6040516020818303038152906040528051906020012060001c610dd7565b905061229a6121d58860c00151600060405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b61228c61224f6122206122118c608001516122038e61014001518f6101200151612a5090919063ffffffff16565b612bf090919063ffffffff16565b86612a5090919063ffffffff16565b600460405180604001604052908160008201548152602001600182015481525050610e0f90919063ffffffff16565b61227e61226189896102200151612cfc565b6122708b8a6101e00151612cfc565b61249d90919063ffffffff16565b61249d90919063ffffffff16565b61249d90919063ffffffff16565b8361028001819052508160000151836102800151600001511480156122cb5750816020015183610280015160200151145b955050505050505b92915050565b60008060405180604001604052806001815260200160028152509050600061232760405160200161230990613f8b565b6040516020818303038152906040528051906020012060001c610dd7565b905060008590505b84811080156123415750600260200281105b156123c45761237a81830160405160200161235c9190613fa0565b6040516020818303038152906040528051906020012060001c610dd7565b935061238f8484610e0f90919063ffffffff16565b6008826040811061239c57fe5b600202016000820151816000015560208201518160010155905050808060010191505061232f565b5060006123f76040516020016123d990613f76565b6040516020818303038152906040528051906020012060001c610dd7565b905060008690505b85811080156124115750600260200281105b156124945761244a82820160405160200161242c9190613fa0565b6040516020818303038152906040528051906020012060001c610dd7565b945061245f8585610e0f90919063ffffffff16565b6088826040811061246c57fe5b60020201600082015181600001556020820151816001015590505080806001019150506123ff565b50505050505050565b6124a5613003565b6124ad61313a565b8360000151816000600481106124bf57fe5b6020020181815250508360200151816001600481106124da57fe5b6020020181815250508260000151816002600481106124f557fe5b60200201818152505082602001518160036004811061251057fe5b6020020181815250506040826080836006600019fa61252e57600080fd5b5092915050565b6000806000600160ff16600186602187028151811061255057fe5b602001015160f81c60f81b60f81c1660ff1614905060006125778660016021880201612dac565b905081819350935050509250929050565b612590613003565b60008314156125b757604051806040016040528060008152602001600081525090506126e7565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050600081806125e657fe5b858609905081806125f357fe5b85820990506000600390506000838061260857fe5b82840890506000612627826004600188018161262057fe5b0487612dc2565b905081858061263257fe5b828309146126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e76616c696420706f696e743a206e6f74206f6e206375727665000000000081525060200191505060405180910390fd5b604051806040016040528089815260200182815250955060006001808316149050801515881515146126e0576126dd876126ed565b96505b5050505050505b92915050565b6126f5613003565b6000826000015114801561270d575060008260200151145b156127305760405180604001604052806000815260200160008152509050612778565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604051806040016040528084600001518152602001846020015183038152509150505b919050565b6000806127d88460000151600001518560000151602001518660200151600001518760200151602001516040516020016127ba9493929190613fe7565b6040516020818303038152906040528051906020012060001c610dd7565b9050600061280e846040516020016127f09190613f5f565b6040516020818303038152906040528051906020012060001c610dd7565b905060006128468383604051602001612828929190613fbb565b6040516020818303038152906040528051906020012060001c610dd7565b905061285d8a8a8860000151896040015185612e93565b61286d5760009350505050612888565b61288288888860200151896040015185612e93565b93505050505b9695505050505050565b6000816000015183600001511480156128b2575081602001518360200151145b905092915050565b6128c261315c565b6001816000604081106128d157fe5b60200201818152505081816001604081106128e857fe5b6020020181815250506000600290505b60026020028110156129545761293261292d8484600185036040811061291a57fe5b6020020151612a5090919063ffffffff16565b610dd7565b82826040811061293e57fe5b60200201818152505080806001019150506128f8565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506000839050600081141561299957600092505050612a1f565b818111156129ae578181816129aa57fe5b0690505b600080600190506000849050600084905060005b600082146129f7578183816129d357fe5b049050838482028603838484028603809550819650829750839850505050506129c2565b6000851215612a1457846000038703975050505050505050612a1f565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080612a7e57fe5b83850991505092915050565b612a9261317f565b600181600060208110612aa157fe5b6020020181815250508181600160208110612ab857fe5b6020020181815250506000600290505b6020811015612b2157612aff612afa84846001850360208110612ae757fe5b6020020151612a5090919063ffffffff16565b610dd7565b828260208110612b0b57fe5b6020020181815250508080600101915050612ac8565b50919050565b60008082600060208110612b3757fe5b602002015190506000600190505b6020811015612b8057612b71848260208110612b5d57fe5b602002015183612cc290919063ffffffff16565b91508080600101915050612b45565b5080915050919050565b60008082600060408110612b9a57fe5b602002015190506000600190505b6002602002811015612be657612bd7848260408110612bc357fe5b602002015183612cc290919063ffffffff16565b91508080600101915050612ba8565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905082841015612c28578383820301612c2c565b8284035b91505092915050565b600080826001901b905060005b8185108015612c515750600082115b15612c6a57600182901c91508080600101915050612c42565b8084600101039250505092915050565b6000808290506000811415612c93576001915050612cbd565b6000600190505b6000821115612cb757600281029050818060019003925050612c9a565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080612cf057fe5b83850891505092915050565b612d04613003565b6000612d3b83600060408110612d1657fe5b602002015185600060408110612d2857fe5b6020020151610e0f90919063ffffffff16565b90506000600190505b6040811015612da157612d92612d83858360408110612d5f57fe5b6020020151878460408110612d7057fe5b6020020151610e0f90919063ffffffff16565b8361249d90919063ffffffff16565b91508080600101915050612d44565b508091505092915050565b6000808260200184015190508091505092915050565b6000612dcc6131a2565b612dd46131c4565b602082600060068110612de357fe5b602002018181525050602082600160068110612dfb57fe5b602002018181525050602082600260068110612e1357fe5b6020020181815250508582600360068110612e2a57fe5b6020020181815250508482600460068110612e4157fe5b6020020181815250508382600560068110612e5857fe5b60200201818152505060208160c0846005600019fa612e7657600080fd5b80600060018110612e8357fe5b6020020151925050509392505050565b6000612ea88387610e0f90919063ffffffff16565b9550612ecf84612ec18488610e0f90919063ffffffff16565b61249d90919063ffffffff16565b9450612ee4858761289290919063ffffffff16565b905095945050505050565b6040518060400160405280612f02613003565b8152602001612f0f613003565b81525090565b6040518060600160405280612f28613003565b8152602001612f35613003565b8152602001600081525090565b60405180604001604052806002905b612f59613003565b815260200190600190039081612f515790505090565b6040518060800160405280612f826131e6565b8152602001612f8f612f15565b8152602001612f9c613234565b8152602001612fa9613268565b81525090565b6040518060c00160405280612fc2613003565b8152602001612fcf613003565b8152602001612fdc6132da565b8152602001612fe9612eef565b8152602001612ff6612eef565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b604051806102c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161308b61315c565b815260200161309861315c565b81526020016130a561317f565b81526020016130b26131a2565b81526020016130bf6131a2565b81526020016130cc6131a2565b81526020016130d96131a2565b81526020016130e661315c565b81526020016130f361315c565b815260200161310061315c565b815260200161310d61315c565b815260200161311a613003565b8152602001613127613003565b8152602001613134613003565b81525090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806108000160405280604090602082028036833780820191505090505090565b604051806104000160405280602090602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060c001604052806131f9613003565b8152602001613206613003565b8152602001613213613003565b8152602001613220613003565b815260200160008152602001600081525090565b6040518060800160405280613247613003565b8152602001613254613003565b815260200160008152602001600081525090565b60405180610160016040528061327c613003565b8152602001613289613003565b8152602001613296613003565b81526020016132a3613003565b8152602001600081526020016000815260200160008152602001606081526020016060815260200160008152602001600081525090565b60405180608001604052806132ed613003565b81526020016132fa613003565b8152602001613307613003565b8152602001613314613003565b81525090565b600061332d61332884614212565b6141e1565b9050808382526020820190508285604086028201111561334c57600080fd5b60005b8581101561337c5781613362888261381e565b84526020840193506040830192505060018101905061334f565b5050509392505050565b60006133996133948461423e565b6141e1565b905080828560208602820111156133af57600080fd5b60005b858110156133df57816133c58882613ac6565b8452602084019350602083019250506001810190506133b2565b5050509392505050565b60006133fc6133f784614264565b6141e1565b9050808285602086028201111561341257600080fd5b60005b8581101561344257816134288882613ac6565b845260208401935060208301925050600181019050613415565b5050509392505050565b600061345f61345a8461428a565b6141e1565b9050808382526020820190508285602086028201111561347e57600080fd5b60005b858110156134ae57816134948882613ac6565b845260208401935060208301925050600181019050613481565b5050509392505050565b60006134cb6134c6846142b6565b6141e1565b9050828152602081018484840111156134e357600080fd5b6134ee84828561438f565b509392505050565b600082601f83011261350757600080fd5b813561351784826020860161331a565b91505092915050565b600082601f83011261353157600080fd5b600a61353e848285613386565b91505092915050565b600082601f83011261355857600080fd5b60046135658482856133e9565b91505092915050565b600082601f83011261357f57600080fd5b813561358f84826020860161344c565b91505092915050565b600082601f8301126135a957600080fd5b81356135b98482602086016134b8565b91505092915050565b60006101e082840312156135d557600080fd5b6135e06101606141e1565b905060006135f08482850161381e565b60008301525060406136048482850161381e565b60208301525060806136188482850161381e565b60408301525060c061362c8482850161381e565b60608301525061010061364184828501613ac6565b60808301525061012061365684828501613ac6565b60a08301525061014061366b84828501613ac6565b60c08301525061016082013567ffffffffffffffff81111561368c57600080fd5b613698848285016134f6565b60e08301525061018082013567ffffffffffffffff8111156136b957600080fd5b6136c5848285016134f6565b610100830152506101a06136db84828501613ac6565b610120830152506101c06136f184828501613ac6565b6101408301525092915050565b600060c0828403121561371057600080fd5b61371a60806141e1565b9050600061372a8482850161381e565b600083015250604061373e8482850161381e565b602083015250608061375284828501613ac6565b60408301525060a061376684828501613ac6565b60608301525092915050565b60006080828403121561378457600080fd5b61378e60406141e1565b9050600061379e8482850161381e565b60008301525060406137b28482850161381e565b60208301525092915050565b600060a082840312156137d057600080fd5b6137da60606141e1565b905060006137ea8482850161381e565b60008301525060406137fe8482850161381e565b602083015250608061381284828501613ac6565b60408301525092915050565b60006040828403121561383057600080fd5b61383a60406141e1565b9050600061384a84828501613ac6565b600083015250602061385e84828501613ac6565b60208301525092915050565b6000610100828403121561387d57600080fd5b61388760806141e1565b905060006138978482850161381e565b60008301525060406138ab8482850161381e565b60208301525060806138bf8482850161381e565b60408301525060c06138d38482850161381e565b60608301525092915050565b600061014082840312156138f257600080fd5b6138fc60c06141e1565b9050600061390c8482850161381e565b60008301525060406139208482850161381e565b60208301525060806139348482850161381e565b60408301525060c06139488482850161381e565b60608301525061010061395d84828501613ac6565b60808301525061012061397284828501613ac6565b60a08301525092915050565b60006102c0828403121561399157600080fd5b61399b60806141e1565b905060006139ab848285016138df565b6000830152506101406139c0848285016137be565b6020830152506101e06139d5848285016136fe565b6040830152506102a082013567ffffffffffffffff8111156139f657600080fd5b613a02848285016135c2565b60608301525092915050565b60006102a08284031215613a2157600080fd5b613a2b60c06141e1565b90506000613a3b8482850161381e565b6000830152506040613a4f8482850161381e565b6020830152506080613a638482850161386a565b604083015250610180613a7884828501613772565b606083015250610200613a8d84828501613772565b60808301525061028082013567ffffffffffffffff811115613aae57600080fd5b613aba8482850161356e565b60a08301525092915050565b600081359050613ad5816143aa565b92915050565b6000806000806000806102408789031215613af557600080fd5b600087013567ffffffffffffffff811115613b0f57600080fd5b613b1b89828a01613598565b9650506020613b2c89828a01613520565b95505061016087013567ffffffffffffffff811115613b4a57600080fd5b613b5689828a01613598565b945050610180613b6889828a01613547565b935050610200613b7a89828a01613ac6565b925050610220613b8c89828a01613ac6565b9150509295509295509295565b60008060408385031215613bac57600080fd5b600083013567ffffffffffffffff811115613bc657600080fd5b613bd28582860161397e565b925050602083013567ffffffffffffffff811115613bef57600080fd5b613bfb85828601613a0e565b9150509250929050565b600060208284031215613c1757600080fd5b6000613c2584828501613ac6565b91505092915050565b60008060008060006101008688031215613c4757600080fd5b6000613c5588828901613ac6565b955050602086013567ffffffffffffffff811115613c7257600080fd5b613c7e88828901613598565b9450506040613c8f88828901613ac6565b9350506060613ca088828901613547565b92505060e086013567ffffffffffffffff811115613cbd57600080fd5b613cc98882890161356e565b9150509295509295909350565b6000613ce28383613f39565b60208301905092915050565b6000613cf9826142f6565b613d03818561430e565b9350613d0e836142e6565b8060005b83811015613d3f578151613d268882613cd6565b9750613d3183614301565b925050600181019050613d12565b5085935050505092915050565b613d5581614335565b82525050565b613d648161436b565b82525050565b6000613d77601683614319565b91507f63742076616c69642070726f6f6620696e76616c6964000000000000000000006000830152602082019050919050565b6000613db760038361432a565b91507f68767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b6000613df7601b83614319565b91507f616767726174652072616e67652070726f6f6620696e76616c696400000000006000830152602082019050919050565b6000613e37601983614319565b91507f657175616c2070726f6f6620766572696679206661696c6564000000000000006000830152602082019050919050565b6000613e77601783614319565b91507f70746520657175616c2070726f6f6620696e76616c69640000000000000000006000830152602082019050919050565b6000613eb7601683614319565b91507f646c65207369676d612070726f6f66206661696c6564000000000000000000006000830152602082019050919050565b6000613ef760038361432a565b91507f67767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b613f3381614361565b82525050565b613f4281614361565b82525050565b613f59613f5482614361565b61439e565b82525050565b6000613f6b8284613cee565b915081905092915050565b6000613f8182613daa565b9150819050919050565b6000613f9682613eea565b9150819050919050565b6000613fac8284613f48565b60208201915081905092915050565b6000613fc78285613f48565b602082019150613fd78284613f48565b6020820191508190509392505050565b6000613ff38287613f48565b6020820191506140038286613f48565b6020820191506140138285613f48565b6020820191506140238284613f48565b60208201915081905095945050505050565b6000614041828b613f48565b602082019150614051828a613f48565b6020820191506140618289613f48565b6020820191506140718288613f48565b6020820191506140818287613f48565b6020820191506140918286613f48565b6020820191506140a18285613f48565b6020820191506140b18284613f48565b6020820191508190509998505050505050505050565b60006020820190506140dc6000830184613d4c565b92915050565b60006020820190506140f76000830184613d5b565b92915050565b6000602082019050818103600083015261411681613d6a565b9050919050565b6000602082019050818103600083015261413681613dea565b9050919050565b6000602082019050818103600083015261415681613e2a565b9050919050565b6000602082019050818103600083015261417681613e6a565b9050919050565b6000602082019050818103600083015261419681613eaa565b9050919050565b60006020820190506141b26000830184613f2a565b92915050565b60006040820190506141cd6000830185613f2a565b6141da6020830184613f2a565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715614208576142076143a8565b5b8060405250919050565b600067ffffffffffffffff82111561422d5761422c6143a8565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614259576142586143a8565b5b602082029050919050565b600067ffffffffffffffff82111561427f5761427e6143a8565b5b602082029050919050565b600067ffffffffffffffff8211156142a5576142a46143a8565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156142d1576142d06143a8565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006143768261437d565b9050919050565b600061438882614341565b9050919050565b82818337600083830152505050565b6000819050919050565bfe5b6143b381614361565b81146143be57600080fd5b5056fe696e76616c6964206d756c746920636f6d7072657373656420706f696e7420666f726d6174a26469706673582212201fdb1a69fabfadbb769400578289408e763972c7d76083aa08446c80281eb25d64736f6c63430007060033",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, params_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bitSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierSession) BitSize() (*big.Int, error) {
	return _Verifier.Contract.BitSize(&_Verifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierCallerSession) BitSize() (*big.Int, error) {
	return _Verifier.Contract.BitSize(&_Verifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "g")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.G(&_Verifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.G(&_Verifier.CallOpts)
}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) GVector(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "gVector", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) GVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.GVector(&_Verifier.CallOpts, arg0)
}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) GVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.GVector(&_Verifier.CallOpts, arg0)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "h")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.H(&_Verifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.H(&_Verifier.CallOpts)
}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) HVector(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "hVector", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) HVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.HVector(&_Verifier.CallOpts, arg0)
}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) HVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.HVector(&_Verifier.CallOpts, arg0)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "n")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierSession) N() (*big.Int, error) {
	return _Verifier.Contract.N(&_Verifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierCallerSession) N() (*big.Int, error) {
	return _Verifier.Contract.N(&_Verifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "params")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierSession) Params() (common.Address, error) {
	return _Verifier.Contract.Params(&_Verifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierCallerSession) Params() (common.Address, error) {
	return _Verifier.Contract.Params(&_Verifier.CallOpts)
}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) Pkauth(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "pkauth")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) Pkauth() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.Pkauth(&_Verifier.CallOpts)
}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) Pkauth() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.Pkauth(&_Verifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) UBase(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "uBase")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.UBase(&_Verifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.UBase(&_Verifier.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierCaller) Verify(opts *bind.CallOpts, points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verify", points, scalar, lr, ct, nonce, token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierSession) Verify(points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	return _Verifier.Contract.Verify(&_Verifier.CallOpts, points, scalar, lr, ct, nonce, token)
}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierCallerSession) Verify(points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	return _Verifier.Contract.Verify(&_Verifier.CallOpts, points, scalar, lr, ct, nonce, token)
}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierCaller) VerifyAggTransfer(opts *bind.CallOpts, proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyAggTransfer", proof, state)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierSession) VerifyAggTransfer(proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	return _Verifier.Contract.VerifyAggTransfer(&_Verifier.CallOpts, proof, state)
}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyAggTransfer(proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	return _Verifier.Contract.VerifyAggTransfer(&_Verifier.CallOpts, proof, state)
}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierCaller) VerifyBurn(opts *bind.CallOpts, amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyBurn", amount, points, z, ub, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierSession) VerifyBurn(amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBurn(&_Verifier.CallOpts, amount, points, z, ub, input)
}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyBurn(amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBurn(&_Verifier.CallOpts, amount, points, z, ub, input)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 _step) returns()
func (_Verifier *VerifierTransactor) Init(opts *bind.TransactOpts, _step *big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "init", _step)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 _step) returns()
func (_Verifier *VerifierSession) Init(_step *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Init(&_Verifier.TransactOpts, _step)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 _step) returns()
func (_Verifier *VerifierTransactorSession) Init(_step *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Init(&_Verifier.TransactOpts, _step)
}
