// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package verifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BN128G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN128G1Point struct {
	X *big.Int
	Y *big.Int
}

// VerifierAggProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierAggProof struct {
	A   BN128G1Point
	S   BN128G1Point
	T1  BN128G1Point
	T2  BN128G1Point
	T   *big.Int
	Txx *big.Int
	U   *big.Int
	L   []BN128G1Point
	R   []BN128G1Point
	Ap  *big.Int
	Bp  *big.Int
}

// VerifierCT is an auto generated low-level Go binding around an user-defined struct.
type VerifierCT struct {
	X BN128G1Point
	Y BN128G1Point
}

// VerifierCTVProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierCTVProof struct {
	A  BN128G1Point
	B  BN128G1Point
	Z1 *big.Int
	Z2 *big.Int
}

// VerifierDLEProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierDLEProof struct {
	A1 BN128G1Point
	A2 BN128G1Point
	Z  *big.Int
}

// VerifierMRCT is an auto generated low-level Go binding around an user-defined struct.
type VerifierMRCT struct {
	X1 BN128G1Point
	X2 BN128G1Point
	X3 BN128G1Point
	Y  BN128G1Point
}

// VerifierPTEProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierPTEProof struct {
	A1 BN128G1Point
	A2 BN128G1Point
	A3 BN128G1Point
	B  BN128G1Point
	Z1 *big.Int
	Z2 *big.Int
}

// VerifierTransferProof is an auto generated low-level Go binding around an user-defined struct.
type VerifierTransferProof struct {
	PteProof VerifierPTEProof
	DleProof VerifierDLEProof
	CtvProof VerifierCTVProof
	AggProof VerifierAggProof
}

// VerifierTransferStatement is an auto generated low-level Go binding around an user-defined struct.
type VerifierTransferStatement struct {
	Pk1     BN128G1Point
	Pk2     BN128G1Point
	Mrct    VerifierMRCT
	Updated VerifierCT
	Refresh VerifierCT
	Custom  []*big.Int
}

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"params_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contractPublicParams\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pkauth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes\",\"name\":\"lr\",\"type\":\"bytes\"},{\"internalType\":\"uint256[4]\",\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"B\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z2\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.PTEProof\",\"name\":\"pteProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.DLEProof\",\"name\":\"dleProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"B\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z2\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.CTVProof\",\"name\":\"ctvProof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"A\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"S\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"T1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"T2\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point[]\",\"name\":\"l\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point[]\",\"name\":\"r\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"ap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"internalType\":\"structVerifier.AggProof\",\"name\":\"aggProof\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.TransferProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"pk1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"pk2\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.MRCT\",\"name\":\"mrct\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.CT\",\"name\":\"updated\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"X\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN128.G1Point\",\"name\":\"Y\",\"type\":\"tuple\"}],\"internalType\":\"structVerifier.CT\",\"name\":\"refresh\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"custom\",\"type\":\"uint256[]\"}],\"internalType\":\"structVerifier.TransferStatement\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"verifyAggTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"ub\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"verifyBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200546038038062005460833981810160405262000037919081019062000b47565b8061010860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200008362000a1b565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200010857600080fd5b505afa1580156200011d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000143919081019062000b73565b90506200014f62000a1b565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620001d457600080fd5b505afa158015620001e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200020f919081019062000b73565b90506200021b62000a1b565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620002a057600080fd5b505afa158015620002b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002db919081019062000b73565b9050620002e762000a1b565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac9e14f56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200036c57600080fd5b505afa15801562000381573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620003a7919081019062000b73565b905083600060028110620003b757fe5b6020020151600080018190555083600160028110620003d257fe5b602002015160006001018190555082600060028110620003ee57fe5b6020020151600260000181905550826001600281106200040a57fe5b6020020151600260010181905550816000600281106200042657fe5b6020020151600460000181905550816001600281106200044257fe5b6020020151600460010181905550806000600281106200045e57fe5b6020020151600660000181905550806001600281106200047a57fe5b602002015160066001018190555061010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200050e57600080fd5b505afa15801562000523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000549919081019062000b9f565b6020146200058e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005859062000cf7565b60405180910390fd5b620005a96020620005b4640100000000026401000000009004565b505050505062000e02565b60008090505b6002602002811015620005fa57600060088260408110620005d757fe5b60020201600001541415620005ec57620005fa565b8080600101915050620005ba565b60408110156200062257620006218183830162000626640100000000026401000000009004565b5b5050565b60006200063262000a3d565b60405180604001604052806001815260200160028152509050600062000696604051602001620006629062000cc3565b60405160208183030381529060405280519060200120600190046200087f640100000000026200287f176401000000009004565b905060008590505b8481108015620006b15750600260200281105b15620007605762000704818301604051602001620006d0919062000cda565b60405160208183030381529060405280519060200120600190046200087f640100000000026200287f176401000000009004565b9350620007298484620008b8640100000000026200259a179091906401000000009004565b600882604081106200073757fe5b60020201600082015181600001556020820151816001015590505080806001019150506200069e565b506000620007ac604051602001620007789062000cac565b60405160208183030381529060405280519060200120600190046200087f640100000000026200287f176401000000009004565b905060008690505b8581108015620007c75750600260200281105b1562000876576200081a828201604051602001620007e6919062000cda565b60405160208183030381529060405280519060200120600190046200087f640100000000026200287f176401000000009004565b94506200083f8585620008b8640100000000026200259a179091906401000000009004565b608882604081106200084d57fe5b6002020160008201518160000155602082015181600101559050508080600101915050620007b4565b50505050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381620008af57fe5b06915050919050565b620008c262000a3d565b6001821415620008d55782905062000974565b60028214156200090257620008fa83846200097a640100000000026401000000009004565b905062000974565b6200090c62000a57565b8360000151816000600381106200091f57fe5b6020020181815250508360200151816001600381106200093b57fe5b60200201818152505082816002600381106200095357fe5b6020020181815250506040826060836007600019fa6200097257600080fd5b505b92915050565b6200098462000a3d565b6200098e62000a79565b836000015181600060048110620009a157fe5b602002018181525050836020015181600160048110620009bd57fe5b602002018181525050826000015181600260048110620009d957fe5b602002018181525050826020015181600360048110620009f557fe5b6020020181815250506040826080836006600019fa62000a1457600080fd5b5092915050565b6040518060400160405280600290602082028038833980820191505090505090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b60008151905062000aac8162000dce565b92915050565b600082601f83011262000ac457600080fd5b600262000adb62000ad58262000d47565b62000d19565b9150818385602084028201111562000af257600080fd5b60005b8381101562000b26578162000b0b888262000b30565b84526020840193506020830192505060018101905062000af5565b5050505092915050565b60008151905062000b418162000de8565b92915050565b60006020828403121562000b5a57600080fd5b600062000b6a8482850162000a9b565b91505092915050565b60006040828403121562000b8657600080fd5b600062000b968482850162000ab2565b91505092915050565b60006020828403121562000bb257600080fd5b600062000bc28482850162000b30565b91505092915050565b600062000bda60038362000d7b565b91507f68767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b600062000c1c60118362000d6a565b91507f62697473697a65206e6f7420657175616c0000000000000000000000000000006000830152602082019050919050565b600062000c5e60038362000d7b565b91507f67767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b62000ca662000ca08262000dba565b62000dc4565b82525050565b600062000cb98262000bcb565b9150819050919050565b600062000cd08262000c4f565b9150819050919050565b600062000ce8828462000c91565b60208201915081905092915050565b6000602082019050818103600083015262000d128162000c0d565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000d3d57600080fd5b8060405250919050565b600067ffffffffffffffff82111562000d5f57600080fd5b602082029050919050565b600082825260208201905092915050565b600081905092915050565b600062000d938262000d9a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b62000dd98162000d86565b811462000de557600080fd5b50565b62000df38162000dba565b811462000dff57600080fd5b50565b61464e8062000e126000396000f3fe608060405234801561001057600080fd5b50600436106100ec576000357c01000000000000000000000000000000000000000000000000000000009004806356e2736c116100a9578063b7b0422d11610083578063b7b0422d1461025d578063b8c9d36514610279578063cff0ab9614610298578063e2179b8e146102b6576100ec565b806356e2736c146101cc578063637fe7ed146101fd578063b1a7a0b81461022d576100ec565b80630214120b146100f15780630c00f8a0146101105780631213e201146101415780632e52d606146101605780633c5c17361461017e5780633e8d3764146101ae575b600080fd5b6100f96102d5565b6040516101079291906143f4565b60405180910390f35b61012a60048036036101259190810190613d5b565b6102e7565b6040516101389291906143f4565b60405180910390f35b61014961030e565b6040516101579291906143f4565b60405180910390f35b610168610320565b60405161017591906143d9565b60405180910390f35b61019860048036036101939190810190613d84565b610325565b6040516101a591906142c3565b60405180910390f35b6101b6610474565b6040516101c391906143d9565b60405180910390f35b6101e660048036036101e19190810190613d5b565b610479565b6040516101f49291906143f4565b60405180910390f35b61021760048036036102129190810190613cef565b6104a0565b60405161022491906142c3565b60405180910390f35b61024760048036036102429190810190613c31565b61064f565b60405161025491906142c3565b60405180910390f35b61027760048036036102729190810190613d5b565b610d0c565b005b610281610d67565b60405161028f9291906143f4565b60405180910390f35b6102a0610d79565b6040516102ad91906142de565b60405180910390f35b6102be610da0565b6040516102cc9291906143f4565b60405180910390f35b60068060000154908060010154905082565b600881604081106102f457fe5b600202016000915090508060000154908060010154905082565b60048060000154908060010154905082565b600581565b600061032f612f25565b8360006004811061033c57fe5b6020020151816000015160000181815250508360016004811061035b57fe5b6020020151816000015160200181815250508360026004811061037a57fe5b6020020151816020015160000181815250508360036004811061039957fe5b60200201518160200151602001818152505060606103b687610db2565b90506103c0612f4b565b816001815181106103cd57fe5b60200260200101518160000181905250816002815181106103ea57fe5b602002602001015181602001819052508681604001818152505061042589848460008151811061041657fe5b60200260200101518489610ea8565b610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b90614359565b60405180910390fd5b6001935050505095945050505050565b602081565b6088816040811061048657fe5b600202016000915090508060000154908060010154905082565b60006104be8260000151836020015184604001518660000151610f67565b6104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490614379565b60405180910390fd5b61051e82606001518360800151846000015186602001518660a0015161122f565b61055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055490614399565b60405180910390fd5b6105748260000151836080015185604001516112c6565b6105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa906142f9565b60405180910390fd5b6105bb612f78565b826040015160600151816000600281106105d157fe5b6020020181905250826080015160200151816001600281106105ef57fe5b602002018190525061060581856060015161146f565b610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b90614339565b60405180910390fd5b600191505092915050565b6000610659612fa5565b610661612fe5565b606061066c8a610db2565b90508060008151811061067b57fe5b602002602001015182600001819052508060018151811061069857fe5b602002602001015182602001819052506040518060400160405280886000600481106106c057fe5b60200201518152602001886001600481106106d757fe5b602002015181525082606001516000018190525060405180604001604052808860026004811061070357fe5b602002015181526020018860036004811061071a57fe5b602002015181525082606001516020018190525080600a8151811061073b57fe5b602002602001015182608001516000018190525080600b8151811061075c57fe5b60200260200101518260800151602001819052508060028151811061077d57fe5b60200260200101518260400151600001819052508060038151811061079e57fe5b6020026020010151826040015160200181905250806004815181106107bf57fe5b6020026020010151826040015160400181905250806005815181106107e057fe5b6020026020010151826040015160600181905250600e6040519080825280602002602001820160405280156108245781602001602082028038833980820191505090505b508260a00181905250858260a0015160008151811061083f57fe5b602002602001018181525050848260a0015160018151811061085d57fe5b60200260200101818152505060008090505b60068110156108fc5781818151811061088457fe5b6020026020010151600001518360a0015160028302600201815181106108a657fe5b6020026020010181815250508181815181106108be57fe5b6020026020010151602001518360a0015160016002840260020101815181106108e357fe5b602002602001018181525050808060010191505061086f565b508060068151811061090a57fe5b60200260200101518360000151600001819052508060078151811061092b57fe5b60200260200101518360000151602001819052508060088151811061094c57fe5b60200260200101518360000151604001819052508060098151811061096d57fe5b6020026020010151836000015160600181905250886000600a811061098e57fe5b602002015183600001516080018181525050886001600a81106109ad57fe5b6020020151836000015160a001818152505080600e815181106109cc57fe5b602002602001015183602001516000018190525080600f815181106109ed57fe5b6020026020010151836020015160200181905250886004600a8110610a0e57fe5b60200201518360200151604001818152505080600c81518110610a2d57fe5b602002602001015183604001516000018190525080600d81518110610a4e57fe5b6020026020010151836040015160200181905250886002600a8110610a6f57fe5b602002015183604001516040018181525050886003600a8110610a8e57fe5b60200201518360400151606001818152505080601081518110610aad57fe5b602002602001015183606001516000018190525080601181518110610ace57fe5b602002602001015183606001516020018190525080601281518110610aef57fe5b602002602001015183606001516040018190525080601381518110610b1057fe5b6020026020010151836060015160600181905250886005600a8110610b3157fe5b602002015183606001516080018181525050886006600a8110610b5057fe5b6020020151836060015160a0018181525050886007600a8110610b6f57fe5b6020020151836060015160c0018181525050886008600a8110610b8e57fe5b60200201518360600151610120018181525050886009600a8110610bae57fe5b602002015183606001516101400181815250506001600501604051908082528060200260200182016040528015610bff57816020015b610bec613039565b815260200190600190039081610be45790505b50836060015160e001819052506001600501604051908082528060200260200182016040528015610c4a57816020015b610c37613039565b815260200190600190039081610c2f5790505b50836060015161010001819052506060610c6389610db2565b905060008090505b6001600501811015610cf157818181518110610c8357fe5b6020026020010151856060015160e001518281518110610c9f57fe5b6020026020010181905250816001600501820181518110610cbc57fe5b6020026020010151856060015161010001518281518110610cd957fe5b60200260200101819052508080600101915050610c6b565b50610cfc84846104a0565b9450505050509695505050505050565b60008090505b6002602002811015610d4d57600060088260408110610d2d57fe5b60020201600001541415610d4057610d4d565b8080600101915050610d12565b6040811015610d6357610d628183830161220c565b5b5050565b60008060000154908060010154905082565b61010860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028060000154908060010154905082565b606060006021835181610dc157fe5b0614610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df9906143b9565b60405180910390fd5b60006021835181610e0f57fe5b04905080604051908082528060200260200182016040528015610e4c57816020015b610e39613039565b815260200190600190039081610e315790505b50915060008090505b81811015610e9e57600080610e6a86846123db565b91509150610e78818361248d565b858481518110610e8457fe5b602002602001018190525050508080600101915050610e55565b5081915050919050565b6000610eb2613053565b610f03610ef0610eeb8960026040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b61263f565b87602001516126cf90919063ffffffff16565b9050610f0d613053565b86600001519050610f1c613053565b6000604051806040016040529081600082015481526020016001820154815250509050610f47613053565b879050610f58848484848b8b612767565b94505050505095945050505050565b600080610feb8360000151600001518460000151602001518560200151600001518660200151602001518760400151600001518860400151602001518960600151600001518a6060015160200151604051602001610fcc989796959493929190614231565b604051602081830303815290604052805190602001206001900461287f565b9050610ff5613053565b61100c84608001518861259a90919063ffffffff16565b9050611016613053565b611043856000015161103585896000015161259a90919063ffffffff16565b6126cf90919063ffffffff16565b905061105881836128b790919063ffffffff16565b6110685760009350505050611227565b61107f85608001518861259a90919063ffffffff16565b91506110ae85602001516110a085896020015161259a90919063ffffffff16565b6126cf90919063ffffffff16565b90506110c381836128b790919063ffffffff16565b6110d35760009350505050611227565b61110a856080015160066040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b9150611139856040015161112b85896040015161259a90919063ffffffff16565b6126cf90919063ffffffff16565b905061114e81836128b790919063ffffffff16565b61115e5760009350505050611227565b6111dd6111988660a0015160026040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6111cf876080015160006040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6126cf90919063ffffffff16565b915061120c6111f984886060015161259a90919063ffffffff16565b86606001516126cf90919063ffffffff16565b905061122181836128b790919063ffffffff16565b93505050505b949350505050565b6000611239613053565b61125c611249886020015161263f565b87602001516126cf90919063ffffffff16565b9050611266613053565b611289611276896000015161263f565b88600001516126cf90919063ffffffff16565b90506112b98282600060405180604001604052908160008201548152602001600182015481525050898989612767565b9250505095945050505050565b60008061132283600001516000015184600001516020015185602001516000015186602001516020015160405160200161130394939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b905061132c613053565b61134384604001518761259a90919063ffffffff16565b905061134d613053565b61137a61136784886000015161259a90919063ffffffff16565b86600001516126cf90919063ffffffff16565b905061138f81836128b790919063ffffffff16565b61139f5760009350505050611468565b61141e6113d9866040015160006040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b611410876060015160026040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6126cf90919063ffffffff16565b915061144d61143a84886020015161259a90919063ffffffff16565b86602001516126cf90919063ffffffff16565b905061146281836128b790919063ffffffff16565b93505050505b9392505050565b600061147961306d565b6008604080602002604051908101604052809291906000905b828210156114ce578382600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611492565b5050505090506114dc61306d565b6088604080602002604051908101604052809291906000905b828210156115315783826002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906114f5565b50505050905061153f61309b565b61159885600001516000015186600001516020015187602001516000015188602001516020015160405160200161157994939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b8160000181815250506115fa8560200151600001518660200151602001518760000151600001518860000151602001516040516020016115db94939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b81602001818152505061161081600001516128df565b81610100018190525061162e611629826000015161297f565b6128df565b8161012001819052506116448160200151612a49565b81604001818152505061167061166b82602001518360200151612a7590919063ffffffff16565b61287f565b81606001818152505061169c61169782602001518360600151612a7590919063ffffffff16565b61287f565b8160800181815250506116af6002612aaf565b8161014001819052506117118560400151600001518660400151602001518760600151600001518860600151602001516040516020016116f294939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b8160a00181815250506117358160a001518260a00151612a7590919063ffffffff16565b8160c00181815250506117f761175c8260c00151876060015161259a90919063ffffffff16565b6117e961177a8460a00151896040015161259a90919063ffffffff16565b6117db6117a586608001518c60016002811061179257fe5b602002015161259a90919063ffffffff16565b6117cd87606001518d6000600281106117ba57fe5b602002015161259a90919063ffffffff16565b6126cf90919063ffffffff16565b6126cf90919063ffffffff16565b6126cf90919063ffffffff16565b81610260018190525061186f611827611814836101400151612b4c565b8360800151612a7590919063ffffffff16565b611861611838846101000151612baf565b61185385606001518660200151612c1590919063ffffffff16565b612a7590919063ffffffff16565b612c1590919063ffffffff16565b8160e00181815250506118c86118b561188c836101400151612b4c565b6118a784602001518560800151612a7590919063ffffffff16565b612a7590919063ffffffff16565b8260e00151612c1590919063ffffffff16565b8160e001818152505061196661190b8660a0015160006040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6119586119298460e001518960800151612c1590919063ffffffff16565b60026040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6126cf90919063ffffffff16565b81610280018190525061198c8161028001518261026001516128b790919063ffffffff16565b61199c5760009350505050612206565b6119a4613053565b6119d56119c28360a00151886020015161259a90919063ffffffff16565b87600001516126cf90919063ffffffff16565b905060008090505b8660e0015151811015611bf0576000611a938860e0015183815181106119ff57fe5b6020026020010151600001518960e001518481518110611a1b57fe5b6020026020010151602001518a61010001518581518110611a3857fe5b6020026020010151600001518b61010001518681518110611a5557fe5b602002602001015160200151604051602001611a7494939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b9050808461016001518360068110611aa757fe5b602002018181525050611acb611ac68283612a7590919063ffffffff16565b61287f565b846101a001518360068110611adc57fe5b602002018181525050611b03846101a001518360068110611af957fe5b602002015161297f565b846101c001518360068110611b1457fe5b6020020181815250508760e001518281518110611b2d57fe5b6020026020010151846102a00181905250611b7d611b6e856101a001518460068110611b5557fe5b6020020151866102a0015161259a90919063ffffffff16565b846126cf90919063ffffffff16565b92508761010001518281518110611b9057fe5b6020026020010151846102a00181905250611be0611bd1856101c001518460068110611bb857fe5b6020020151866102a0015161259a90919063ffffffff16565b846126cf90919063ffffffff16565b92505080806001019150506119dd565b5060008090505b6040811015612092576000811415611d265760008090505b8760e0015151811015611cb85760008461016001518260068110611c2f57fe5b602002015190506000821415611c5f57808561020001518460408110611c5157fe5b602002018181525050611caa565b611c8f611c8a828761020001518660408110611c7757fe5b6020020151612a7590919063ffffffff16565b61287f565b8561020001518460408110611ca057fe5b6020020181815250505b508080600101915050611c0f565b508261020001518160408110611cca57fe5b60200201518361024001518260408110611ce057fe5b602002018181525050611d078361020001518260408110611cfd57fe5b602002015161297f565b8361020001518260408110611d1857fe5b602002018181525050611e21565b6000611d37828960e0015151612c5a565b9050611d92611d8d856101a00151838b60e00151510360068110611d5757fe5b6020020151866102000151611d6e60018603612caa565b860360408110611d7a57fe5b6020020151612a7590919063ffffffff16565b61287f565b8461020001518360408110611da357fe5b602002018181525050611e05611e00856101c00151838b60e00151510360068110611dca57fe5b6020020151866102400151611de160018603612caa565b860360408110611ded57fe5b6020020151612a7590919063ffffffff16565b61287f565b8461024001518360408110611e1657fe5b602002018181525050505b8261020001518160408110611e3257fe5b6020020151836101e001518260408110611e4857fe5b6020020181815250508261024001518160408110611e6257fe5b60200201518361022001518260408110611e7857fe5b602002018181525050611ec48360200151611eb6896101200151866101e001518560408110611ea357fe5b6020020151612a7590919063ffffffff16565b612cf290919063ffffffff16565b836101e001518260408110611ed557fe5b602002018181525050611f0b8761014001518461022001518360408110611ef857fe5b6020020151612a7590919063ffffffff16565b8361022001518260408110611f1c57fe5b6020020181815250506020811015611fa057611f81611f5d8461014001518360208110611f4557fe5b60200201518560600151612a7590919063ffffffff16565b8461022001518360408110611f6e57fe5b6020020151612c1590919063ffffffff16565b8361022001518260408110611f9257fe5b602002018181525050612018565b611ffd611fd984610140015160208481611fb657fe5b0660208110611fc157fe5b60200201518560800151612a7590919063ffffffff16565b8461022001518360408110611fea57fe5b6020020151612c1590919063ffffffff16565b836102200151826040811061200e57fe5b6020020181815250505b61206b836020015161205d856101200151846040811061203457fe5b6020020151866102200151856040811061204a57fe5b6020020151612a7590919063ffffffff16565b612c1590919063ffffffff16565b836102200151826040811061207c57fe5b6020020181815250508080600101915050611bf7565b5060006120cc87608001516040516020016120ad919061419c565b604051602081830303815290604052805190602001206001900461287f565b90506121cd6121088860c0015160006040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6121bf6121826121536121448c608001516121368e61014001518f6101200151612a7590919063ffffffff16565b612c1590919063ffffffff16565b86612a7590919063ffffffff16565b60046040518060400160405290816000820154815260200160018201548152505061259a90919063ffffffff16565b6121b161219489896102200151612d2c565b6121a38b8a6101e00151612d2c565b6126cf90919063ffffffff16565b6126cf90919063ffffffff16565b6126cf90919063ffffffff16565b8361028001819052508160000151836102800151600001511480156121fe5750816020015183610280015160200151145b955050505050505b92915050565b6000612216613053565b60405180604001604052806001815260200160028152509050600061226260405160200161224390614187565b604051602081830303815290604052805190602001206001900461287f565b905060008590505b848110801561227c5750600260200281105b15612300576122b6818301604051602001612297919061419c565b604051602081830303815290604052805190602001206001900461287f565b93506122cb848461259a90919063ffffffff16565b600882604081106122d857fe5b600202016000820151816000015560208201518160010155905050808060010191505061226a565b50600061233460405160200161231590614172565b604051602081830303815290604052805190602001206001900461287f565b905060008690505b858110801561234e5750600260200281105b156123d257612388828201604051602001612369919061419c565b604051602081830303815290604052805190602001206001900461287f565b945061239d858561259a90919063ffffffff16565b608882604081106123aa57fe5b600202016000820151816000015560208201518160010155905050808060010191505061233c565b50505050505050565b6000806000600160ff1660018660218702815181106123f657fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090041660ff16149050600061247c8660016021880201612de2565b905081819350935050509250929050565b612495613053565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050600081806124c457fe5b858609905081806124d157fe5b8582099050600060039050600083806124e657fe5b8284089050600061250582600460018801816124fe57fe5b0487612df8565b905081858061251057fe5b82830914612553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254a90614319565b60405180910390fd5b6040518060400160405280898152602001828152509550600060018083161490508015158815151461258b576125888761263f565b96505b86965050505050505092915050565b6125a2613053565b60018214156125b357829050612639565b60028214156125cd576125c683846126cf565b9050612639565b6125d5613196565b8360000151816000600381106125e757fe5b60200201818152505083602001518160016003811061260257fe5b602002018181525050828160026003811061261957fe5b6020020181815250506040826060836007600019fa61263757600080fd5b505b92915050565b612647613053565b6000826000015114801561265f575060008260200151145b1561268257604051806040016040528060008152602001600081525090506126ca565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604051806040016040528084600001518152602001846020015183038152509150505b919050565b6126d7613053565b6126df6131b8565b8360000151816000600481106126f157fe5b60200201818152505083602001518160016004811061270c57fe5b60200201818152505082600001518160026004811061272757fe5b60200201818152505082602001518160036004811061274257fe5b6020020181815250506040826080836006600019fa61276057600080fd5b5092915050565b6000806127c38460000151600001518560000151602001518660200151600001518760200151602001516040516020016127a494939291906141e3565b604051602081830303815290604052805190602001206001900461287f565b905060006127fa846040516020016127db919061415b565b604051602081830303815290604052805190602001206001900461287f565b9050600061283383836040516020016128149291906141b7565b604051602081830303815290604052805190602001206001900461287f565b905061284a8a8a8860000151896040015185612ec9565b61285a5760009350505050612875565b61286f88888860200151896040015185612ec9565b93505050505b9695505050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508083816128ae57fe5b06915050919050565b6000816000015183600001511480156128d7575081602001518360200151145b905092915050565b6128e76131da565b6001816000604081106128f657fe5b602002018181525050818160016040811061290d57fe5b6020020181815250506000600290505b6002602002811015612979576129576129528484600185036040811061293f57fe5b6020020151612a7590919063ffffffff16565b61287f565b82826040811061296357fe5b602002018181525050808060010191505061291d565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600083905060008114156129be57600092505050612a44565b818111156129d3578181816129cf57fe5b0690505b600080600190506000849050600084905060005b60008214612a1c578183816129f857fe5b049050838482028603838484028603809550819650829750839850505050506129e7565b6000851215612a3957846000038703975050505050505050612a44565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080612aa357fe5b83850991505092915050565b612ab76131fd565b600181600060208110612ac657fe5b6020020181815250508181600160208110612add57fe5b6020020181815250506000600290505b6020811015612b4657612b24612b1f84846001850360208110612b0c57fe5b6020020151612a7590919063ffffffff16565b61287f565b828260208110612b3057fe5b6020020181815250508080600101915050612aed565b50919050565b60008082600060208110612b5c57fe5b602002015190506000600190505b6020811015612ba557612b96848260208110612b8257fe5b602002015183612cf290919063ffffffff16565b91508080600101915050612b6a565b5080915050919050565b60008082600060408110612bbf57fe5b602002015190506000600190505b6002602002811015612c0b57612bfc848260408110612be857fe5b602002015183612cf290919063ffffffff16565b91508080600101915050612bcd565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905082841015612c4d578383820301612c51565b8284035b91505092915050565b6000808260019060020a02905060005b8185108015612c795750600082115b15612c9a57600182908060020a820491505091508080600101915050612c6a565b8084600101039250505092915050565b6000808290506000811415612cc3576001915050612ced565b6000600190505b6000821115612ce757600281029050818060019003925050612cca565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080612d2057fe5b83850891505092915050565b612d34613053565b612d3c613053565b612d7183600060408110612d4c57fe5b602002015185600060408110612d5e57fe5b602002015161259a90919063ffffffff16565b90506000600190505b6040811015612dd757612dc8612db9858360408110612d9557fe5b6020020151878460408110612da657fe5b602002015161259a90919063ffffffff16565b836126cf90919063ffffffff16565b91508080600101915050612d7a565b508091505092915050565b6000808260200184015190508091505092915050565b6000612e02613220565b612e0a613242565b602082600060068110612e1957fe5b602002018181525050602082600160068110612e3157fe5b602002018181525050602082600260068110612e4957fe5b6020020181815250508582600360068110612e6057fe5b6020020181815250508482600460068110612e7757fe5b6020020181815250508382600560068110612e8e57fe5b60200201818152505060208160c0846005600019fa612eac57600080fd5b80600060018110612eb957fe5b6020020151925050509392505050565b6000612ede838761259a90919063ffffffff16565b9550612f0584612ef7848861259a90919063ffffffff16565b6126cf90919063ffffffff16565b9450612f1a85876128b790919063ffffffff16565b905095945050505050565b6040518060400160405280612f38613039565b8152602001612f45613039565b81525090565b6040518060600160405280612f5e613039565b8152602001612f6b613039565b8152602001600081525090565b60405180604001604052806002905b612f8f613039565b815260200190600190039081612f875790505090565b6040518060800160405280612fb8613264565b8152602001612fc56132b2565b8152602001612fd26132df565b8152602001612fdf613313565b81525090565b6040518060c00160405280612ff8613039565b8152602001613005613039565b8152602001613012613385565b815260200161301f6133c5565b815260200161302c6133c5565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518061080001604052806040905b613085613039565b81526020019060019003908161307d5790505090565b604051806102c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016130e76133eb565b81526020016130f46133eb565b815260200161310161340e565b815260200161310e613431565b815260200161311b613431565b8152602001613128613431565b8152602001613135613431565b81526020016131426133eb565b815260200161314f6133eb565b815260200161315c6133eb565b81526020016131696133eb565b8152602001613176613039565b8152602001613183613039565b8152602001613190613039565b81525090565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b604051806108000160405280604090602082028038833980820191505090505090565b604051806104000160405280602090602082028038833980820191505090505090565b6040518060c00160405280600690602082028038833980820191505090505090565b6040518060200160405280600190602082028038833980820191505090505090565b6040518060c00160405280613277613039565b8152602001613284613039565b8152602001613291613039565b815260200161329e613039565b815260200160008152602001600081525090565b60405180606001604052806132c5613039565b81526020016132d2613039565b8152602001600081525090565b60405180608001604052806132f2613039565b81526020016132ff613039565b815260200160008152602001600081525090565b604051806101600160405280613327613039565b8152602001613334613039565b8152602001613341613039565b815260200161334e613039565b8152602001600081526020016000815260200160008152602001606081526020016060815260200160008152602001600081525090565b6040518060800160405280613398613039565b81526020016133a5613039565b81526020016133b2613039565b81526020016133bf613039565b81525090565b60405180604001604052806133d8613039565b81526020016133e5613039565b81525090565b604051806108000160405280604090602082028038833980820191505090505090565b604051806104000160405280602090602082028038833980820191505090505090565b6040518060c00160405280600690602082028038833980820191505090505090565b600082601f83011261346457600080fd5b81356134776134728261444a565b61441d565b9150818183526020840193506020810190508385604084028201111561349c57600080fd5b60005b838110156134cc57816134b28882613974565b84526020840193506040830192505060018101905061349f565b5050505092915050565b600082601f8301126134e757600080fd5b600a6134fa6134f582614472565b61441d565b9150818385602084028201111561351057600080fd5b60005b8381101561354057816135268882613c1c565b845260208401935060208301925050600181019050613513565b5050505092915050565b600082601f83011261355b57600080fd5b600461356e61356982614494565b61441d565b9150818385602084028201111561358457600080fd5b60005b838110156135b4578161359a8882613c1c565b845260208401935060208301925050600181019050613587565b5050505092915050565b600082601f8301126135cf57600080fd5b81356135e26135dd826144b6565b61441d565b9150818183526020840193506020810190508385602084028201111561360757600080fd5b60005b83811015613637578161361d8882613c1c565b84526020840193506020830192505060018101905061360a565b5050505092915050565b600082601f83011261365257600080fd5b8135613665613660826144de565b61441d565b9150818183526020840193506020810190508385602084028201111561368a57600080fd5b60005b838110156136ba57816136a08882613c1c565b84526020840193506020830192505060018101905061368d565b5050505092915050565b600082601f8301126136d557600080fd5b81356136e86136e382614506565b61441d565b9150808252602083016020830185838301111561370457600080fd5b61370f8382846145db565b50505092915050565b60006101e0828403121561372b57600080fd5b61373661016061441d565b9050600061374684828501613974565b600083015250604061375a84828501613974565b602083015250608061376e84828501613974565b60408301525060c061378284828501613974565b60608301525061010061379784828501613c1c565b6080830152506101206137ac84828501613c1c565b60a0830152506101406137c184828501613c1c565b60c08301525061016082013567ffffffffffffffff8111156137e257600080fd5b6137ee84828501613453565b60e08301525061018082013567ffffffffffffffff81111561380f57600080fd5b61381b84828501613453565b610100830152506101a061383184828501613c1c565b610120830152506101c061384784828501613c1c565b6101408301525092915050565b600060c0828403121561386657600080fd5b613870608061441d565b9050600061388084828501613974565b600083015250604061389484828501613974565b60208301525060806138a884828501613c1c565b60408301525060a06138bc84828501613c1c565b60608301525092915050565b6000608082840312156138da57600080fd5b6138e4604061441d565b905060006138f484828501613974565b600083015250604061390884828501613974565b60208301525092915050565b600060a0828403121561392657600080fd5b613930606061441d565b9050600061394084828501613974565b600083015250604061395484828501613974565b602083015250608061396884828501613c1c565b60408301525092915050565b60006040828403121561398657600080fd5b613990604061441d565b905060006139a084828501613c1c565b60008301525060206139b484828501613c1c565b60208301525092915050565b600061010082840312156139d357600080fd5b6139dd608061441d565b905060006139ed84828501613974565b6000830152506040613a0184828501613974565b6020830152506080613a1584828501613974565b60408301525060c0613a2984828501613974565b60608301525092915050565b60006101408284031215613a4857600080fd5b613a5260c061441d565b90506000613a6284828501613974565b6000830152506040613a7684828501613974565b6020830152506080613a8a84828501613974565b60408301525060c0613a9e84828501613974565b606083015250610100613ab384828501613c1c565b608083015250610120613ac884828501613c1c565b60a08301525092915050565b60006102c08284031215613ae757600080fd5b613af1608061441d565b90506000613b0184828501613a35565b600083015250610140613b1684828501613914565b6020830152506101e0613b2b84828501613854565b6040830152506102a082013567ffffffffffffffff811115613b4c57600080fd5b613b5884828501613718565b60608301525092915050565b60006102a08284031215613b7757600080fd5b613b8160c061441d565b90506000613b9184828501613974565b6000830152506040613ba584828501613974565b6020830152506080613bb9848285016139c0565b604083015250610180613bce848285016138c8565b606083015250610200613be3848285016138c8565b60808301525061028082013567ffffffffffffffff811115613c0457600080fd5b613c10848285016135be565b60a08301525092915050565b600081359050613c2b816145f4565b92915050565b6000806000806000806102408789031215613c4b57600080fd5b600087013567ffffffffffffffff811115613c6557600080fd5b613c7189828a016136c4565b9650506020613c8289828a016134d6565b95505061016087013567ffffffffffffffff811115613ca057600080fd5b613cac89828a016136c4565b945050610180613cbe89828a0161354a565b935050610200613cd089828a01613c1c565b925050610220613ce289828a01613c1c565b9150509295509295509295565b60008060408385031215613d0257600080fd5b600083013567ffffffffffffffff811115613d1c57600080fd5b613d2885828601613ad4565b925050602083013567ffffffffffffffff811115613d4557600080fd5b613d5185828601613b64565b9150509250929050565b600060208284031215613d6d57600080fd5b6000613d7b84828501613c1c565b91505092915050565b60008060008060006101008688031215613d9d57600080fd5b6000613dab88828901613c1c565b955050602086013567ffffffffffffffff811115613dc857600080fd5b613dd4888289016136c4565b9450506040613de588828901613c1c565b9350506060613df68882890161354a565b92505060e086013567ffffffffffffffff811115613e1357600080fd5b613e1f88828901613641565b9150509295509295909350565b6000613e388383614135565b60208301905092915050565b6000613e4f82614542565b613e59818561455a565b9350613e6483614532565b8060005b83811015613e95578151613e7c8882613e2c565b9750613e878361454d565b925050600181019050613e68565b5085935050505092915050565b613eab81614581565b82525050565b613eba816145b7565b82525050565b6000613ecd601683614565565b91507f63742076616c69642070726f6f6620696e76616c6964000000000000000000006000830152602082019050919050565b6000613f0d600383614576565b91507f68767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b6000613f4d601b83614565565b91507f496e76616c696420706f696e743a206e6f74206f6e20637572766500000000006000830152602082019050919050565b6000613f8d601b83614565565b91507f616767726174652072616e67652070726f6f6620696e76616c696400000000006000830152602082019050919050565b6000613fcd601983614565565b91507f657175616c2070726f6f6620766572696679206661696c6564000000000000006000830152602082019050919050565b600061400d601783614565565b91507f70746520657175616c2070726f6f6620696e76616c69640000000000000000006000830152602082019050919050565b600061404d601683614565565b91507f646c65207369676d612070726f6f66206661696c6564000000000000000000006000830152602082019050919050565b600061408d602583614565565b91507f696e76616c6964206d756c746920636f6d7072657373656420706f696e74206660008301527f6f726d61740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006140f3600383614576565b91507f67767300000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b61412f816145ad565b82525050565b61413e816145ad565b82525050565b614155614150826145ad565b6145ea565b82525050565b60006141678284613e44565b915081905092915050565b600061417d82613f00565b9150819050919050565b6000614192826140e6565b9150819050919050565b60006141a88284614144565b60208201915081905092915050565b60006141c38285614144565b6020820191506141d38284614144565b6020820191508190509392505050565b60006141ef8287614144565b6020820191506141ff8286614144565b60208201915061420f8285614144565b60208201915061421f8284614144565b60208201915081905095945050505050565b600061423d828b614144565b60208201915061424d828a614144565b60208201915061425d8289614144565b60208201915061426d8288614144565b60208201915061427d8287614144565b60208201915061428d8286614144565b60208201915061429d8285614144565b6020820191506142ad8284614144565b6020820191508190509998505050505050505050565b60006020820190506142d86000830184613ea2565b92915050565b60006020820190506142f36000830184613eb1565b92915050565b6000602082019050818103600083015261431281613ec0565b9050919050565b6000602082019050818103600083015261433281613f40565b9050919050565b6000602082019050818103600083015261435281613f80565b9050919050565b6000602082019050818103600083015261437281613fc0565b9050919050565b6000602082019050818103600083015261439281614000565b9050919050565b600060208201905081810360008301526143b281614040565b9050919050565b600060208201905081810360008301526143d281614080565b9050919050565b60006020820190506143ee6000830184614126565b92915050565b60006040820190506144096000830185614126565b6144166020830184614126565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561444057600080fd5b8060405250919050565b600067ffffffffffffffff82111561446157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561448957600080fd5b602082029050919050565b600067ffffffffffffffff8211156144ab57600080fd5b602082029050919050565b600067ffffffffffffffff8211156144cd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156144f557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561451d57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006145c2826145c9565b9050919050565b60006145d48261458d565b9050919050565b82818337600083830152505050565b6000819050919050565b6145fd816145ad565b811461460857600080fd5b5056fea365627a7a72315820a3e53d41bbcccd65425de93879dcdd1a9dc94d6ccb402bba2b735f02b5155d216c6578706572696d656e74616cf564736f6c63430005100040",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := VerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend, params_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VerifierSession struct {
	Contract     *Verifier         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VerifierCallerSession struct {
	Contract *VerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// VerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VerifierTransactorSession struct {
	Contract     *VerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// VerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type VerifierRaw struct {
	Contract *Verifier // Generic contract binding to access the raw methods on
}

// VerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VerifierCallerRaw struct {
	Contract *VerifierCaller // Generic read-only contract binding to access the raw methods on
}

// VerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VerifierTransactorRaw struct {
	Contract *VerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VerifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.VerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.VerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Verifier *VerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Verifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Verifier *VerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Verifier *VerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Verifier.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "bitSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierSession) BitSize() (*big.Int, error) {
	return _Verifier.Contract.BitSize(&_Verifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Verifier *VerifierCallerSession) BitSize() (*big.Int, error) {
	return _Verifier.Contract.BitSize(&_Verifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "g")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.G(&_Verifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.G(&_Verifier.CallOpts)
}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) GVector(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "gVector", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) GVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.GVector(&_Verifier.CallOpts, arg0)
}

// GVector is a free data retrieval call binding the contract method 0x0c00f8a0.
//
// Solidity: function gVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) GVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.GVector(&_Verifier.CallOpts, arg0)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "h")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.H(&_Verifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.H(&_Verifier.CallOpts)
}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) HVector(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "hVector", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) HVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.HVector(&_Verifier.CallOpts, arg0)
}

// HVector is a free data retrieval call binding the contract method 0x56e2736c.
//
// Solidity: function hVector(uint256 ) view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) HVector(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.HVector(&_Verifier.CallOpts, arg0)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "n")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierSession) N() (*big.Int, error) {
	return _Verifier.Contract.N(&_Verifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Verifier *VerifierCallerSession) N() (*big.Int, error) {
	return _Verifier.Contract.N(&_Verifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "params")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierSession) Params() (common.Address, error) {
	return _Verifier.Contract.Params(&_Verifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Verifier *VerifierCallerSession) Params() (common.Address, error) {
	return _Verifier.Contract.Params(&_Verifier.CallOpts)
}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) Pkauth(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "pkauth")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) Pkauth() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.Pkauth(&_Verifier.CallOpts)
}

// Pkauth is a free data retrieval call binding the contract method 0x0214120b.
//
// Solidity: function pkauth() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) Pkauth() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.Pkauth(&_Verifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCaller) UBase(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "uBase")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.UBase(&_Verifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() view returns(uint256 X, uint256 Y)
func (_Verifier *VerifierCallerSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Verifier.Contract.UBase(&_Verifier.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierCaller) Verify(opts *bind.CallOpts, points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verify", points, scalar, lr, ct, nonce, token)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierSession) Verify(points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	return _Verifier.Contract.Verify(&_Verifier.CallOpts, points, scalar, lr, ct, nonce, token)
}

// Verify is a free data retrieval call binding the contract method 0xb1a7a0b8.
//
// Solidity: function verify(bytes points, uint256[10] scalar, bytes lr, uint256[4] ct, uint256 nonce, uint256 token) view returns(bool)
func (_Verifier *VerifierCallerSession) Verify(points []byte, scalar [10]*big.Int, lr []byte, ct [4]*big.Int, nonce *big.Int, token *big.Int) (bool, error) {
	return _Verifier.Contract.Verify(&_Verifier.CallOpts, points, scalar, lr, ct, nonce, token)
}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierCaller) VerifyAggTransfer(opts *bind.CallOpts, proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyAggTransfer", proof, state)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierSession) VerifyAggTransfer(proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	return _Verifier.Contract.VerifyAggTransfer(&_Verifier.CallOpts, proof, state)
}

// VerifyAggTransfer is a free data retrieval call binding the contract method 0x637fe7ed.
//
// Solidity: function verifyAggTransfer((((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),uint256),((uint256,uint256),(uint256,uint256),uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256),uint256,uint256,uint256,(uint256,uint256)[],(uint256,uint256)[],uint256,uint256)) proof, ((uint256,uint256),(uint256,uint256),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),((uint256,uint256),(uint256,uint256)),uint256[]) state) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyAggTransfer(proof VerifierTransferProof, state VerifierTransferStatement) (bool, error) {
	return _Verifier.Contract.VerifyAggTransfer(&_Verifier.CallOpts, proof, state)
}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierCaller) VerifyBurn(opts *bind.CallOpts, amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "verifyBurn", amount, points, z, ub, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierSession) VerifyBurn(amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBurn(&_Verifier.CallOpts, amount, points, z, ub, input)
}

// VerifyBurn is a free data retrieval call binding the contract method 0x3c5c1736.
//
// Solidity: function verifyBurn(uint256 amount, bytes points, uint256 z, uint256[4] ub, uint256[] input) view returns(bool)
func (_Verifier *VerifierCallerSession) VerifyBurn(amount *big.Int, points []byte, z *big.Int, ub [4]*big.Int, input []*big.Int) (bool, error) {
	return _Verifier.Contract.VerifyBurn(&_Verifier.CallOpts, amount, points, z, ub, input)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 step) returns()
func (_Verifier *VerifierTransactor) Init(opts *bind.TransactOpts, step *big.Int) (*types.Transaction, error) {
	return _Verifier.contract.Transact(opts, "init", step)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 step) returns()
func (_Verifier *VerifierSession) Init(step *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Init(&_Verifier.TransactOpts, step)
}

// Init is a paid mutator transaction binding the contract method 0xb7b0422d.
//
// Solidity: function init(uint256 step) returns()
func (_Verifier *VerifierTransactorSession) Init(step *big.Int) (*types.Transaction, error) {
	return _Verifier.Contract.Init(&_Verifier.TransactOpts, step)
}
