// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package pgc

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PgcMetaData contains all meta data concerning the Pgc contract.
var PgcMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"params_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenConverter_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256[8]\",\"name\":\"ct\",\"type\":\"uint256[8]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogAggTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accounty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogBurnPart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tox\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogDepositAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"fromto\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"ct1\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"ct2\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contractPublicParams\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConverter\",\"outputs\":[{\"internalType\":\"contractTokenConverter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contractVerifier\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLength_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"openPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"sig\",\"type\":\"uint256[2]\"}],\"name\":\"closePending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bs\",\"type\":\"bytes\"}],\"name\":\"toPoint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"depositAccountETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes\",\"name\":\"lr\",\"type\":\"bytes\"}],\"name\":\"aggTransferETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256[10]\",\"name\":\"scalar\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lr\",\"type\":\"bytes\"}],\"name\":\"aggTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"ct\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"getPendingFunNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burnETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"points\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004c9838038062004c98833981810160405260608110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200012962000478565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620001ad57600080fd5b505afa158015620001c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620001e857600080fd5b81019080919050509050620001fc62000478565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200028057600080fd5b505afa15801562000295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620002bb57600080fd5b8101908091905050905081600060028110620002d357fe5b602002015160086000018190555081600160028110620002ef57fe5b6020020151600860010181905550806000600281106200030b57fe5b6020020151600a60000181905550806001600281106200032757fe5b6020020151600a60010181905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015620003ba57600080fd5b505afa158015620003cf573d6000803e3d6000fd5b505050506040513d6020811015620003e657600080fd5b81019080805190602001909291905050506020146200046d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f62697473697a65206e6f7420657175616c00000000000000000000000000000081525060200191505060405180910390fd5b50505050506200049a565b6040518060400160405280600290602082028038833980820191505090505090565b6147ee80620004aa6000396000f3fe608060405260043610610131576000357c0100000000000000000000000000000000000000000000000000000000900480636f203042116100bd578063b8c9d36511610081578063b8c9d36514610c4b578063cff0ab9614610c7d578063d405e5a714610cd4578063e2179b8e14610d64578063ee42cf7314610d9657610131565b80636f203042146107055780638011f7d5146107d857806390d694961461093d578063a67aee1f14610a3a578063b6b799ca14610a9157610131565b8063446546ce11610104578063446546ce1461020e57806348d5754c146103d25780634f93a1441461047a57806354b9d2f31461058e5780635606a4ca146106ac57610131565b80632b7ac3f3146101365780632e52d6061461018d5780633a4f6999146101b85780633e8d3764146101e3575b600080fd5b34801561014257600080fd5b5061014b610e30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019957600080fd5b506101a2610e56565b6040518082815260200191505060405180910390f35b3480156101c457600080fd5b506101cd610e5b565b6040518082815260200191505060405180910390f35b3480156101ef57600080fd5b506101f8610e63565b6040518082815260200191505060405180910390f35b34801561021a57600080fd5b506103b860048036036101a081101561023257600080fd5b810190808035906020019064010000000081111561024f57600080fd5b82018360208201111561026157600080fd5b8035906020019184600183028401116401000000008311171561028357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019064010000000081111561033257600080fd5b82018360208201111561034457600080fd5b8035906020019184600183028401116401000000008311171561036657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610e68565b604051808215151515815260200191505060405180910390f35b3480156103de57600080fd5b50610435600480360360608110156103f557600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611791565b6040518083600460200280838360005b83811015610460578082015181840152602081019050610445565b505050509050018281526020019250505060405180910390f35b34801561048657600080fd5b506105746004803603608081101561049d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156104e457600080fd5b8201836020820111156104f657600080fd5b8035906020019184600183028401116401000000008311171561051857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611858565b604051808215151515815260200191505060405180910390f35b34801561059a57600080fd5b50610692600480360360a08110156105b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561060257600080fd5b82018360208201111561061457600080fd5b8035906020019184600183028401116401000000008311171561063657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611871565b604051808215151515815260200191505060405180910390f35b3480156106b857600080fd5b506106ef600480360360408110156106cf57600080fd5b8101908080359060200190929190803590602001909291905050506120e8565b6040518082815260200191505060405180910390f35b6107be6004803603602081101561071b57600080fd5b810190808035906020019064010000000081111561073857600080fd5b82018360208201111561074a57600080fd5b8035906020019184600183028401116401000000008311171561076c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612117565b604051808215151515815260200191505060405180910390f35b3480156107e457600080fd5b5061089e600480360360208110156107fb57600080fd5b810190808035906020019064010000000081111561081857600080fd5b82018360208201111561082a57600080fd5b8035906020019184600183028401116401000000008311171561084c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061212b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156108e55780820151818401526020810190506108ca565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561092757808201518184015260208101905061090c565b5050505090500194505050505060405180910390f35b610a206004803603606081101561095357600080fd5b810190808035906020019064010000000081111561097057600080fd5b82018360208201111561098257600080fd5b803590602001918460018302840111640100000000831117156109a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612230565b604051808215151515815260200191505060405180910390f35b348015610a4657600080fd5b50610a4f612736565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a9d57600080fd5b50610c316004803603610180811015610ab557600080fd5b8101908080359060200190640100000000811115610ad257600080fd5b820183602082011115610ae457600080fd5b80359060200191846001830284011164010000000083111715610b0657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f820116905080830192505050505050919291929080359060200190640100000000811115610bab57600080fd5b820183602082011115610bbd57600080fd5b80359060200191846001830284011164010000000083111715610bdf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061275c565b604051808215151515815260200191505060405180910390f35b348015610c5757600080fd5b50610c60612773565b604051808381526020018281526020019250505060405180910390f35b348015610c8957600080fd5b50610c92612785565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ce057600080fd5b50610d62600480360360a0811015610cf757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506127ab565b005b348015610d7057600080fd5b50610d79612a80565b604051808381526020018281526020019250505060405180910390f35b348015610da257600080fd5b50610e2e600480360360c0811015610db957600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050612a92565b005b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600581565b602060020a81565b602081565b6000610294855114610ee2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f496e76616c696420706f696e7473206c656e677468000000000000000000000081525060200191505060405180910390fd5b6001600501604202825114610f5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964206c72206c656e67746800000000000000000000000000000081525060200191505060405180910390fd5b610f67614570565b6060610f7287612d7e565b905080600281518110610f8157fe5b602002602001015182600001516000018190525080600581518110610fa257fe5b6020026020010151826000015160200181905250610ff181600081518110610fc657fe5b60200260200101516000015182600081518110610fdf57fe5b60200260200101516020015187612e8a565b826040018190525061102461100d836000015160000151613384565b83604001516000015161341490919063ffffffff16565b82604001516000018190525061105b611044836000015160200151613384565b83604001516020015161341490919063ffffffff16565b82604001516020018190525061106f614617565b826040015160000151600001518160006004811061108957fe5b60200201818152505082604001516000015160200151816001600481106110ac57fe5b60200201818152505082604001516020015160000151816002600481106110cf57fe5b60200201818152505082604001516020015160200151816003600481106110f257fe5b602002018181525050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1a7a0b8898988858860400151604001518c6040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200187600a60200280838360005b838110156111a1578082015181840152602081019050611186565b505050509050018060200186600460200280838360005b838110156111d35780820151818401526020810190506111b8565b50505050905001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561121e578082015181840152602081019050611203565b50505050905090810190601f16801561124b5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b83811015611284578082015181840152602081019050611269565b50505050905090810190601f1680156112b15780820380516001836020036101000a031916815260200191505b509850505050505050505060206040518083038186803b1580156112d457600080fd5b505afa1580156112e8573d6000803e3d6000fd5b505050506040513d60208110156112fe57600080fd5b8101908080519060200190929190505050611381576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7472616e736665722070726f6f667320696e76616c696400000000000000000081525060200191505060405180910390fd5b6113c183604001518360008151811061139657fe5b602002602001015160000151846000815181106113af57fe5b602002602001015160200151896134ac565b816003815181106113ce57fe5b6020026020010151836020015160000181905250816005815181106113ef57fe5b602002602001015183602001516020018190525061144383602001518360018151811061141857fe5b6020026020010151600001518460018151811061143157fe5b602002602001015160200151896139fe565b8160008151811061145057fe5b60200260200101516000015183610100015160006004811061146e57fe5b6020020181815250508160008151811061148457fe5b6020026020010151602001518361010001516001600481106114a257fe5b602002018181525050816001815181106114b857fe5b6020026020010151600001518361010001516002600481106114d657fe5b602002018181525050816001815181106114ec57fe5b60200260200101516020015183610100015160036004811061150a57fe5b6020020181815250508160028151811061152057fe5b60200260200101516000015183610160015160006008811061153e57fe5b6020020181815250508160028151811061155457fe5b60200260200101516020015183610160015160016008811061157257fe5b6020020181815250508160038151811061158857fe5b6020026020010151600001518361016001516002600881106115a657fe5b602002018181525050816003815181106115bc57fe5b6020026020010151602001518361016001516003600881106115da57fe5b602002018181525050816004815181106115f057fe5b60200260200101516000015183610160015160046008811061160e57fe5b6020020181815250508160048151811061162457fe5b60200260200101516020015183610160015160056008811061164257fe5b6020020181815250508160058151811061165857fe5b60200260200101516000015183610160015160066008811061167657fe5b6020020181815250508160058151811061168c57fe5b6020026020010151602001518361016001516007600881106116aa57fe5b6020020181815250508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd8a40c38b0bc7c26155a602a9d2a17ce57fcc5f74ce0dad399d7607b887f701b856101000151866101600151426040518084600460200280838360005b8381101561173a57808201518184015260208101905061171f565b5050505090500183600860200280838360005b8381101561176857808201518184015260208101905061174d565b50505050905001828152602001935050505060405180910390a360019350505050949350505050565b611799614617565b60006117a3614639565b6117c486868673ffffffffffffffffffffffffffffffffffffffff16612e8a565b9050806000015160000151836000600481106117dc57fe5b602002018181525050806000015160200151836001600481106117fb57fe5b6020020181815250508060200151600001518360026004811061181a57fe5b6020020181815250508060200151602001518360036004811061183957fe5b6020020181815250508060400151915082829250925050935093915050565b6000611868856000868686611871565b50949350505050565b600060018410156118ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b60606118f584612d7e565b90506118ff614617565b600061193c8360008151811061191157fe5b6020026020010151600001518460008151811061192a57fe5b6020026020010151602001518a611791565b8092508193505050606060036040519080825280602002602001820160405280156119765781602001602082028038833980820191505090505b509050818160008151811061198757fe5b6020026020010181815250508973ffffffffffffffffffffffffffffffffffffffff16816001815181106119b757fe5b60200260200101818152505088816002815181106119d157fe5b602002602001018181525050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c5c173689898987866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018060200185815260200184600460200280838360005b83811015611a86578082015181840152602081019050611a6b565b5050505090500180602001838103835287818151815260200191508051906020019080838360005b83811015611ac9578082015181840152602081019050611aae565b50505050905090810190601f168015611af65780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019060200280838360005b83811015611b32578082015181840152602081019050611b17565b5050505090500197505050505050505060206040518083038186803b158015611b5a57600080fd5b505afa158015611b6e573d6000803e3d6000fd5b505050506040513d6020811015611b8457600080fd5b8101908080519060200190929190505050611c07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f646c65207369676d6120766572696679206661696c656400000000000000000081525060200191505060405180910390fd5b611c0f614639565b604051806040016040528060008152602001600081525081600001819052506040518060400160405280600081526020016000815250816020018190525082816040018181525050611c938186600081518110611c6857fe5b60200260200101516000015187600081518110611c8157fe5b6020026020010151602001518d6134ac565b60008a1415611de5578a73ffffffffffffffffffffffffffffffffffffffff166108fc600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18d8d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611d7957600080fd5b505afa158015611d8d573d6000803e3d6000fd5b505050506040513d6020811015611da357600080fd5b81019080805190602001909291905050509081150290604051600060405180830381858888f19350505050158015611ddf573d6000803e3d6000fd5b50612016565b8973ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8c600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18e8e6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611ec557600080fd5b505afa158015611ed9573d6000803e3d6000fd5b505050506040513d6020811015611eef57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f8557600080fd5b505af1158015611f99573d6000803e3d6000fd5b505050506040513d6020811015611faf57600080fd5b8101908080519060200190929190505050612015576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806147736022913960400191505060405180910390fd5b5b8973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b98860008151811061208957fe5b602002602001015160000151896001815181106120a257fe5b6020026020010151602001518e426040518085815260200184815260200183815260200182815260200194505050505060405180910390a4505050505095945050505050565b600060076000848152602001908152602001600020600083815260200190815260200160002054905092915050565b600061212582600080612230565b50919050565b606080606061213984612d7e565b90506060815160405190808252806020026020018201604052801561216d5781602001602082028038833980820191505090505b509050606082516040519080825280602002602001820160405280156121a25781602001602082028038833980820191505090505b50905060008090505b8351811015612221578381815181106121c057fe5b6020026020010151600001518382815181106121d857fe5b6020026020010181815250508381815181106121f057fe5b60200260200101516020015182828151811061220857fe5b60200260200101818152505080806001019150506121ab565b50818194509450505050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff16141561235757600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485346040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561231557600080fd5b505afa158015612329573d6000803e3d6000fd5b505050506040513d602081101561233f57600080fd5b81019080805190602001909291905050509050612652565b600034146123cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6465706f73697420746f6b656e20646f6e27742072656365697665206574680081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156124a457600080fd5b505af11580156124b8573d6000803e3d6000fd5b505050506040513d60208110156124ce57600080fd5b8101908080519060200190929190505050612551576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d602081101561263e57600080fd5b810190808051906020019092919050505090505b61265a614666565b61266386613e13565b905061266d614639565b6126778383613eb7565b90506126a381836000015184602001518973ffffffffffffffffffffffffffffffffffffffff166139fe565b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e748460000151856020015187426040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600193505050509392505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061276b8484600085610e68565b509392505050565b60088060000154908060010154905082565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1661284f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70656e64696e6720616c726561647920636c6f7365640000000000000000000081525060200191505060405180910390fd5b60006007600086815260200190815260200160002060008581526020019081526020016000205490508083146128ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b60006129328686866040516020018084815260200183815260200182815260200193505050506040516020818303038152906040528051906020012060019004613fa4565b90506129638187878660006002811061294757fe5b60200201518760016002811061295957fe5b6020020151613fdc565b6129d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269667920636c6f73652070656e64696e6720736967206661696c65640081525060200191505060405180910390fd5b600060036000888152602001908152602001600020600087815260200190815260200160002081905550600060066000888152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550612a506001836140b490919063ffffffff16565b60076000888152602001908152602001600020600087815260200190815260200160002081905550505050505050565b600a8060000154908060010154905082565b60066000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615612b37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70656e64696e6720616c7265616479206f70656e65640000000000000000000081525060200191505060405180910390fd5b6000600760008781526020019081526020016000206000868152602001908152602001600020549050808314612bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b6000612c2287878787604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004613fa4565b9050612c5381888886600060028110612c3757fe5b602002015187600160028110612c4957fe5b6020020151613fdc565b612cc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f766572696679206f70656e2070656e64696e6720736967206661696c6564000081525060200191505060405180910390fd5b6005851015612cd357603294505b8460036000898152602001908152602001600020600088815260200190815260200160002081905550600160066000898152602001908152602001600020600088815260200190815260200160002060006101000a81548160ff021916908315150217905550612d4d6001836140b490919063ffffffff16565b6007600089815260200190815260200160002060008881526020019081526020016000208190555050505050505050565b606060006021835181612d8d57fe5b0614612de4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806147956025913960400191505060405180910390fd5b60006021835181612df157fe5b04905080604051908082528060200260200182016040528015612e2e57816020015b612e1b614680565b815260200190600190039081612e135790505b50915060008090505b81811015612e8057600080612e4c86846140ee565b91509150612e5a81836141a0565b858481518110612e6657fe5b602002602001018190525050508080600101915050612e37565b5081915050919050565b612e92614639565b612e9a614639565b6000808681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060405180606001604052908160008201604051806040016040529081600082015481526020016001820154815250508152602001600282016040518060400160405290816000820154815260200160018201548152505081526020016004820154815250509050612f3d614639565b600160008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060405180606001604052908160008201604051806040016040529081600082015481526020016001820154815250508152602001600282016040518060400160405290816000820154815260200160018201548152505081526020016004820154815250509050612fe1614639565b826040015181604001818152505061300a8260000151846000015161341490919063ffffffff16565b816000018190525061302d8260200151846020015161341490919063ffffffff16565b816020018190525060066000888152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff161580156130b05750600060026000898152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000206002016000015414155b156131a057613122600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060000160405180604001604052908160008201548152602001600182015481525050826000015161341490919063ffffffff16565b8160000181905250613197600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060020160405180604001604052908160008201548152602001600182015481525050826020015161341490919063ffffffff16565b81602001819052505b60066000888152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff16801561321a5750600060026000898152602001908152602001600020600088815260200190815260200160002060008781526020019081526020016000206002016000015414155b8015613287575060056000888152602001908152602001600020600087815260200190815260200160002060008681526020019081526020016000205460036000898152602001908152602001600020600088815260200190815260200160002054438161328457fe5b04115b15613377576132f9600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060000160405180604001604052908160008201548152602001600182015481525050826000015161341490919063ffffffff16565b816000018190525061336e600260008981526020019081526020016000206000888152602001908152602001600020600087815260200190815260200160002060020160405180604001604052908160008201548152602001600182015481525050826020015161341490919063ffffffff16565b81602001819052505b8093505050509392505050565b61338c614666565b600082600001511480156133a4575060008260200151145b156133c7576040518060400160405280600081526020016000815250905061340f565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604051806040016040528084600001518152602001846020015183038152509150505b919050565b61341c614666565b613424614617565b83600001518160006004811061343657fe5b60200201818152505083602001518160016004811061345157fe5b60200201818152505082600001518160026004811061346c57fe5b60200201818152505082602001518160036004811061348757fe5b6020020181815250506040826080836006600019fa6134a557600080fd5b5092915050565b8360008085815260200190815260200160002060008481526020019081526020016000206000838152602001908152602001600020600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000015560208201518160010155505060408201518160040155905050613544600185604001516140b490919063ffffffff16565b600080858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206004018190555060006001600085815260200190815260200160002060008481526020019081526020016000206000838152602001908152602001600020600201600001541461368f576040518060400160405280600081526020016000815250600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040518060400160405280600081526020016000815250600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615801561370a5750600060026000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206002016000015414155b156137dc576040518060400160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040518060400160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16801561387b575060056000848152602001908152602001600020600083815260200190815260200160002060008281526020019081526020016000205460036000858152602001908152602001600020600084815260200190815260200160002054438161387857fe5b04115b156139f8576003600084815260200190815260200160002060008381526020019081526020016000205443816138ad57fe5b046005600085815260200190815260200160002060008481526020019081526020016000206000838152602001908152602001600020819055506000600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160000154146139f7576040518060400160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160008201518160000155602082015181600101559050506040518060400160405280600081526020016000815250600260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060020160008201518160000155602082015181600101559050505b5b50505050565b60066000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16613b1a576000806000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000209050613aa58560000151826000016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b816000016000820151816000015560208201518160010155905050613af98560200151826002016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b81600201600082015181600001556020820151816001015590505050613e0d565b6000600160008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002090506000600260008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002090506000600360008781526020019081526020016000206000868152602001908152602001600020544381613bbb57fe5b049050600560008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002054811415613cab57613c348760000151836000016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b826000016000820151816000015560208201518160010155905050613c888760200151836002016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b826002016000820151816000015560208201518160010155905050505050613e0d565b613d028260000160405180604001604052908160008201548152602001600182015481525050846000016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b836000016000820151816000015560208201518160010155905050613d748260020160405180604001604052908160008201548152602001600182015481525050846002016040518060400160405290816000820154815260200160018201548152505061341490919063ffffffff16565b83600201600082015181600001556020820151816001015590505086600001518260000160008201518160000155602082015181600101559050508660200151826002016000820151816000015560208201518160010155905050806005600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020819055505050505b50505050565b613e1b614666565b6021825114613e92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f696e76616c696420636f6d7072657373656420706f696e7420666f726d61740081525060200191505060405180910390fd5b600080613ea08460006140ee565b91509150613eae81836141a0565b92505050919050565b613ebf614639565b602060020a8310613f38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f616d6f756e74206f7574206f662072616e67650000000000000000000000000081525060200191505060405180910390fd5b613f40614639565b60405180604001604052806000815260200160008152508160000181905250613f9284600a604051806040016040529081600082015481526020016001820154815250506142e090919063ffffffff16565b81602001819052508091505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381613fd357fe5b06915050919050565b6000613fe782614385565b91506000613ffe838861444f90919063ffffffff16565b90506000614015848661444f90919063ffffffff16565b905061401f614666565b61408a6140498360405180604001604052808c81526020018b8152506142e090919063ffffffff16565b61407c856008604051806040016040529081600082015481526020016001820154815250506142e090919063ffffffff16565b61341490919063ffffffff16565b9050858160000151146140a357600093505050506140ab565b600193505050505b95945050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080806140e257fe5b83850891505092915050565b6000806000600160ff16600186602187028151811061410957fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090041660ff16149050600061418f8660016021880201614489565b905081819350935050509250929050565b6141a8614666565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050600081806141d757fe5b858609905081806141e457fe5b8582099050600060039050600083806141f957fe5b82840890506000614218826004600188018161421157fe5b048761449f565b905081858061422357fe5b82830914614299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e76616c696420706f696e743a206e6f74206f6e206375727665000000000081525060200191505060405180910390fd5b604051806040016040528089815260200182815250955060006001808316149050801515881515146142d1576142ce87613384565b96505b86965050505050505092915050565b6142e8614666565b60018214156142f95782905061437f565b60028214156143135761430c8384613414565b905061437f565b61431b61469a565b83600001518160006003811061432d57fe5b60200201818152505083602001518160016003811061434857fe5b602002018181525050828160026003811061435f57fe5b6020020181815250506040826060836007600019fa61437d57600080fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600083905060008114156143c45760009250505061444a565b818111156143d9578181816143d557fe5b0690505b600080600190506000849050600084905060005b60008214614422578183816143fe57fe5b049050838482028603838484028603809550819650829750839850505050506143ed565b600085121561443f5784600003870397505050505050505061444a565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808061447d57fe5b83850991505092915050565b6000808260200184015190508091505092915050565b60006144a96146bc565b6144b16146de565b6020826000600681106144c057fe5b6020020181815250506020826001600681106144d857fe5b6020020181815250506020826002600681106144f057fe5b602002018181525050858260036006811061450757fe5b602002018181525050848260046006811061451e57fe5b602002018181525050838260056006811061453557fe5b60200201818152505060208160c0846005600019fa61455357600080fd5b8060006001811061456057fe5b6020020151925050509392505050565b604051806101800160405280614584614700565b8152602001614591614700565b815260200161459e614700565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016145d661472d565b8152602001600081526020016145ea61472d565b81526020016145f761472d565b815260200161460461472d565b815260200161461161474f565b81525090565b6040518060800160405280600490602082028038833980820191505090505090565b604051806060016040528061464c614680565b8152602001614659614680565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060c00160405280600690602082028038833980820191505090505090565b6040518060200160405280600190602082028038833980820191505090505090565b6040518060600160405280614713614680565b8152602001614720614680565b8152602001600081525090565b6040518060800160405280600490602082028038833980820191505090505090565b60405180610100016040528060089060208202803883398082019150509050509056fe7472616e7366657220746f6b656e206261636b20746f2075736572206661696c6564696e76616c6964206d756c746920636f6d7072657373656420706f696e7420666f726d6174a265627a7a72315820323166c200c5e5ca4e609a60a0e9547b13ee50355ec95770adbd9681e98f272b64736f6c63430005100032",
}

// PgcABI is the input ABI used to generate the binding from.
// Deprecated: Use PgcMetaData.ABI instead.
var PgcABI = PgcMetaData.ABI

// PgcBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PgcMetaData.Bin instead.
var PgcBin = PgcMetaData.Bin

// DeployPgc deploys a new Ethereum contract, binding an instance of Pgc to it.
func DeployPgc(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, verifier_ common.Address, tokenConverter_ common.Address) (common.Address, *types.Transaction, *Pgc, error) {
	parsed, err := PgcMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PgcBin), backend, params_, verifier_, tokenConverter_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// Pgc is an auto generated Go binding around an Ethereum contract.
type Pgc struct {
	PgcCaller     // Read-only binding to the contract
	PgcTransactor // Write-only binding to the contract
	PgcFilterer   // Log filterer for contract events
}

// PgcCaller is an auto generated read-only Go binding around an Ethereum contract.
type PgcCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PgcTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PgcFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PgcSession struct {
	Contract     *Pgc              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PgcCallerSession struct {
	Contract *PgcCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PgcTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PgcTransactorSession struct {
	Contract     *PgcTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcRaw is an auto generated low-level Go binding around an Ethereum contract.
type PgcRaw struct {
	Contract *Pgc // Generic contract binding to access the raw methods on
}

// PgcCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PgcCallerRaw struct {
	Contract *PgcCaller // Generic read-only contract binding to access the raw methods on
}

// PgcTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PgcTransactorRaw struct {
	Contract *PgcTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPgc creates a new instance of Pgc, bound to a specific deployed contract.
func NewPgc(address common.Address, backend bind.ContractBackend) (*Pgc, error) {
	contract, err := bindPgc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pgc{PgcCaller: PgcCaller{contract: contract}, PgcTransactor: PgcTransactor{contract: contract}, PgcFilterer: PgcFilterer{contract: contract}}, nil
}

// NewPgcCaller creates a new read-only instance of Pgc, bound to a specific deployed contract.
func NewPgcCaller(address common.Address, caller bind.ContractCaller) (*PgcCaller, error) {
	contract, err := bindPgc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PgcCaller{contract: contract}, nil
}

// NewPgcTransactor creates a new write-only instance of Pgc, bound to a specific deployed contract.
func NewPgcTransactor(address common.Address, transactor bind.ContractTransactor) (*PgcTransactor, error) {
	contract, err := bindPgc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PgcTransactor{contract: contract}, nil
}

// NewPgcFilterer creates a new log filterer instance of Pgc, bound to a specific deployed contract.
func NewPgcFilterer(address common.Address, filterer bind.ContractFilterer) (*PgcFilterer, error) {
	contract, err := bindPgc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PgcFilterer{contract: contract}, nil
}

// bindPgc binds a generic wrapper to an already deployed contract.
func bindPgc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.PgcCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.PgcTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgc *PgcCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pgc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgc *PgcTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgc *PgcTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgc.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Pgc *PgcCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "bitSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Pgc *PgcSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() view returns(uint256)
func (_Pgc *PgcCallerSession) BitSize() (*big.Int, error) {
	return _Pgc.Contract.BitSize(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "g")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.G(&_Pgc.CallOpts)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Pgc *PgcCaller) GetPendingFunNonce(opts *bind.CallOpts, x *big.Int, y *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "getPendingFunNonce", x, y)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Pgc *PgcSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetPendingFunNonce is a free data retrieval call binding the contract method 0x5606a4ca.
//
// Solidity: function getPendingFunNonce(uint256 x, uint256 y) view returns(uint256)
func (_Pgc *PgcCallerSession) GetPendingFunNonce(x *big.Int, y *big.Int) (*big.Int, error) {
	return _Pgc.Contract.GetPendingFunNonce(&_Pgc.CallOpts, x, y)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCaller) GetUserBalance(opts *bind.CallOpts, x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "getUserBalance", x, y, token)

	outstruct := new(struct {
		Ct    [4]*big.Int
		Nonce *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Ct = *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)
	outstruct.Nonce = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// GetUserBalance is a free data retrieval call binding the contract method 0x48d5754c.
//
// Solidity: function getUserBalance(uint256 x, uint256 y, address token) view returns(uint256[4] ct, uint256 nonce)
func (_Pgc *PgcCallerSession) GetUserBalance(x *big.Int, y *big.Int, token common.Address) (struct {
	Ct    [4]*big.Int
	Nonce *big.Int
}, error) {
	return _Pgc.Contract.GetUserBalance(&_Pgc.CallOpts, x, y, token)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "h")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() view returns(uint256 X, uint256 Y)
func (_Pgc *PgcCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgc.Contract.H(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Pgc *PgcCaller) MaxNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "maxNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Pgc *PgcSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() view returns(uint256)
func (_Pgc *PgcCallerSession) MaxNumber() (*big.Int, error) {
	return _Pgc.Contract.MaxNumber(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Pgc *PgcCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "n")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Pgc *PgcSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() view returns(uint256)
func (_Pgc *PgcCallerSession) N() (*big.Int, error) {
	return _Pgc.Contract.N(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Pgc *PgcCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "params")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Pgc *PgcSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(address)
func (_Pgc *PgcCallerSession) Params() (common.Address, error) {
	return _Pgc.Contract.Params(&_Pgc.CallOpts)
}

// ToPoint is a free data retrieval call binding the contract method 0x8011f7d5.
//
// Solidity: function toPoint(bytes bs) view returns(uint256[], uint256[])
func (_Pgc *PgcCaller) ToPoint(opts *bind.CallOpts, bs []byte) ([]*big.Int, []*big.Int, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "toPoint", bs)

	if err != nil {
		return *new([]*big.Int), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, err

}

// ToPoint is a free data retrieval call binding the contract method 0x8011f7d5.
//
// Solidity: function toPoint(bytes bs) view returns(uint256[], uint256[])
func (_Pgc *PgcSession) ToPoint(bs []byte) ([]*big.Int, []*big.Int, error) {
	return _Pgc.Contract.ToPoint(&_Pgc.CallOpts, bs)
}

// ToPoint is a free data retrieval call binding the contract method 0x8011f7d5.
//
// Solidity: function toPoint(bytes bs) view returns(uint256[], uint256[])
func (_Pgc *PgcCallerSession) ToPoint(bs []byte) ([]*big.Int, []*big.Int, error) {
	return _Pgc.Contract.ToPoint(&_Pgc.CallOpts, bs)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Pgc *PgcCaller) TokenConverter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "tokenConverter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Pgc *PgcSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// TokenConverter is a free data retrieval call binding the contract method 0xa67aee1f.
//
// Solidity: function tokenConverter() view returns(address)
func (_Pgc *PgcCallerSession) TokenConverter() (common.Address, error) {
	return _Pgc.Contract.TokenConverter(&_Pgc.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Pgc *PgcCaller) Verifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Pgc.contract.Call(opts, &out, "verifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Pgc *PgcSession) Verifier() (common.Address, error) {
	return _Pgc.Contract.Verifier(&_Pgc.CallOpts)
}

// Verifier is a free data retrieval call binding the contract method 0x2b7ac3f3.
//
// Solidity: function verifier() view returns(address)
func (_Pgc *PgcCallerSession) Verifier() (common.Address, error) {
	return _Pgc.Contract.Verifier(&_Pgc.CallOpts)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x446546ce.
//
// Solidity: function aggTransfer(bytes points, uint256[10] scalar, uint256 token, bytes lr) returns(bool)
func (_Pgc *PgcTransactor) AggTransfer(opts *bind.TransactOpts, points []byte, scalar [10]*big.Int, token *big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "aggTransfer", points, scalar, token, lr)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x446546ce.
//
// Solidity: function aggTransfer(bytes points, uint256[10] scalar, uint256 token, bytes lr) returns(bool)
func (_Pgc *PgcSession) AggTransfer(points []byte, scalar [10]*big.Int, token *big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, token, lr)
}

// AggTransfer is a paid mutator transaction binding the contract method 0x446546ce.
//
// Solidity: function aggTransfer(bytes points, uint256[10] scalar, uint256 token, bytes lr) returns(bool)
func (_Pgc *PgcTransactorSession) AggTransfer(points []byte, scalar [10]*big.Int, token *big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransfer(&_Pgc.TransactOpts, points, scalar, token, lr)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0xb6b799ca.
//
// Solidity: function aggTransferETH(bytes points, uint256[10] scalar, bytes lr) returns(bool)
func (_Pgc *PgcTransactor) AggTransferETH(opts *bind.TransactOpts, points []byte, scalar [10]*big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "aggTransferETH", points, scalar, lr)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0xb6b799ca.
//
// Solidity: function aggTransferETH(bytes points, uint256[10] scalar, bytes lr) returns(bool)
func (_Pgc *PgcSession) AggTransferETH(points []byte, scalar [10]*big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransferETH(&_Pgc.TransactOpts, points, scalar, lr)
}

// AggTransferETH is a paid mutator transaction binding the contract method 0xb6b799ca.
//
// Solidity: function aggTransferETH(bytes points, uint256[10] scalar, bytes lr) returns(bool)
func (_Pgc *PgcTransactorSession) AggTransferETH(points []byte, scalar [10]*big.Int, lr []byte) (*types.Transaction, error) {
	return _Pgc.Contract.AggTransferETH(&_Pgc.TransactOpts, points, scalar, lr)
}

// Burn is a paid mutator transaction binding the contract method 0x54b9d2f3.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcTransactor) Burn(opts *bind.TransactOpts, receiver common.Address, token *big.Int, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burn", receiver, token, amount, points, z)
}

// Burn is a paid mutator transaction binding the contract method 0x54b9d2f3.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, points, z)
}

// Burn is a paid mutator transaction binding the contract method 0x54b9d2f3.
//
// Solidity: function burn(address receiver, uint256 token, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcTransactorSession) Burn(receiver common.Address, token *big.Int, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.Burn(&_Pgc.TransactOpts, receiver, token, amount, points, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0x4f93a144.
//
// Solidity: function burnETH(address receiver, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcTransactor) BurnETH(opts *bind.TransactOpts, receiver common.Address, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "burnETH", receiver, amount, points, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0x4f93a144.
//
// Solidity: function burnETH(address receiver, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcSession) BurnETH(receiver common.Address, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnETH(&_Pgc.TransactOpts, receiver, amount, points, z)
}

// BurnETH is a paid mutator transaction binding the contract method 0x4f93a144.
//
// Solidity: function burnETH(address receiver, uint256 amount, bytes points, uint256 z) returns(bool)
func (_Pgc *PgcTransactorSession) BurnETH(receiver common.Address, amount *big.Int, points []byte, z *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.BurnETH(&_Pgc.TransactOpts, receiver, amount, points, z)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) ClosePending(opts *bind.TransactOpts, x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "closePending", x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// ClosePending is a paid mutator transaction binding the contract method 0xd405e5a7.
//
// Solidity: function closePending(uint256 x, uint256 y, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) ClosePending(x *big.Int, y *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.ClosePending(&_Pgc.TransactOpts, x, y, nonce, sig)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x90d69496.
//
// Solidity: function depositAccount(bytes publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Pgc *PgcTransactor) DepositAccount(opts *bind.TransactOpts, publicKey []byte, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "depositAccount", publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x90d69496.
//
// Solidity: function depositAccount(bytes publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Pgc *PgcSession) DepositAccount(publicKey []byte, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccount is a paid mutator transaction binding the contract method 0x90d69496.
//
// Solidity: function depositAccount(bytes publicKey, address tokenAddr, uint256 tokenAmount) payable returns(bool)
func (_Pgc *PgcTransactorSession) DepositAccount(publicKey []byte, tokenAddr common.Address, tokenAmount *big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccount(&_Pgc.TransactOpts, publicKey, tokenAddr, tokenAmount)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0x6f203042.
//
// Solidity: function depositAccountETH(bytes publicKey) payable returns(bool)
func (_Pgc *PgcTransactor) DepositAccountETH(opts *bind.TransactOpts, publicKey []byte) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "depositAccountETH", publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0x6f203042.
//
// Solidity: function depositAccountETH(bytes publicKey) payable returns(bool)
func (_Pgc *PgcSession) DepositAccountETH(publicKey []byte) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccountETH(&_Pgc.TransactOpts, publicKey)
}

// DepositAccountETH is a paid mutator transaction binding the contract method 0x6f203042.
//
// Solidity: function depositAccountETH(bytes publicKey) payable returns(bool)
func (_Pgc *PgcTransactorSession) DepositAccountETH(publicKey []byte) (*types.Transaction, error) {
	return _Pgc.Contract.DepositAccountETH(&_Pgc.TransactOpts, publicKey)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactor) OpenPending(opts *bind.TransactOpts, x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.contract.Transact(opts, "openPending", x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// OpenPending is a paid mutator transaction binding the contract method 0xee42cf73.
//
// Solidity: function openPending(uint256 x, uint256 y, uint256 epochLength_, uint256 nonce, uint256[2] sig) returns()
func (_Pgc *PgcTransactorSession) OpenPending(x *big.Int, y *big.Int, epochLength_ *big.Int, nonce *big.Int, sig [2]*big.Int) (*types.Transaction, error) {
	return _Pgc.Contract.OpenPending(&_Pgc.TransactOpts, x, y, epochLength_, nonce, sig)
}

// PgcLogAggTransferIterator is returned from FilterLogAggTransfer and is used to iterate over the raw logs and unpacked data for LogAggTransfer events raised by the Pgc contract.
type PgcLogAggTransferIterator struct {
	Event *PgcLogAggTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogAggTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogAggTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogAggTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogAggTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogAggTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogAggTransfer represents a LogAggTransfer event raised by the Pgc contract.
type PgcLogAggTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct     [8]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogAggTransfer is a free log retrieval operation binding the contract event 0xd8a40c38b0bc7c26155a602a9d2a17ce57fcc5f74ce0dad399d7607b887f701b.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[8] ct, uint256 time)
func (_Pgc *PgcFilterer) FilterLogAggTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogAggTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogAggTransferIterator{contract: _Pgc.contract, event: "LogAggTransfer", logs: logs, sub: sub}, nil
}

// WatchLogAggTransfer is a free log subscription operation binding the contract event 0xd8a40c38b0bc7c26155a602a9d2a17ce57fcc5f74ce0dad399d7607b887f701b.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[8] ct, uint256 time)
func (_Pgc *PgcFilterer) WatchLogAggTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogAggTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogAggTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogAggTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogAggTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAggTransfer is a log parse operation binding the contract event 0xd8a40c38b0bc7c26155a602a9d2a17ce57fcc5f74ce0dad399d7607b887f701b.
//
// Solidity: event LogAggTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[8] ct, uint256 time)
func (_Pgc *PgcFilterer) ParseLogAggTransfer(log types.Log) (*PgcLogAggTransfer, error) {
	event := new(PgcLogAggTransfer)
	if err := _Pgc.contract.UnpackLog(event, "LogAggTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PgcLogBurnIterator is returned from FilterLogBurn and is used to iterate over the raw logs and unpacked data for LogBurn events raised by the Pgc contract.
type PgcLogBurnIterator struct {
	Event *PgcLogBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurn represents a LogBurn event raised by the Pgc contract.
type PgcLogBurn struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurn is a free log retrieval operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurn(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnIterator{contract: _Pgc.contract, event: "LogBurn", logs: logs, sub: sub}, nil
}

// WatchLogBurn is a free log subscription operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurn(opts *bind.WatchOpts, sink chan<- *PgcLogBurn, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurn", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurn)
				if err := _Pgc.contract.UnpackLog(event, "LogBurn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurn is a log parse operation binding the contract event 0xf1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b9.
//
// Solidity: event LogBurn(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) ParseLogBurn(log types.Log) (*PgcLogBurn, error) {
	event := new(PgcLogBurn)
	if err := _Pgc.contract.UnpackLog(event, "LogBurn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PgcLogBurnPartIterator is returned from FilterLogBurnPart and is used to iterate over the raw logs and unpacked data for LogBurnPart events raised by the Pgc contract.
type PgcLogBurnPartIterator struct {
	Event *PgcLogBurnPart // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogBurnPartIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogBurnPart)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogBurnPart)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogBurnPartIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogBurnPartIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogBurnPart represents a LogBurnPart event raised by the Pgc contract.
type PgcLogBurnPart struct {
	Proxy    common.Address
	Receiver common.Address
	Token    common.Address
	Accountx *big.Int
	Accounty *big.Int
	Amount   *big.Int
	Time     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogBurnPart is a free log retrieval operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogBurnPart(opts *bind.FilterOpts, proxy []common.Address, receiver []common.Address, token []common.Address) (*PgcLogBurnPartIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogBurnPartIterator{contract: _Pgc.contract, event: "LogBurnPart", logs: logs, sub: sub}, nil
}

// WatchLogBurnPart is a free log subscription operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogBurnPart(opts *bind.WatchOpts, sink chan<- *PgcLogBurnPart, proxy []common.Address, receiver []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogBurnPart", proxyRule, receiverRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogBurnPart)
				if err := _Pgc.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBurnPart is a log parse operation binding the contract event 0x298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c1.
//
// Solidity: event LogBurnPart(address indexed proxy, address indexed receiver, address indexed token, uint256 accountx, uint256 accounty, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) ParseLogBurnPart(log types.Log) (*PgcLogBurnPart, error) {
	event := new(PgcLogBurnPart)
	if err := _Pgc.contract.UnpackLog(event, "LogBurnPart", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PgcLogDepositAccountIterator is returned from FilterLogDepositAccount and is used to iterate over the raw logs and unpacked data for LogDepositAccount events raised by the Pgc contract.
type PgcLogDepositAccountIterator struct {
	Event *PgcLogDepositAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogDepositAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogDepositAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogDepositAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogDepositAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogDepositAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogDepositAccount represents a LogDepositAccount event raised by the Pgc contract.
type PgcLogDepositAccount struct {
	Proxy  common.Address
	Token  common.Address
	Tox    *big.Int
	Toy    *big.Int
	Amount *big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogDepositAccount is a free log retrieval operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) FilterLogDepositAccount(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogDepositAccountIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogDepositAccountIterator{contract: _Pgc.contract, event: "LogDepositAccount", logs: logs, sub: sub}, nil
}

// WatchLogDepositAccount is a free log subscription operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) WatchLogDepositAccount(opts *bind.WatchOpts, sink chan<- *PgcLogDepositAccount, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogDepositAccount", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogDepositAccount)
				if err := _Pgc.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogDepositAccount is a log parse operation binding the contract event 0x5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74.
//
// Solidity: event LogDepositAccount(address indexed proxy, address indexed token, uint256 tox, uint256 toy, uint256 amount, uint256 time)
func (_Pgc *PgcFilterer) ParseLogDepositAccount(log types.Log) (*PgcLogDepositAccount, error) {
	event := new(PgcLogDepositAccount)
	if err := _Pgc.contract.UnpackLog(event, "LogDepositAccount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PgcLogTransferIterator is returned from FilterLogTransfer and is used to iterate over the raw logs and unpacked data for LogTransfer events raised by the Pgc contract.
type PgcLogTransferIterator struct {
	Event *PgcLogTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PgcLogTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PgcLogTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PgcLogTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PgcLogTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PgcLogTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PgcLogTransfer represents a LogTransfer event raised by the Pgc contract.
type PgcLogTransfer struct {
	Proxy  common.Address
	Token  common.Address
	Fromto [4]*big.Int
	Ct1    [4]*big.Int
	Ct2    [4]*big.Int
	Time   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogTransfer is a free log retrieval operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) FilterLogTransfer(opts *bind.FilterOpts, proxy []common.Address, token []common.Address) (*PgcLogTransferIterator, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.FilterLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &PgcLogTransferIterator{contract: _Pgc.contract, event: "LogTransfer", logs: logs, sub: sub}, nil
}

// WatchLogTransfer is a free log subscription operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) WatchLogTransfer(opts *bind.WatchOpts, sink chan<- *PgcLogTransfer, proxy []common.Address, token []common.Address) (event.Subscription, error) {

	var proxyRule []interface{}
	for _, proxyItem := range proxy {
		proxyRule = append(proxyRule, proxyItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Pgc.contract.WatchLogs(opts, "LogTransfer", proxyRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PgcLogTransfer)
				if err := _Pgc.contract.UnpackLog(event, "LogTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogTransfer is a log parse operation binding the contract event 0x613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185.
//
// Solidity: event LogTransfer(address indexed proxy, address indexed token, uint256[4] fromto, uint256[4] ct1, uint256[4] ct2, uint256 time)
func (_Pgc *PgcFilterer) ParseLogTransfer(log types.Log) (*PgcLogTransfer, error) {
	event := new(PgcLogTransfer)
	if err := _Pgc.contract.UnpackLog(event, "LogTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
