package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray4;
import org.web3j.abi.datatypes.generated.StaticArray5;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class PGC extends Contract {
    private static final String BINARY = "0x60806040526002600a0a600155600154670de0b6b3a76400008115156200002257fe5b046002553480156200003357600080fd5b5060405160a0806200600f833981018060405260a08110156200005557600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505084600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001dd62000538565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200026157600080fd5b505afa15801562000276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200029c57600080fd5b81019080919050509050620002b062000538565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200033457600080fd5b505afa15801562000349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200036f57600080fd5b810190809190505090508160006002811015156200038957fe5b6020020151600360000181905550816001600281101515620003a757fe5b6020020151600360010181905550806000600281101515620003c557fe5b6020020151600560000181905550806001600281101515620003e357fe5b6020020151600560010181905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200047657600080fd5b505afa1580156200048b573d6000803e3d6000fd5b505050506040513d6020811015620004a257600080fd5b810190808051906020019092919050505060101415156200052b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f62697473697a65206e6f7420657175616c00000000000000000000000000000081525060200191505060405180910390fd5b505050505050506200055a565b6040805190810160405280600290602082028038833980820191505090505090565b615aa5806200056a6000396000f3fe6080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063145574b1146101015780632e52d606146102fe578063325a2ee714610329578063361eb4741461047e5780633a4f6999146104d55780633e8d37641461050057806344573fea1461052b57806348d5754c146105d257806359cfef5c1461067357806361e5af5e146107b25780636d90ff4d1461080957806376809ce3146109f257806381b7bc7314610a1d5780638ab813c814610a74578063a67aee1f14610c87578063b8c9d36514610cde578063cff0ab9614610d10578063e2179b8e14610d67575b600080fd5b34801561010d57600080fd5b506102e46004803603610a8081101561012557600080fd5b810190808035906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610d99565b604051808215151515815260200191505060405180910390f35b34801561030a57600080fd5b50610313610f43565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061046460048036036101a081101561034d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610f48565b604051808215151515815260200191505060405180910390f35b34801561048a57600080fd5b50610493611789565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e157600080fd5b506104ea6117af565b6040518082815260200191505060405180910390f35b34801561050c57600080fd5b506105156117b7565b6040518082815260200191505060405180910390f35b6105b86004803603608081101561054157600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117bc565b604051808215151515815260200191505060405180910390f35b3480156105de57600080fd5b50610635600480360360608110156105f557600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dfd565b6040518082600560200280838360005b83811015610660578082015181840152602081019050610645565b5050505090500191505060405180910390f35b34801561067f57600080fd5b5061079860048036036101a081101561069757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611f6b565b604051808215151515815260200191505060405180910390f35b3480156107be57600080fd5b506107c761208b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561081557600080fd5b506109d86004803603610bc081101561082d57600080fd5b81019080806103800190601c806020026040519081016040528092919082601c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506120b1565b604051808215151515815260200191505060405180910390f35b3480156109fe57600080fd5b50610a07613513565b6040518082815260200191505060405180910390f35b348015610a2957600080fd5b50610a32613518565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a8057600080fd5b50610c6d6004803603610a80811015610a9857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929050505061353e565b604051808215151515815260200191505060405180910390f35b348015610c9357600080fd5b50610c9c6149a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cea57600080fd5b50610cf36149c7565b604051808381526020018281526020019250505060405180910390f35b348015610d1c57600080fd5b50610d256149d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d7357600080fd5b50610d7c6149ff565b604051808381526020018281526020019250505060405180910390f35b600080610ed78c8c8c8c8c8c8c8c8c604051602001808a815260200189815260200188815260200187601260200280838360005b83811015610de8578082015181840152602081019050610dcd565b5050505090500186600c60200280838360005b83811015610e16578082015181840152602081019050610dfb565b5050505090500185601060200280838360005b83811015610e44578082015181840152602081019050610e29565b5050505090500184601060200280838360005b83811015610e72578082015181840152602081019050610e57565b5050505090500183601060200280838360005b83811015610ea0578082015181840152602081019050610e85565b5050505090500182815260200199505050505050505050506040516020818303038152906040528051906020012060019004614a11565b9050610f32818a6000601281101515610eec57fe5b60200201518b6001601281101515610f0057fe5b6020020151866000600281101515610f1457fe5b6020020151876001600281101515610f2857fe5b6020020151614a4b565b9150509a9950505050505050505050565b600481565b6000610f708973ffffffffffffffffffffffffffffffffffffffff1689898989898989611f6b565b1515610fe4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f696e76616c69642073696720666f72206275726e74780000000000000000000081525060200191505060405180910390fd5b6001871015151561105d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b600080600088600060028110151561107157fe5b60200201518152602001908152602001600020600088600160028110151561109557fe5b6020020151815260200190815260200160002060008a81526020019081526020016000209050806004015484141515611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b61113e61573b565b611146615858565b82600001604080519081016040529081600082015481526020016001820154815250508160000181905250826002016040805190810160405290816000820154815260200160018201548152505081602001819052506111e38a8260408051908101604052808d60006002811015156111bb57fe5b602002015181526020018d60016002811015156111d457fe5b60200201518152508b8b614b25565b1515611257576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f646c65207369676d6120766572696679206661696c656400000000000000000081525060200191505060405180910390fd5b61129c600060408051908101604052808c600060028110151561127657fe5b602002015181526020018c600160028110151561128f57fe5b6020020151815250614e74565b8260c001819052508160c00151600001518360000160008201518160000155602082015181600101559050508160c001516020015183600201600082015181600001556020820151816001015590505060018601836004018190555060008b141561144a578b73ffffffffffffffffffffffffffffffffffffffff166108fc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18e8e6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d602081101561140857600080fd5b81019080805190602001909291905050509081150290604051600060405180830381858888f19350505050158015611444573d6000803e3d6000fd5b506116c0565b8a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18f8f6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561152a57600080fd5b505afa15801561153e573d6000803e3d6000fd5b505050506040513d602081101561155457600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156115ea57600080fd5b505af11580156115fe573d6000803e3d6000fd5b505050506040513d602081101561161457600080fd5b810190808051906020019092919050505015156116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff1776db8d2226b9f116ce090547ff5d0c60156f48fec212c69ebb6637b7df5b98c600060028110151561173557fe5b60200201518d600160028110151561174957fe5b60200201518f426040518085815260200184815260200183815260200182815260200194505050505060405180910390a450505098975050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060020a81565b601081565b60008060008473ffffffffffffffffffffffffffffffffffffffff1614156118e357600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485346040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156118a157600080fd5b505afa1580156118b5573d6000803e3d6000fd5b505050506040513d60208110156118cb57600080fd5b81019080805190602001909291905050509050611be2565b60003414151561195b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6465706f73697420746f6b656e20646f6e27742072656365697665206574680081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611a3257600080fd5b505af1158015611a46573d6000803e3d6000fd5b505050506040513d6020811015611a5c57600080fd5b81019080805190602001909291905050501515611ae1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219e62d485856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d6020811015611bce57600080fd5b810190808051906020019092919050505090505b6000806000876000600281101515611bf657fe5b602002015181526020019081526020016000206000876001600281101515611c1a57fe5b6020020151815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611c5e615858565b611ca28360408051908101604052808a6000600281101515611c7c57fe5b602002015181526020018a6001600281101515611c9557fe5b6020020151815250614e74565b9050611cdd81600001518360000160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b826000016000820151816000015560208201518160010155905050611d3181602001518360020160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8260020160008201518160000155602082015181600101559050508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5d43e451894cd68afedd40f5aeef95261d8ef8f405463131c9a1eea868541e74896000600281101515611daa57fe5b60200201518a6001600281101515611dbe57fe5b602002015187426040518085815260200184815260200183815260200182815260200194505050505060405180910390a3600193505050509392505050565b611e05615886565b611e0d615858565b600080868152602001908152602001600020600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201604080519081016040529081600082015481526020016001820154815250508152602001600282016040805190810160405290816000820154815260200160018201548152505081526020016004820154815250509050806000015160000151826000600581101515611ed757fe5b602002018181525050806000015160200151826001600581101515611ef857fe5b602002018181525050806020015160000151826002600581101515611f1957fe5b602002018181525050806020015160200151826003600581101515611f3a57fe5b6020020181815250508060400151826004600581101515611f5757fe5b602002018181525050819150509392505050565b6000806120218a8a8a8a8a8a8a6040516020018088815260200187815260200186815260200185600260200280838360005b83811015611fb8578082015181840152602081019050611f9d565b5050505090500184600460200280838360005b83811015611fe6578082015181840152602081019050611fcb565b505050509050018381526020018281526020019750505050505050506040516020818303038152906040528051906020012060019004614a11565b905061207c8188600060028110151561203657fe5b602002015189600160028110151561204a57fe5b602002015186600060028110151561205e57fe5b602002015187600160028110151561207257fe5b6020020151614a4b565b91505098975050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006120c3898989898989898961504b565b1515612137576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f76657269667920736967206661696c656420666f72207472616e73666572747881525060200191505060405180910390fd5b60008060008b6000601c8110151561214b57fe5b6020020151815260200190815260200160002060008b6001601c8110151561216f57fe5b6020020151815260200190815260200160002060008681526020019081526020016000209050806004015484141515612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b61221861573b565b60008160000181815250505b60148160000151101561227c578a8160000151601c8110151561224357fe5b60200201518160200151826000015160148110151561225e57fe5b60200201818152505080600001805180919060010181525050612224565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e26cc3182602001518c6000600e811015156122ce57fe5b60200201518d6001600e811015156122e257fe5b60200201518e6002600e811015156122f657fe5b60200201516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085601460200280838360005b83811015612351578082015181840152602081019050612336565b5050505090500184815260200183815260200182815260200194505050505060206040518083038186803b15801561238857600080fd5b505afa15801561239c573d6000803e3d6000fd5b505050506040513d60208110156123b257600080fd5b81019080805190602001909291905050501515612437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7369676d6120766572696679206661696c65640000000000000000000000000081525060200191505060405180910390fd5b60408051908101604052808c6002601c8110151561245157fe5b602002015181526020018c6003601c8110151561246a57fe5b602002015181525081604001516000018190525060408051908101604052808c6004601c8110151561249857fe5b602002015181526020018c6005601c811015156124b157fe5b602002015181525081604001516020018190525060008160000181815250505b60048160000151101561252c578a8160000151600201601c811015156124f357fe5b60200201518160800151826000015160048110151561250e57fe5b602002018181525050806000018051809190600101815250506124d1565b6125716125408260400151600001516151e3565b8360000160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160c00151600001819052506125c26125918260400151602001516151e3565b8360020160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160c001516020018190525060408051908101604052808c6014601c811015156125e857fe5b602002015181526020018c6015601c8110151561260157fe5b60200201518152508160e001516000018190525060408051908101604052808c6016601c8110151561262f57fe5b602002015181526020018c6017601c8110151561264857fe5b60200201518152508160e001516020018190525060408051908101604052808c6018601c8110151561267657fe5b602002015181526020018c6019601c8110151561268f57fe5b602002015181525081610100015160006002811015156126ab57fe5b602002018190525060408051908101604052808c601a601c811015156126cd57fe5b602002015181526020018c601b601c811015156126e657fe5b6020020151815250816101000151600160028110151561270257fe5b602002018190525061275e8160c001518260e001518361010001518e6000601c8110151561272c57fe5b60200201518f6001601c8110151561274057fe5b60200201518f6003600e8110151561275457fe5b6020020151615273565b15156127d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f646c65207369676d612070726f6f66206661696c65640000000000000000000081525060200191505060405180910390fd5b60008160000181815250505b600881600001511015612837578881600001516010811015156127fd57fe5b6020020151816101c001518260000151600a8110151561281957fe5b602002018181525050806000018051809190600101815250506127de565b8a6004601c8110151561284657fe5b6020020151816101c001516008600a8110151561285f57fe5b6020020181815250508a6005601c8110151561287757fe5b6020020151816101c001516009600a8110151561289057fe5b60200201818152505060008160000181815250505b600460020281600001511015612938578781600001516010811015156128c757fe5b602002015181610200015182600001516008811015156128e357fe5b6020020181815250508681600001516010811015156128fe57fe5b6020020151816102200151826000015160088110151561291a57fe5b602002018181525050806000018051809190600101815250506128a5565b60008160000181815250505b6005816000015110156129a057898160000151600401600e8110151561296657fe5b6020020151816101e00151826000015160058110151561298257fe5b60200201818152505080600001805180919060010181525050612944565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101c00151836101e001518461020001518561022001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015612a4c578082015181840152602081019050612a31565b5050505090500184600560200280838360005b83811015612a7a578082015181840152602081019050612a5f565b5050505090500183600860200280838360005b83811015612aa8578082015181840152602081019050612a8d565b5050505090500182600860200280838360005b83811015612ad6578082015181840152602081019050612abb565b5050505090500194505050505060206040518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d6020811015612b2557600080fd5b81019080805190602001909291905050501515612baa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f72616e67652070726f6f662031206661696c656400000000000000000000000081525060200191505060405180910390fd5b60008160000181815250505b600881600001511015612c1257888160000151600801601081101515612bd857fe5b6020020151816101c001518260000151600a81101515612bf457fe5b60200201818152505080600001805180919060010181525050612bb6565b8a6016601c81101515612c2157fe5b6020020151816101c001516008600a81101515612c3a57fe5b6020020181815250508a6017601c81101515612c5257fe5b6020020151816101c001516009600a81101515612c6b57fe5b60200201818152505060008160000181815250505b600460020281600001511015612d1f57876004600202826000015101601081101515612ca857fe5b60200201518161020001518260000151600881101515612cc457fe5b602002018181525050866004600202826000015101601081101515612ce557fe5b60200201518161022001518260000151600881101515612d0157fe5b60200201818152505080600001805180919060010181525050612c80565b60008160000181815250505b600581600001511015612d8757898160000151600901600e81101515612d4d57fe5b6020020151816101e001518260000151600581101515612d6957fe5b60200201818152505080600001805180919060010181525050612d2b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101c00151836101e001518461020001518561022001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015612e33578082015181840152602081019050612e18565b5050505090500184600560200280838360005b83811015612e61578082015181840152602081019050612e46565b5050505090500183600860200280838360005b83811015612e8f578082015181840152602081019050612e74565b5050505090500182600860200280838360005b83811015612ebd578082015181840152602081019050612ea2565b5050505090500194505050505060206040518083038186803b158015612ee257600080fd5b505afa158015612ef6573d6000803e3d6000fd5b505050506040513d6020811015612f0c57600080fd5b81019080805190602001909291905050501515612f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f72616e67652070726f6f66203220766572696679206661696c6564000000000081525060200191505060405180910390fd5b8060c00151600001518260000160008201518160000155602082015181600101559050508060c001516020015182600201600082015181600001556020820151816001015590505060018501826004018190555060008060008d6006601c81101515612ff957fe5b6020020151815260200190815260200160002060008d6007601c8110151561301d57fe5b602002015181526020019081526020016000206000888152602001908152602001600020905060408051908101604052808d6008601c8110151561305d57fe5b602002015181526020018d6009601c8110151561307657fe5b602002015181525082606001516000018190525060408051908101604052808d600a601c811015156130a457fe5b602002015181526020018d600b601c811015156130bd57fe5b602002015181525082606001516020018190525060008260000181815250505b600482600001511015613138578b8260000151600801601c811015156130ff57fe5b60200201518260a00151836000015160048110151561311a57fe5b602002018181525050816000018051809190600101815250506130dd565b6131758260600151600001518260000160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160000160008201518160000155602082015181600101559050506131cd8260600151602001518260020160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160020160008201518160000155602082015181600101559050508b6000601c811015156131f757fe5b6020020151826102400151600060048110151561321057fe5b6020020181815250508b6001601c8110151561322857fe5b6020020151826102400151600160048110151561324157fe5b6020020181815250508b6006601c8110151561325957fe5b6020020151826102400151600260048110151561327257fe5b6020020181815250508b6007601c8110151561328a57fe5b602002015182610240015160036004811015156132a357fe5b6020020181815250508160400151600001516000015182610260015160006004811015156132cd57fe5b6020020181815250508160400151600001516020015182610260015160016004811015156132f757fe5b60200201818152505081604001516020015160000151826102600151600260048110151561332157fe5b60200201818152505081604001516020015160200151826102600151600360048110151561334b57fe5b60200201818152505081606001516000015160000151826102800151600060048110151561337557fe5b60200201818152505081606001516000015160200151826102800151600160048110151561339f57fe5b6020020181815250508160600151602001516000015182610280015160026004811015156133c957fe5b6020020181815250508160600151602001516020015182610280015160036004811015156133f357fe5b6020020181815250508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f613fbb0c09c5fc2b10aa5faeb0f834622389734e79cdf4c3361603b8ab984185846102400151856102600151866102800151426040518085600460200280838360005b8381101561348957808201518184015260208101905061346e565b5050505090500184600460200280838360005b838110156134b757808201518184015260208101905061349c565b5050505090500183600460200280838360005b838110156134e55780820151818401526020810190506134ca565b5050505090500182815260200194505050505060405180910390a36001935050505098975050505050505050565b600281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600189101515156135b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b6135e18b73ffffffffffffffffffffffffffffffffffffffff168b8b8b8b8b8b8b8b8b610d99565b1515613655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269667920736967206661696c656420666f72206275726e20706172740081525060200191505060405180910390fd5b60008060008a600060128110151561366957fe5b6020020151815260200190815260200160002060008a600160128110151561368d57fe5b6020020151815260200190815260200160002060008c8152602001908152602001600020905080600401548414151561372e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b61373661573b565b60408051908101604052808b600260128110151561375057fe5b602002015181526020018b600360128110151561376957fe5b602002015181525081604001516000018190525060408051908101604052808b600460128110151561379757fe5b602002015181526020018b60056012811015156137b057fe5b602002015181525081604001516020018190525089600a6012811015156137d357fe5b6020020151816101a0015160006004811015156137ec57fe5b60200201818152505089600b60128110151561380457fe5b6020020151816101a00151600160048110151561381d57fe5b60200201818152505089600c60128110151561383557fe5b6020020151816101a00151600260048110151561384e57fe5b60200201818152505089600d60128110151561386657fe5b6020020151816101a00151600360048110151561387f57fe5b6020020181815250506138eb8b826040015160408051908101604052808e60006012811015156138ab57fe5b602002015181526020018e60016012811015156138c457fe5b6020020151815250846101a001518d6000600c811015156138e157fe5b6020020151614b25565b151561395f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f646c65207369676d612070726f6f662031206661696c6564000000000000000081525060200191505060405180910390fd5b60408051908101604052808b600260128110151561397957fe5b602002015181526020018b600360128110151561399257fe5b602002015181525081604001516000018190525060408051908101604052808b60046012811015156139c057fe5b602002015181526020018b60056012811015156139d957fe5b6020020151815250816040015160200181905250613a32613a018260400151600001516151e3565b8360000160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160c0015160000181905250613a83613a528260400151602001516151e3565b8360020160408051908101604052908160008201548152602001600182015481525050614fa990919063ffffffff16565b8160c001516020018190525060408051908101604052808b6006601281101515613aa957fe5b602002015181526020018b6007601281101515613ac257fe5b60200201518152508160e001516000018190525060408051908101604052808b6008601281101515613af057fe5b602002015181526020018b6009601281101515613b0957fe5b60200201518152508160e001516020018190525060408051908101604052808b600e601281101515613b3757fe5b602002015181526020018b600f601281101515613b5057fe5b60200201518152508161010001516000600281101515613b6c57fe5b602002018190525060408051908101604052808b6010601281101515613b8e57fe5b602002015181526020018b6011601281101515613ba757fe5b60200201518152508161010001516001600281101515613bc357fe5b6020020181905250613c1f8160c001518260e001518361010001518d6000601281101515613bed57fe5b60200201518e6001601281101515613c0157fe5b60200201518e6001600c81101515613c1557fe5b6020020151615273565b1515613c93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f646c65207369676d612070726f6f662032206661696c6564000000000000000081525060200191505060405180910390fd5b60008160000181815250505b600881600001511015613cf857878160000151601081101515613cbe57fe5b6020020151816101c001518260000151600a81101515613cda57fe5b60200201818152505080600001805180919060010181525050613c9f565b896004601281101515613d0757fe5b6020020151816101c001516008600a81101515613d2057fe5b602002018181525050896005601281101515613d3857fe5b6020020151816101c001516009600a81101515613d5157fe5b60200201818152505060008160000181815250505b600460020281600001511015613df957868160000151601081101515613d8857fe5b60200201518161020001518260000151600881101515613da457fe5b602002018181525050858160000151601081101515613dbf57fe5b60200201518161022001518260000151600881101515613ddb57fe5b60200201818152505080600001805180919060010181525050613d66565b60008160000181815250505b600581600001511015613e6157886002826000015101600c81101515613e2757fe5b6020020151816101e001518260000151600581101515613e4357fe5b60200201818152505080600001805180919060010181525050613e05565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101c00151836101e001518461020001518561022001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015613f0d578082015181840152602081019050613ef2565b5050505090500184600560200280838360005b83811015613f3b578082015181840152602081019050613f20565b5050505090500183600860200280838360005b83811015613f69578082015181840152602081019050613f4e565b5050505090500182600860200280838360005b83811015613f97578082015181840152602081019050613f7c565b5050505090500194505050505060206040518083038186803b158015613fbc57600080fd5b505afa158015613fd0573d6000803e3d6000fd5b505050506040513d6020811015613fe657600080fd5b8101908080519060200190929190505050151561406b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f72616e67652070726f6f662031206661696c656400000000000000000000000081525060200191505060405180910390fd5b60008160000181815250505b6008816000015110156140d35787816000015160080160108110151561409957fe5b6020020151816101c001518260000151600a811015156140b557fe5b60200201818152505080600001805180919060010181525050614077565b8960086012811015156140e257fe5b6020020151816101c001516008600a811015156140fb57fe5b60200201818152505089600960128110151561411357fe5b6020020151816101c001516009600a8110151561412c57fe5b60200201818152505060008160000181815250505b6004600202816000015110156141e05786600460020282600001510160108110151561416957fe5b6020020151816102000151826000015160088110151561418557fe5b6020020181815250508560046002028260000151016010811015156141a657fe5b602002015181610220015182600001516008811015156141c257fe5b60200201818152505080600001805180919060010181525050614141565b60008160000181815250505b60058160000151101561424857888160000151600701600c8110151561420e57fe5b6020020151816101e00151826000015160058110151561422a57fe5b602002018181525050806000018051809190600101815250506141ec565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101c00151836101e001518461020001518561022001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b838110156142f45780820151818401526020810190506142d9565b5050505090500184600560200280838360005b83811015614322578082015181840152602081019050614307565b5050505090500183600860200280838360005b83811015614350578082015181840152602081019050614335565b5050505090500182600860200280838360005b8381101561437e578082015181840152602081019050614363565b5050505090500194505050505060206040518083038186803b1580156143a357600080fd5b505afa1580156143b7573d6000803e3d6000fd5b505050506040513d60208110156143cd57600080fd5b81019080805190602001909291905050501515614452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f72616e67652070726f6f66203220766572696679206661696c6564000000000081525060200191505060405180910390fd5b8060c00151600001518260000160008201518160000155602082015181600101559050508060c00151602001518260020160008201518160000155602082015181600101559050506001850182600401819055508b81610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508a8161018001818152505060008c141561463d578c73ffffffffffffffffffffffffffffffffffffffff166108fc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d160008f6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156145d157600080fd5b505afa1580156145e5573d6000803e3d6000fd5b505050506040513d60208110156145fb57600080fd5b81019080805190602001909291905050509081150290604051600060405180830381858888f19350505050158015614637573d6000803e3d6000fd5b506148cd565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c95c2d18261014001518d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561470557600080fd5b505afa158015614719573d6000803e3d6000fd5b505050506040513d602081101561472f57600080fd5b81019080805190602001909291905050508161016001818152505080610140015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8e8361016001516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156147f757600080fd5b505af115801561480b573d6000803e3d6000fd5b505050506040513d602081101561482157600080fd5b810190808051906020019092919050505015156148cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b80610140015173ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f298fd09eb9eac2baeeba7efdab3ea6c14572f5a3f57a9510be2f36b7d11675c18d600060128110151561494757fe5b60200201518e600160128110151561495b57fe5b6020020151866101800151426040518085815260200184815260200183815260200182815260200194505050505060405180910390a450509a9950505050505050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038060000154908060010154905082565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058060000154908060010154905082565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508083811515614a4257fe5b06915050919050565b6000614a5682615582565b91506000614a6d838861565290919063ffffffff16565b90506000614a84848661565290919063ffffffff16565b9050614a8e6158a9565b614af9614ab88360408051908101604052808c81526020018b81525061568e90919063ffffffff16565b614aeb8560036040805190810160405290816000820154815260200160018201548152505061568e90919063ffffffff16565b614fa990919063ffffffff16565b9050858160000151141515614b145760009350505050614b1c565b600193505050505b95945050505050565b6000614b2f6158a9565b614b80614b6d614b688960056040805190810160405290816000820154815260200160018201548152505061568e90919063ffffffff16565b6151e3565b8760200151614fa990919063ffffffff16565b9050614b8a61573b565b846000600481101515614b9957fe5b60200201518161012001516000600c81101515614bb257fe5b602002018181525050846001600481101515614bca57fe5b60200201518161012001516001600c81101515614be357fe5b602002018181525050846002600481101515614bfb57fe5b60200201518161012001516002600c81101515614c1457fe5b602002018181525050846003600481101515614c2c57fe5b60200201518161012001516003600c81101515614c4557fe5b60200201818152505081600001518161012001516004600c81101515614c6757fe5b60200201818152505081602001518161012001516005600c81101515614c8957fe5b6020020181815250508660000151600001518161012001516006600c81101515614caf57fe5b6020020181815250508660000151602001518161012001516007600c81101515614cd557fe5b6020020181815250506003600001548161012001516008600c81101515614cf857fe5b6020020181815250506003600101548161012001516009600c81101515614d1b57fe5b6020020181815250508560000151816101200151600a600c81101515614d3d57fe5b6020020181815250508560200151816101200151600b600c81101515614d5f57fe5b602002018181525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb13826101200151866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b83811015614e03578082015181840152602081019050614de8565b505050509050018281526020019250505060206040518083038186803b158015614e2c57600080fd5b505afa158015614e40573d6000803e3d6000fd5b505050506040513d6020811015614e5657600080fd5b81019080805190602001909291905050509250505095945050505050565b614e7c615858565b601060020a83101515614ef7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f616d6f756e74206f7574206f662072616e67650000000000000000000000000081525060200191505060405180910390fd5b6000809050614f04615858565b614f17828561568e90919063ffffffff16565b8160000181905250614f96614f558360036040805190810160405290816000820154815260200160018201548152505061568e90919063ffffffff16565b614f888760056040805190810160405290816000820154815260200160018201548152505061568e90919063ffffffff16565b614fa990919063ffffffff16565b8160200181905250809250505092915050565b614fb16158a9565b614fb96158c3565b8360000151816000600481101515614fcd57fe5b6020020181815250508360200151816001600481101515614fea57fe5b602002018181525050826000015181600260048110151561500757fe5b602002018181525050826020015181600360048110151561502457fe5b6020020181815250506040826080836006600019fa151561504457600080fd5b5092915050565b6000806151798a8a8a8a8a8a8a6040516020018088601c60200280838360005b8381101561508657808201518184015260208101905061506b565b5050505090500187600e60200280838360005b838110156150b4578082015181840152602081019050615099565b5050505090500186601060200280838360005b838110156150e25780820151818401526020810190506150c7565b5050505090500185601060200280838360005b838110156151105780820151818401526020810190506150f5565b5050505090500184601060200280838360005b8381101561513e578082015181840152602081019050615123565b505050509050018381526020018281526020019750505050505050506040516020818303038152906040528051906020012060019004614a11565b90506151d4818b6000601c8110151561518e57fe5b60200201518c6001601c811015156151a257fe5b60200201518660006002811015156151b657fe5b60200201518760016002811015156151ca57fe5b6020020151614a4b565b91505098975050505050505050565b6151eb6158a9565b60008260000151148015615203575060008260200151145b15615226576040805190810160405280600081526020016000815250905061526e565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b600061527d6158a9565b6152a061528d89602001516151e3565b8860200151614fa990919063ffffffff16565b90506152aa6158a9565b6152cd6152ba8a600001516151e3565b8960000151614fa990919063ffffffff16565b90506152d76158e6565b8760006002811015156152e657fe5b602002015160000151816000600c811015156152fe57fe5b60200201818152505087600060028110151561531657fe5b602002015160200151816001600c8110151561532e57fe5b60200201818152505087600160028110151561534657fe5b602002015160000151816002600c8110151561535e57fe5b60200201818152505087600160028110151561537657fe5b602002015160200151816003600c8110151561538e57fe5b6020020181815250508260000151816004600c811015156153ab57fe5b6020020181815250508260200151816005600c811015156153c857fe5b6020020181815250508160000151816006600c811015156153e557fe5b6020020181815250508160200151816007600c8110151561540257fe5b602002018181525050600360000154816008600c8110151561542057fe5b602002018181525050600360010154816009600c8110151561543e57fe5b6020020181815250508681600a600c8110151561545757fe5b6020020181815250508581600b600c8110151561547057fe5b602002018181525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb1382876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b8381101561550f5780820151818401526020810190506154f4565b505050509050018281526020019250505060206040518083038186803b15801561553857600080fd5b505afa15801561554c573d6000803e3d6000fd5b505050506040513d602081101561556257600080fd5b810190808051906020019092919050505093505050509695505050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600083905060008114156155c15760009250505061564d565b818111156155d85781818115156155d457fe5b0690505b600080600190506000849050600084905060005b60008214151561562557818381151561560157fe5b049050838482028603838484028603809550819650829750839850505050506155ec565b60008512156156425784600003870397505050505050505061564d565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561568257fe5b83850991505092915050565b6156966158a9565b60018214156156a757829050615735565b60028214156156c1576156ba8384614fa9565b9050615735565b6156c961590a565b83600001518160006003811015156156dd57fe5b60200201818152505083602001518160016003811015156156fa57fe5b6020020181815250508281600260038110151561571357fe5b6020020181815250506040826060836007600019fa151561573357600080fd5b505b92915050565b610e60604051908101604052806000815260200161575761592d565b8152602001615764615951565b8152602001615771615951565b815260200161577e61597f565b815260200161578b61597f565b8152602001615798615951565b81526020016157a5615951565b81526020016157b26159a2565b81526020016157bf6159d0565b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016157f761597f565b81526020016158046159f4565b8152602001615811615a18565b815260200161581e615a3b565b815260200161582b615a3b565b815260200161583861597f565b815260200161584561597f565b815260200161585261597f565b81525090565b60a06040519081016040528061586c615a5f565b8152602001615879615a5f565b8152602001600081525090565b60a060405190810160405280600590602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b61018060405190810160405280600c90602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b61028060405190810160405280601490602082028038833980820191505090505090565b60a060405190810160405280615965615a5f565b8152602001615972615a5f565b8152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b6080604051908101604052806002905b6159ba615a5f565b8152602001906001900390816159b25790505090565b61018060405190810160405280600c90602082028038833980820191505090505090565b61014060405190810160405280600a90602082028038833980820191505090505090565b60a060405190810160405280600590602082028038833980820191505090505090565b61010060405190810160405280600890602082028038833980820191505090505090565b60408051908101604052806000815260200160008152509056fea165627a7a7230582096fb10c3eacac491c334c27d6be783a7273f65907e8b510c95e67c1455a338930029";

    public static final String FUNC_N = "n";

    public static final String FUNC_DLESIGMAVERIFIER = "dleSigmaVerifier";

    public static final String FUNC_MAXNUMBER = "maxNumber";

    public static final String FUNC_BITSIZE = "bitSize";

    public static final String FUNC_RANGEPROOFVERIFIER = "rangeProofVerifier";

    public static final String FUNC_DECIMAL = "decimal";

    public static final String FUNC_SIGMAVERIFIER = "sigmaVerifier";

    public static final String FUNC_TOKENCONVERTER = "tokenConverter";

    public static final String FUNC_H = "h";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_G = "g";

    public static final String FUNC_DEPOSITACCOUNT = "depositAccount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_BURNPART = "burnPart";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_VERIFYBURNPARTSIG = "verifyBurnPartSig";

    public static final String FUNC_VERIFYBURNSIG = "verifyBurnSig";

    public static final Event LOGDEPOSITACCOUNT_EVENT = new Event("LogDepositAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGTRANSFER_EVENT = new Event("LogTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURN_EVENT = new Event("LogBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURNPART_EVENT = new Event("LogBurnPart", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> n() {
        final Function function = new Function(FUNC_N, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dleSigmaVerifier() {
        final Function function = new Function(FUNC_DLESIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> maxNumber() {
        final Function function = new Function(FUNC_MAXNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> bitSize() {
        final Function function = new Function(FUNC_BITSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> rangeProofVerifier() {
        final Function function = new Function(FUNC_RANGEPROOFVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> decimal() {
        final Function function = new Function(FUNC_DECIMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> sigmaVerifier() {
        final Function function = new Function(FUNC_SIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> tokenConverter() {
        final Function function = new Function(FUNC_TOKENCONVERTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LogDepositAccountEventResponse> getLogDepositAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogDepositAccountEventResponse> responses = new ArrayList<LogDepositAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogDepositAccountEventResponse>() {
            @Override
            public LogDepositAccountEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, log);
                LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGDEPOSITACCOUNT_EVENT));
        return logDepositAccountEventObservable(filter);
    }

    public List<LogTransferEventResponse> getLogTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTRANSFER_EVENT, transactionReceipt);
        ArrayList<LogTransferEventResponse> responses = new ArrayList<LogTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTransferEventResponse typedResponse = new LogTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ct1 = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ct2 = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogTransferEventResponse>() {
            @Override
            public LogTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTRANSFER_EVENT, log);
                LogTransferEventResponse typedResponse = new LogTransferEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ct1 = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.ct2 = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTRANSFER_EVENT));
        return logTransferEventObservable(filter);
    }

    public List<LogBurnEventResponse> getLogBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURN_EVENT, transactionReceipt);
        ArrayList<LogBurnEventResponse> responses = new ArrayList<LogBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnEventResponse typedResponse = new LogBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnEventResponse>() {
            @Override
            public LogBurnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURN_EVENT, log);
                LogBurnEventResponse typedResponse = new LogBurnEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURN_EVENT));
        return logBurnEventObservable(filter);
    }

    public List<LogBurnPartEventResponse> getLogBurnPartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURNPART_EVENT, transactionReceipt);
        ArrayList<LogBurnPartEventResponse> responses = new ArrayList<LogBurnPartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnPartEventResponse>() {
            @Override
            public LogBurnPartEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURNPART_EVENT, log);
                LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURNPART_EVENT));
        return logBurnPartEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> depositAccount(List<BigInteger> publicKey, String tokenAddr, BigInteger tokenAmount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(tokenAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> transfer(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger token, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray28<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getUserBalance(BigInteger x, BigInteger y, String token) {
        final Function function = new Function(FUNC_GETUSERBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y), 
                new org.web3j.abi.datatypes.Address(token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray5<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> burnPart(String receiver, BigInteger token, BigInteger amount, List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_BURNPART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray18<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(String receiver, BigInteger token, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifyBurnPartSig(BigInteger receiver, BigInteger token, BigInteger amount, List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(FUNC_VERIFYBURNPARTSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray18<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verifyBurnSig(BigInteger receiver, BigInteger token, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(FUNC_VERIFYBURNSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class LogDepositAccountEventResponse {
        public Log log;

        public String proxy;

        public String token;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogTransferEventResponse {
        public Log log;

        public String proxy;

        public String token;

        public List<BigInteger> fromto;

        public List<BigInteger> ct1;

        public List<BigInteger> ct2;

        public BigInteger time;
    }

    public static class LogBurnEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public String token;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogBurnPartEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public String token;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }
}
