package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray5;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class PGC extends Contract {
    private static final String BINARY = "0x60806040526002600a0a600155600154670de0b6b3a76400008115156200002257fe5b046002553480156200003357600080fd5b50604051608080620055db833981018060405260808110156200005557600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505083600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000192620004ec565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200021657600080fd5b505afa1580156200022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200025157600080fd5b8101908091905050905062000265620004ec565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620002e957600080fd5b505afa158015620002fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200032457600080fd5b810190809190505090508160006002811015156200033e57fe5b60200201516003600001819055508160016002811015156200035c57fe5b60200201516003600101819055508060006002811015156200037a57fe5b60200201516005600001819055508060016002811015156200039857fe5b6020020151600560010181905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200042b57600080fd5b505afa15801562000440573d6000803e3d6000fd5b505050506040513d60208110156200045757600080fd5b81019080805190602001909291905050506010141515620004e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f62697473697a65206e6f7420657175616c00000000000000000000000000000081525060200191505060405180910390fd5b5050505050506200050e565b6040805190810160405280600290602082028038833980820191505090505090565b6150bd806200051e6000396000f3fe6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063145574b1146100eb5780632e52d606146102e8578063325a2ee714610313578063361eb474146104685780633e8d3764146104bf57806344573fea146104ea57806348d5754c1461059157806359cfef5c1461063257806361e5af5e146107715780636d90ff4d146107c857806376809ce3146109b157806381b7bc73146109dc5780638ab813c814610a33578063b8c9d36514610c46578063cff0ab9614610c78578063e2179b8e14610ccf575b600080fd5b3480156100f757600080fd5b506102ce6004803603610a8081101561010f57600080fd5b810190808035906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610d01565b604051808215151515815260200191505060405180910390f35b3480156102f457600080fd5b506102fd610eab565b6040518082815260200191505060405180910390f35b34801561031f57600080fd5b5061044e60048036036101a081101561033757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610eb0565b604051808215151515815260200191505060405180910390f35b34801561047457600080fd5b5061047d6114e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104cb57600080fd5b506104d461150a565b6040518082815260200191505060405180910390f35b6105776004803603608081101561050057600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061150f565b604051808215151515815260200191505060405180910390f35b34801561059d57600080fd5b506105f4600480360360608110156105b457600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ac1565b6040518082600560200280838360005b8381101561061f578082015181840152602081019050610604565b5050505090500191505060405180910390f35b34801561063e57600080fd5b5061075760048036036101a081101561065657600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611c2f565b604051808215151515815260200191505060405180910390f35b34801561077d57600080fd5b50610786611d4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d457600080fd5b506109976004803603610bc08110156107ec57600080fd5b81019080806103800190601c806020026040519081016040528092919082601c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050611d75565b604051808215151515815260200191505060405180910390f35b3480156109bd57600080fd5b506109c6612ebf565b6040518082815260200191505060405180910390f35b3480156109e857600080fd5b506109f1612ec4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a3f57600080fd5b50610c2c6004803603610a80811015610a5757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908061024001906012806020026040519081016040528092919082601260200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050612eea565b604051808215151515815260200191505060405180910390f35b348015610c5257600080fd5b50610c5b614031565b604051808381526020018281526020019250505060405180910390f35b348015610c8457600080fd5b50610c8d614043565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610cdb57600080fd5b50610ce4614069565b604051808381526020018281526020019250505060405180910390f35b600080610e3f8c8c8c8c8c8c8c8c8c604051602001808a815260200189815260200188815260200187601260200280838360005b83811015610d50578082015181840152602081019050610d35565b5050505090500186600c60200280838360005b83811015610d7e578082015181840152602081019050610d63565b5050505090500185601060200280838360005b83811015610dac578082015181840152602081019050610d91565b5050505090500184601060200280838360005b83811015610dda578082015181840152602081019050610dbf565b5050505090500183601060200280838360005b83811015610e08578082015181840152602081019050610ded565b505050509050018281526020019950505050505050505050604051602081830303815290604052805190602001206001900461407b565b9050610e9a818a6000601281101515610e5457fe5b60200201518b6001601281101515610e6857fe5b6020020151866000600281101515610e7c57fe5b6020020151876001600281101515610e9057fe5b60200201516140b5565b9150509a9950505050505050505050565b600481565b6000610ed88973ffffffffffffffffffffffffffffffffffffffff1689898989898989611c2f565b1515610f4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f696e76616c69642073696720666f72206275726e74780000000000000000000081525060200191505060405180910390fd5b60018710151515610fc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b6000806000886000600281101515610fd957fe5b602002015181526020019081526020016000206000886001600281101515610ffd57fe5b6020020151815260200190815260200160002060008a8152602001908152602001600020905080600401548414151561109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b6110a6614da5565b6110ae614e70565b826000016040805190810160405290816000820154815260200160018201548152505081600001819052508260020160408051908101604052908160008201548152602001600182015481525050816020018190525061114b8a8260408051908101604052808d600060028110151561112357fe5b602002015181526020018d600160028110151561113c57fe5b60200201518152508b8b61418f565b15156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f646c65207369676d6120766572696679206661696c656400000000000000000081525060200191505060405180910390fd5b611204600060408051908101604052808c60006002811015156111de57fe5b602002015181526020018c60016002811015156111f757fe5b60200201518152506144de565b8260c001819052508160c00151600001518360000160008201518160000155602082015181600101559050508160c001516020015183600201600082015181600001556020820151816001015590505060018601836004018190555060008b14156112b9578b73ffffffffffffffffffffffffffffffffffffffff166108fc6002548c029081150290604051600060405180830381858888f193505050501580156112b3573d6000803e3d6000fd5b50611432565b8a73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8c6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b505050506040513d602081101561138657600080fd5b81019080805190602001909291905050501515611431576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7eaa0e767678b3c0c3d11eead783b37878509e3a05f99e87606aa506f011da6d8b600060028110151561149057fe5b60200201518c60016002811015156114a457fe5b60200201518e426040518085815260200184815260200183815260200182815260200194505050505060405180910390a350505098975050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614156116465760025434101515156115a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f657468206465706f7369746564206c657373207468616e20312065746800000081525060200191505060405180910390fd5b34600254600254348115156115ba57fe5b0402141515611631576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696e76616c696420707265636973696f6e00000000000000000000000000000081525060200191505060405180910390fd5b6002543481151561163e57fe5b0491506118be565b600182101515156116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c696420746f6b656e20616d6f756e7400000000000000000000000081525060200191505060405180910390fd5b600034141515611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6465706f73697420746f6b656e20646f6e27742072656365697665206574680081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561180e57600080fd5b505af1158015611822573d6000803e3d6000fd5b505050506040513d602081101561183857600080fd5b810190808051906020019092919050505015156118bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5b60008060008660006002811015156118d257fe5b6020020151815260200190815260200160002060008660016002811015156118f657fe5b6020020151815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061193a614e70565b61197e84604080519081016040528089600060028110151561195857fe5b6020020151815260200189600160028110151561197157fe5b60200201518152506144de565b90506119b98160000151836000016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b826000016000820151816000015560208201518160010155905050611a0d8160200151836002016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8260020160008201518160000155602082015181600101559050503373ffffffffffffffffffffffffffffffffffffffff167fd655168c6f6dc744c5b6b2585f62b84142b313835578bf54cf68293e254204ac876000600281101515611a6f57fe5b6020020151886001600281101515611a8357fe5b602002015187426040518085815260200184815260200183815260200182815260200194505050505060405180910390a26001925050509392505050565b611ac9614e9e565b611ad1614e70565b600080868152602001908152602001600020600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052908160008201604080519081016040529081600082015481526020016001820154815250508152602001600282016040805190810160405290816000820154815260200160018201548152505081526020016004820154815250509050806000015160000151826000600581101515611b9b57fe5b602002018181525050806000015160200151826001600581101515611bbc57fe5b602002018181525050806020015160000151826002600581101515611bdd57fe5b602002018181525050806020015160200151826003600581101515611bfe57fe5b6020020181815250508060400151826004600581101515611c1b57fe5b602002018181525050819150509392505050565b600080611ce58a8a8a8a8a8a8a6040516020018088815260200187815260200186815260200185600260200280838360005b83811015611c7c578082015181840152602081019050611c61565b5050505090500184600460200280838360005b83811015611caa578082015181840152602081019050611c8f565b50505050905001838152602001828152602001975050505050505050604051602081830303815290604052805190602001206001900461407b565b9050611d4081886000600281101515611cfa57fe5b6020020151896001600281101515611d0e57fe5b6020020151866000600281101515611d2257fe5b6020020151876001600281101515611d3657fe5b60200201516140b5565b91505098975050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611d8789898989898989896146b5565b1515611dfb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f76657269667920736967206661696c656420666f72207472616e73666572747881525060200191505060405180910390fd5b60008060008b6000601c81101515611e0f57fe5b6020020151815260200190815260200160002060008b6001601c81101515611e3357fe5b6020020151815260200190815260200160002060008681526020019081526020016000209050806004015484141515611ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b611edc614da5565b60008160000181815250505b601481600001511015611f40578a8160000151601c81101515611f0757fe5b602002015181602001518260000151601481101515611f2257fe5b60200201818152505080600001805180919060010181525050611ee8565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e26cc3182602001518c6000600e81101515611f9257fe5b60200201518d6001600e81101515611fa657fe5b60200201518e6002600e81101515611fba57fe5b60200201516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085601460200280838360005b83811015612015578082015181840152602081019050611ffa565b5050505090500184815260200183815260200182815260200194505050505060206040518083038186803b15801561204c57600080fd5b505afa158015612060573d6000803e3d6000fd5b505050506040513d602081101561207657600080fd5b810190808051906020019092919050505015156120fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7369676d6120766572696679206661696c65640000000000000000000000000081525060200191505060405180910390fd5b60408051908101604052808c6002601c8110151561211557fe5b602002015181526020018c6003601c8110151561212e57fe5b602002015181525081604001516000018190525060408051908101604052808c6004601c8110151561215c57fe5b602002015181526020018c6005601c8110151561217557fe5b602002015181525081604001516020018190525060008160000181815250505b6004816000015110156121f0578a8160000151600201601c811015156121b757fe5b6020020151816080015182600001516004811015156121d257fe5b60200201818152505080600001805180919060010181525050612195565b61223561220482604001516000015161484d565b836000016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8160c001516000018190525061228661225582604001516020015161484d565b836002016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8160c001516020018190525060408051908101604052808c6014601c811015156122ac57fe5b602002015181526020018c6015601c811015156122c557fe5b60200201518152508160e001516000018190525060408051908101604052808c6016601c811015156122f357fe5b602002015181526020018c6017601c8110151561230c57fe5b60200201518152508160e001516020018190525060408051908101604052808c6018601c8110151561233a57fe5b602002015181526020018c6019601c8110151561235357fe5b6020020151815250816101000151600060028110151561236f57fe5b602002018190525060408051908101604052808c601a601c8110151561239157fe5b602002015181526020018c601b601c811015156123aa57fe5b602002015181525081610100015160016002811015156123c657fe5b60200201819052506124228160c001518260e001518361010001518e6000601c811015156123f057fe5b60200201518f6001601c8110151561240457fe5b60200201518f6003600e8110151561241857fe5b60200201516148dd565b1515612496576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f646c65207369676d612070726f6f66206661696c65640000000000000000000081525060200191505060405180910390fd5b60008160000181815250505b6008816000015110156124fb578881600001516010811015156124c157fe5b60200201518161016001518260000151600a811015156124dd57fe5b602002018181525050806000018051809190600101815250506124a2565b8a6004601c8110151561250a57fe5b60200201518161016001516008600a8110151561252357fe5b6020020181815250508a6005601c8110151561253b57fe5b60200201518161016001516009600a8110151561255457fe5b60200201818152505060008160000181815250505b6004600202816000015110156125fc5787816000015160108110151561258b57fe5b6020020151816101a0015182600001516008811015156125a757fe5b6020020181815250508681600001516010811015156125c257fe5b6020020151816101c0015182600001516008811015156125de57fe5b60200201818152505080600001805180919060010181525050612569565b60008160000181815250505b60058160000151101561266457898160000151600401600e8110151561262a57fe5b6020020151816101800151826000015160058110151561264657fe5b60200201818152505080600001805180919060010181525050612608565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101600151836101800151846101a00151856101c001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b838110156127105780820151818401526020810190506126f5565b5050505090500184600560200280838360005b8381101561273e578082015181840152602081019050612723565b5050505090500183600860200280838360005b8381101561276c578082015181840152602081019050612751565b5050505090500182600860200280838360005b8381101561279a57808201518184015260208101905061277f565b5050505090500194505050505060206040518083038186803b1580156127bf57600080fd5b505afa1580156127d3573d6000803e3d6000fd5b505050506040513d60208110156127e957600080fd5b8101908080519060200190929190505050151561286e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f72616e67652070726f6f662031206661696c656400000000000000000000000081525060200191505060405180910390fd5b60008160000181815250505b6008816000015110156128d65788816000015160080160108110151561289c57fe5b60200201518161016001518260000151600a811015156128b857fe5b6020020181815250508060000180518091906001018152505061287a565b8a6016601c811015156128e557fe5b60200201518161016001516008600a811015156128fe57fe5b6020020181815250508a6017601c8110151561291657fe5b60200201518161016001516009600a8110151561292f57fe5b60200201818152505060008160000181815250505b6004600202816000015110156129e35787600460020282600001510160108110151561296c57fe5b6020020151816101a00151826000015160088110151561298857fe5b6020020181815250508660046002028260000151016010811015156129a957fe5b6020020151816101c0015182600001516008811015156129c557fe5b60200201818152505080600001805180919060010181525050612944565b60008160000181815250505b600581600001511015612a4b57898160000151600901600e81101515612a1157fe5b60200201518161018001518260000151600581101515612a2d57fe5b602002018181525050806000018051809190600101815250506129ef565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101600151836101800151846101a00151856101c001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015612af7578082015181840152602081019050612adc565b5050505090500184600560200280838360005b83811015612b25578082015181840152602081019050612b0a565b5050505090500183600860200280838360005b83811015612b53578082015181840152602081019050612b38565b5050505090500182600860200280838360005b83811015612b81578082015181840152602081019050612b66565b5050505090500194505050505060206040518083038186803b158015612ba657600080fd5b505afa158015612bba573d6000803e3d6000fd5b505050506040513d6020811015612bd057600080fd5b81019080805190602001909291905050501515612c55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f72616e67652070726f6f66203220766572696679206661696c6564000000000081525060200191505060405180910390fd5b8060c00151600001518260000160008201518160000155602082015181600101559050508060c001516020015182600201600082015181600001556020820151816001015590505060018501826004018190555060008060008d6006601c81101515612cbd57fe5b6020020151815260200190815260200160002060008d6007601c81101515612ce157fe5b602002015181526020019081526020016000206000888152602001908152602001600020905060408051908101604052808d6008601c81101515612d2157fe5b602002015181526020018d6009601c81101515612d3a57fe5b602002015181525082606001516000018190525060408051908101604052808d600a601c81101515612d6857fe5b602002015181526020018d600b601c81101515612d8157fe5b602002015181525082606001516020018190525060008260000181815250505b600482600001511015612dfc578b8260000151600801601c81101515612dc357fe5b60200201518260a001518360000151600481101515612dde57fe5b60200201818152505081600001805180919060010181525050612da1565b612e39826060015160000151826000016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b816000016000820151816000015560208201518160010155905050612e91826060015160200151826002016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8160020160008201518160000155602082015181600101559050506001935050505098975050505050505050565b600281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018910151515612f65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f696e76616c696420616d6f756e7400000000000000000000000000000000000081525060200191505060405180910390fd5b612f8d8b73ffffffffffffffffffffffffffffffffffffffff168b8b8b8b8b8b8b8b8b610d01565b1515613001576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269667920736967206661696c656420666f72206275726e20706172740081525060200191505060405180910390fd5b60008060008a600060128110151561301557fe5b6020020151815260200190815260200160002060008a600160128110151561303957fe5b6020020151815260200190815260200160002060008c815260200190815260200160002090508060040154841415156130da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b6130e2614da5565b60408051908101604052808b60026012811015156130fc57fe5b602002015181526020018b600360128110151561311557fe5b602002015181525081604001516000018190525060408051908101604052808b600460128110151561314357fe5b602002015181526020018b600560128110151561315c57fe5b602002015181525081604001516020018190525089600a60128110151561317f57fe5b6020020151816101400151600060048110151561319857fe5b60200201818152505089600b6012811015156131b057fe5b602002015181610140015160016004811015156131c957fe5b60200201818152505089600c6012811015156131e157fe5b602002015181610140015160026004811015156131fa57fe5b60200201818152505089600d60128110151561321257fe5b6020020151816101400151600360048110151561322b57fe5b6020020181815250506132978b826040015160408051908101604052808e600060128110151561325757fe5b602002015181526020018e600160128110151561327057fe5b60200201518152508461014001518d6000600c8110151561328d57fe5b602002015161418f565b151561330b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f646c65207369676d612070726f6f662031206661696c6564000000000000000081525060200191505060405180910390fd5b60408051908101604052808b600260128110151561332557fe5b602002015181526020018b600360128110151561333e57fe5b602002015181525081604001516000018190525060408051908101604052808b600460128110151561336c57fe5b602002015181526020018b600560128110151561338557fe5b60200201518152508160400151602001819052506133de6133ad82604001516000015161484d565b836000016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8160c001516000018190525061342f6133fe82604001516020015161484d565b836002016040805190810160405290816000820154815260200160018201548152505061461390919063ffffffff16565b8160c001516020018190525060408051908101604052808b600660128110151561345557fe5b602002015181526020018b600760128110151561346e57fe5b60200201518152508160e001516000018190525060408051908101604052808b600860128110151561349c57fe5b602002015181526020018b60096012811015156134b557fe5b60200201518152508160e001516020018190525060408051908101604052808b600e6012811015156134e357fe5b602002015181526020018b600f6012811015156134fc57fe5b6020020151815250816101000151600060028110151561351857fe5b602002018190525060408051908101604052808b601060128110151561353a57fe5b602002015181526020018b601160128110151561355357fe5b6020020151815250816101000151600160028110151561356f57fe5b60200201819052506135cb8160c001518260e001518361010001518d600060128110151561359957fe5b60200201518e60016012811015156135ad57fe5b60200201518e6001600c811015156135c157fe5b60200201516148dd565b151561363f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f646c65207369676d612070726f6f662032206661696c6564000000000000000081525060200191505060405180910390fd5b60008090505b600881101561368a57888160108110151561365c57fe5b602002015182610160015182600a8110151561367457fe5b6020020181815250508080600101915050613645565b5089600460128110151561369a57fe5b60200201518161016001516008600a811015156136b357fe5b6020020181815250508960056012811015156136cb57fe5b60200201518161016001516009600a811015156136e457fe5b60200201818152505060008090505b600460020281101561376a57878160108110151561370d57fe5b6020020151826101a001518260088110151561372557fe5b602002018181525050868160108110151561373c57fe5b6020020151826101c001518260088110151561375457fe5b60200201818152505080806001019150506136f3565b5060008090505b60058110156137b9578960028201600c8110151561378b57fe5b6020020151826101800151826005811015156137a357fe5b6020020181815250508080600101915050613771565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101600151836101800151846101a00151856101c001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b8381101561386657808201518184015260208101905061384b565b5050505090500184600560200280838360005b83811015613894578082015181840152602081019050613879565b5050505090500183600860200280838360005b838110156138c25780820151818401526020810190506138a7565b5050505090500182600860200280838360005b838110156138f05780820151818401526020810190506138d5565b5050505090500194505050505060206040518083038186803b15801561391557600080fd5b505afa158015613929573d6000803e3d6000fd5b505050506040513d602081101561393f57600080fd5b810190808051906020019092919050505015156139c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f72616e67652070726f6f662031206661696c656400000000000000000000000081525060200191505060405180910390fd5b60008090505b6008811015613a125788816008016010811015156139e457fe5b602002015182610160015182600a811015156139fc57fe5b60200201818152505080806001019150506139ca565b50896008601281101515613a2257fe5b60200201518161016001516008600a81101515613a3b57fe5b602002018181525050896009601281101515613a5357fe5b60200201518161016001516009600a81101515613a6c57fe5b60200201818152505060008090505b6004600202811015613afe578760046002028201601081101515613a9b57fe5b6020020151826101a0015182600881101515613ab357fe5b6020020181815250508660046002028201601081101515613ad057fe5b6020020151826101c0015182600881101515613ae857fe5b6020020181815250508080600101915050613a7b565b5060008090505b6005811015613b4d578981600701600c81101515613b1f57fe5b602002015182610180015182600581101515613b3757fe5b6020020181815250508080600101915050613b05565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae28826101600151836101800151846101a00151856101c001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015613bfa578082015181840152602081019050613bdf565b5050505090500184600560200280838360005b83811015613c28578082015181840152602081019050613c0d565b5050505090500183600860200280838360005b83811015613c56578082015181840152602081019050613c3b565b5050505090500182600860200280838360005b83811015613c84578082015181840152602081019050613c69565b5050505090500194505050505060206040518083038186803b158015613ca957600080fd5b505afa158015613cbd573d6000803e3d6000fd5b505050506040513d6020811015613cd357600080fd5b81019080805190602001909291905050501515613d58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f72616e67652070726f6f66203220766572696679206661696c6564000000000081525060200191505060405180910390fd5b8060c00151600001518260000160008201518160000155602082015181600101559050508060c001516020015182600201600082015181600001556020820151816001015590505060018501826004018190555060008c1415613e05578c73ffffffffffffffffffffffffffffffffffffffff166108fc6002548d029081150290604051600060405180830381858888f19350505050158015613dff573d6000803e3d6000fd5b50613f7e565b8b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8e8d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613ea857600080fd5b505af1158015613ebc573d6000803e3d6000fd5b505050506040513d6020811015613ed257600080fd5b81019080805190602001909291905050501515613f7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f7472616e7366657220746f6b656e206261636b20746f2075736572206661696c81526020017f656400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa356d7d41808984684f6eb9be3551584de2db1f2879fef7c31f8d7a04ea3ab128c6000601281101515613fdc57fe5b60200201518d6001601281101515613ff057fe5b60200201518f426040518085815260200184815260200183815260200182815260200194505050505060405180910390a350509a9950505050505050505050565b60038060000154908060010154905082565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058060000154908060010154905082565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080838115156140ac57fe5b06915050919050565b60006140c082614bec565b915060006140d78388614cbc90919063ffffffff16565b905060006140ee8486614cbc90919063ffffffff16565b90506140f8614ec1565b6141636141228360408051908101604052808c81526020018b815250614cf890919063ffffffff16565b61415585600360408051908101604052908160008201548152602001600182015481525050614cf890919063ffffffff16565b61461390919063ffffffff16565b905085816000015114151561417e5760009350505050614186565b600193505050505b95945050505050565b6000614199614ec1565b6141ea6141d76141d289600560408051908101604052908160008201548152602001600182015481525050614cf890919063ffffffff16565b61484d565b876020015161461390919063ffffffff16565b90506141f4614da5565b84600060048110151561420357fe5b60200201518161012001516000600c8110151561421c57fe5b60200201818152505084600160048110151561423457fe5b60200201518161012001516001600c8110151561424d57fe5b60200201818152505084600260048110151561426557fe5b60200201518161012001516002600c8110151561427e57fe5b60200201818152505084600360048110151561429657fe5b60200201518161012001516003600c811015156142af57fe5b60200201818152505081600001518161012001516004600c811015156142d157fe5b60200201818152505081602001518161012001516005600c811015156142f357fe5b6020020181815250508660000151600001518161012001516006600c8110151561431957fe5b6020020181815250508660000151602001518161012001516007600c8110151561433f57fe5b6020020181815250506003600001548161012001516008600c8110151561436257fe5b6020020181815250506003600101548161012001516009600c8110151561438557fe5b6020020181815250508560000151816101200151600a600c811015156143a757fe5b6020020181815250508560200151816101200151600b600c811015156143c957fe5b602002018181525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb13826101200151866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b8381101561446d578082015181840152602081019050614452565b505050509050018281526020019250505060206040518083038186803b15801561449657600080fd5b505afa1580156144aa573d6000803e3d6000fd5b505050506040513d60208110156144c057600080fd5b81019080805190602001909291905050509250505095945050505050565b6144e6614e70565b601060020a83101515614561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f616d6f756e74206f7574206f662072616e67650000000000000000000000000081525060200191505060405180910390fd5b600080905061456e614e70565b6145818285614cf890919063ffffffff16565b81600001819052506146006145bf83600360408051908101604052908160008201548152602001600182015481525050614cf890919063ffffffff16565b6145f287600560408051908101604052908160008201548152602001600182015481525050614cf890919063ffffffff16565b61461390919063ffffffff16565b8160200181905250809250505092915050565b61461b614ec1565b614623614edb565b836000015181600060048110151561463757fe5b602002018181525050836020015181600160048110151561465457fe5b602002018181525050826000015181600260048110151561467157fe5b602002018181525050826020015181600360048110151561468e57fe5b6020020181815250506040826080836006600019fa15156146ae57600080fd5b5092915050565b6000806147e38a8a8a8a8a8a8a6040516020018088601c60200280838360005b838110156146f05780820151818401526020810190506146d5565b5050505090500187600e60200280838360005b8381101561471e578082015181840152602081019050614703565b5050505090500186601060200280838360005b8381101561474c578082015181840152602081019050614731565b5050505090500185601060200280838360005b8381101561477a57808201518184015260208101905061475f565b5050505090500184601060200280838360005b838110156147a857808201518184015260208101905061478d565b50505050905001838152602001828152602001975050505050505050604051602081830303815290604052805190602001206001900461407b565b905061483e818b6000601c811015156147f857fe5b60200201518c6001601c8110151561480c57fe5b602002015186600060028110151561482057fe5b602002015187600160028110151561483457fe5b60200201516140b5565b91505098975050505050505050565b614855614ec1565b6000826000015114801561486d575060008260200151145b1561489057604080519081016040528060008152602001600081525090506148d8565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b60006148e7614ec1565b61490a6148f7896020015161484d565b886020015161461390919063ffffffff16565b9050614914614ec1565b6149376149248a6000015161484d565b896000015161461390919063ffffffff16565b9050614941614efe565b87600060028110151561495057fe5b602002015160000151816000600c8110151561496857fe5b60200201818152505087600060028110151561498057fe5b602002015160200151816001600c8110151561499857fe5b6020020181815250508760016002811015156149b057fe5b602002015160000151816002600c811015156149c857fe5b6020020181815250508760016002811015156149e057fe5b602002015160200151816003600c811015156149f857fe5b6020020181815250508260000151816004600c81101515614a1557fe5b6020020181815250508260200151816005600c81101515614a3257fe5b6020020181815250508160000151816006600c81101515614a4f57fe5b6020020181815250508160200151816007600c81101515614a6c57fe5b602002018181525050600360000154816008600c81101515614a8a57fe5b602002018181525050600360010154816009600c81101515614aa857fe5b6020020181815250508681600a600c81101515614ac157fe5b6020020181815250508581600b600c81101515614ada57fe5b602002018181525050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb1382876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b83811015614b79578082015181840152602081019050614b5e565b505050509050018281526020019250505060206040518083038186803b158015614ba257600080fd5b505afa158015614bb6573d6000803e3d6000fd5b505050506040513d6020811015614bcc57600080fd5b810190808051906020019092919050505093505050509695505050505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060008390506000811415614c2b57600092505050614cb7565b81811115614c42578181811515614c3e57fe5b0690505b600080600190506000849050600084905060005b600082141515614c8f578183811515614c6b57fe5b04905083848202860383848402860380955081965082975083985050505050614c56565b6000851215614cac57846000038703975050505050505050614cb7565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080801515614cec57fe5b83850991505092915050565b614d00614ec1565b6001821415614d1157829050614d9f565b6002821415614d2b57614d248384614613565b9050614d9f565b614d33614f22565b8360000151816000600381101515614d4757fe5b6020020181815250508360200151816001600381101515614d6457fe5b60200201818152505082816002600381101515614d7d57fe5b6020020181815250506040826060836007600019fa1515614d9d57600080fd5b505b92915050565b610c806040519081016040528060008152602001614dc1614f45565b8152602001614dce614f69565b8152602001614ddb614f69565b8152602001614de8614f97565b8152602001614df5614f97565b8152602001614e02614f69565b8152602001614e0f614f69565b8152602001614e1c614fba565b8152602001614e29614fe8565b8152602001614e36614f97565b8152602001614e4361500c565b8152602001614e50615030565b8152602001614e5d615053565b8152602001614e6a615053565b81525090565b60a060405190810160405280614e84615077565b8152602001614e91615077565b8152602001600081525090565b60a060405190810160405280600590602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b61018060405190810160405280600c90602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b61028060405190810160405280601490602082028038833980820191505090505090565b60a060405190810160405280614f7d615077565b8152602001614f8a615077565b8152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b6080604051908101604052806002905b614fd2615077565b815260200190600190039081614fca5790505090565b61018060405190810160405280600c90602082028038833980820191505090505090565b61014060405190810160405280600a90602082028038833980820191505090505090565b60a060405190810160405280600590602082028038833980820191505090505090565b61010060405190810160405280600890602082028038833980820191505090505090565b60408051908101604052806000815260200160008152509056fea165627a7a723058202141e007460ce86197e3bcfc1362fecfcf9001b3c35bf6c72e588cdf7f2df2c90029";

    public static final String FUNC_N = "n";

    public static final String FUNC_DLESIGMAVERIFIER = "dleSigmaVerifier";

    public static final String FUNC_BITSIZE = "bitSize";

    public static final String FUNC_RANGEPROOFVERIFIER = "rangeProofVerifier";

    public static final String FUNC_DECIMAL = "decimal";

    public static final String FUNC_SIGMAVERIFIER = "sigmaVerifier";

    public static final String FUNC_H = "h";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_G = "g";

    public static final String FUNC_DEPOSITACCOUNT = "depositAccount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_BURNPART = "burnPart";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_VERIFYBURNPARTSIG = "verifyBurnPartSig";

    public static final String FUNC_VERIFYBURNSIG = "verifyBurnSig";

    public static final Event LOGDEPOSITACCOUNT_EVENT = new Event("LogDepositAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGTRANSFER_EVENT = new Event("LogTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURN_EVENT = new Event("LogBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURNPART_EVENT = new Event("LogBurnPart", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> n() {
        final Function function = new Function(FUNC_N, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dleSigmaVerifier() {
        final Function function = new Function(FUNC_DLESIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> bitSize() {
        final Function function = new Function(FUNC_BITSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> rangeProofVerifier() {
        final Function function = new Function(FUNC_RANGEPROOFVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> decimal() {
        final Function function = new Function(FUNC_DECIMAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> sigmaVerifier() {
        final Function function = new Function(FUNC_SIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LogDepositAccountEventResponse> getLogDepositAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogDepositAccountEventResponse> responses = new ArrayList<LogDepositAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogDepositAccountEventResponse>() {
            @Override
            public LogDepositAccountEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, log);
                LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGDEPOSITACCOUNT_EVENT));
        return logDepositAccountEventObservable(filter);
    }

    public List<LogTransferEventResponse> getLogTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTRANSFER_EVENT, transactionReceipt);
        ArrayList<LogTransferEventResponse> responses = new ArrayList<LogTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTransferEventResponse typedResponse = new LogTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.amountSenderXX = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.amountSenderXY = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.amountSenderYX = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.amountSenderYY = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.amountFromXX = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.amountFromXY = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            typedResponse.amountFromYX = (BigInteger) eventValues.getNonIndexedValues().get(10).getValue();
            typedResponse.amountFromYY = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(12).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogTransferEventResponse>() {
            @Override
            public LogTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTRANSFER_EVENT, log);
                LogTransferEventResponse typedResponse = new LogTransferEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fromx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.fromy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.amountSenderXX = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.amountSenderXY = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.amountSenderYX = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.amountSenderYY = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.amountFromXX = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.amountFromXY = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
                typedResponse.amountFromYX = (BigInteger) eventValues.getNonIndexedValues().get(10).getValue();
                typedResponse.amountFromYY = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(12).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTRANSFER_EVENT));
        return logTransferEventObservable(filter);
    }

    public List<LogBurnEventResponse> getLogBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURN_EVENT, transactionReceipt);
        ArrayList<LogBurnEventResponse> responses = new ArrayList<LogBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnEventResponse typedResponse = new LogBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnEventResponse>() {
            @Override
            public LogBurnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURN_EVENT, log);
                LogBurnEventResponse typedResponse = new LogBurnEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURN_EVENT));
        return logBurnEventObservable(filter);
    }

    public List<LogBurnPartEventResponse> getLogBurnPartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURNPART_EVENT, transactionReceipt);
        ArrayList<LogBurnPartEventResponse> responses = new ArrayList<LogBurnPartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnPartEventResponse>() {
            @Override
            public LogBurnPartEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURNPART_EVENT, log);
                LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURNPART_EVENT));
        return logBurnPartEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> depositAccount(List<BigInteger> publicKey, String tokenContract, BigInteger amount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(tokenContract), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> transfer(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger token, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray28<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getUserBalance(BigInteger x, BigInteger y, String token) {
        final Function function = new Function(FUNC_GETUSERBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y), 
                new org.web3j.abi.datatypes.Address(token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray5<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> burnPart(String receiver, BigInteger token, BigInteger amount, List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_BURNPART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray18<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(String receiver, BigInteger token, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifyBurnPartSig(BigInteger receiver, BigInteger token, BigInteger amount, List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(FUNC_VERIFYBURNPARTSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray18<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verifyBurnSig(BigInteger receiver, BigInteger token, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(FUNC_VERIFYBURNSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class LogDepositAccountEventResponse {
        public Log log;

        public String proxy;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogTransferEventResponse {
        public Log log;

        public String proxy;

        public BigInteger fromx;

        public BigInteger fromy;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amountSenderXX;

        public BigInteger amountSenderXY;

        public BigInteger amountSenderYX;

        public BigInteger amountSenderYY;

        public BigInteger amountFromXX;

        public BigInteger amountFromXY;

        public BigInteger amountFromYX;

        public BigInteger amountFromYY;

        public BigInteger time;
    }

    public static class LogBurnEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogBurnPartEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }
}
