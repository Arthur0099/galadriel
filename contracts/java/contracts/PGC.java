package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray4;
import org.web3j.abi.datatypes.generated.StaticArray6;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class PGC extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_BITSIZE = "bitSize";

    public static final String FUNC_G = "g";

    public static final String FUNC_H = "h";

    public static final String FUNC_MAXNUMBER = "maxNumber";

    public static final String FUNC_N = "n";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_PGCVERIFIER = "pgcVerifier";

    public static final String FUNC_TOKENCONVERTER = "tokenConverter";

    public static final String FUNC_OPENPENDING = "openPending";

    public static final String FUNC_CLOSEPENDING = "closePending";

    public static final String FUNC_DEPOSITACCOUNTETH = "depositAccountETH";

    public static final String FUNC_DEPOSITACCOUNT = "depositAccount";

    public static final String FUNC_AGGTRANSFERETH = "aggTransferETH";

    public static final String FUNC_AGGTRANSFER = "aggTransfer";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_GETPENDINGFUNNONCE = "getPendingFunNonce";

    public static final String FUNC_BURNETH = "burnETH";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_VERIFYBURNPARTSIG = "verifyBurnPartSig";

    public static final Event LOGAGGTRANSFER_EVENT = new Event("LogAggTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<StaticArray6<Uint256>>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURN_EVENT = new Event("LogBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURNPART_EVENT = new Event("LogBurnPart", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGDEPOSITACCOUNT_EVENT = new Event("LogDepositAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGTRANSFER_EVENT = new Event("LogTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_, String pgcVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(pgcVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_, String pgcVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(pgcVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_, String pgcVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(pgcVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_, String pgcVerifier_, String tokenConverter_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(pgcVerifier_), 
                new org.web3j.abi.datatypes.Address(tokenConverter_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LogAggTransferEventResponse> getLogAggTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGAGGTRANSFER_EVENT, transactionReceipt);
        ArrayList<LogAggTransferEventResponse> responses = new ArrayList<LogAggTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogAggTransferEventResponse typedResponse = new LogAggTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ct = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogAggTransferEventResponse> logAggTransferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogAggTransferEventResponse>() {
            @Override
            public LogAggTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGAGGTRANSFER_EVENT, log);
                LogAggTransferEventResponse typedResponse = new LogAggTransferEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ct = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogAggTransferEventResponse> logAggTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGAGGTRANSFER_EVENT));
        return logAggTransferEventObservable(filter);
    }

    public List<LogBurnEventResponse> getLogBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURN_EVENT, transactionReceipt);
        ArrayList<LogBurnEventResponse> responses = new ArrayList<LogBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnEventResponse typedResponse = new LogBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnEventResponse>() {
            @Override
            public LogBurnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURN_EVENT, log);
                LogBurnEventResponse typedResponse = new LogBurnEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURN_EVENT));
        return logBurnEventObservable(filter);
    }

    public List<LogBurnPartEventResponse> getLogBurnPartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURNPART_EVENT, transactionReceipt);
        ArrayList<LogBurnPartEventResponse> responses = new ArrayList<LogBurnPartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnPartEventResponse>() {
            @Override
            public LogBurnPartEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURNPART_EVENT, log);
                LogBurnPartEventResponse typedResponse = new LogBurnPartEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnPartEventResponse> logBurnPartEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURNPART_EVENT));
        return logBurnPartEventObservable(filter);
    }

    public List<LogDepositAccountEventResponse> getLogDepositAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogDepositAccountEventResponse> responses = new ArrayList<LogDepositAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogDepositAccountEventResponse>() {
            @Override
            public LogDepositAccountEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, log);
                LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGDEPOSITACCOUNT_EVENT));
        return logDepositAccountEventObservable(filter);
    }

    public List<LogTransferEventResponse> getLogTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTRANSFER_EVENT, transactionReceipt);
        ArrayList<LogTransferEventResponse> responses = new ArrayList<LogTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTransferEventResponse typedResponse = new LogTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ct1 = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ct2 = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogTransferEventResponse>() {
            @Override
            public LogTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTRANSFER_EVENT, log);
                LogTransferEventResponse typedResponse = new LogTransferEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.fromto = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.ct1 = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.ct2 = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTRANSFER_EVENT));
        return logTransferEventObservable(filter);
    }

    public RemoteCall<BigInteger> bitSize() {
        final Function function = new Function(FUNC_BITSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> maxNumber() {
        final Function function = new Function(FUNC_MAXNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> n() {
        final Function function = new Function(FUNC_N, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> pgcVerifier() {
        final Function function = new Function(FUNC_PGCVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> tokenConverter() {
        final Function function = new Function(FUNC_TOKENCONVERTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> openPending(BigInteger x, BigInteger y, BigInteger epochLength_, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_OPENPENDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y), 
                new org.web3j.abi.datatypes.generated.Uint256(epochLength_), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> closePending(BigInteger x, BigInteger y, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_CLOSEPENDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> depositAccountETH(List<BigInteger> publicKey, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNTETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> depositAccount(List<BigInteger> publicKey, String tokenAddr, BigInteger tokenAmount, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(tokenAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> aggTransferETH(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> l, List<BigInteger> r) {
        final Function function = new Function(
                FUNC_AGGTRANSFERETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.StaticArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray10<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> aggTransfer(List<BigInteger> points, List<BigInteger> scalar, BigInteger token, List<BigInteger> l, List<BigInteger> r) {
        final Function function = new Function(
                FUNC_AGGTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.StaticArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray10<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<BigInteger>, BigInteger>> getUserBalance(BigInteger x, BigInteger y, String token) {
        final Function function = new Function(FUNC_GETUSERBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y), 
                new org.web3j.abi.datatypes.Address(token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Uint256>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<List<BigInteger>, BigInteger>>(
                new Callable<Tuple2<List<BigInteger>, BigInteger>>() {
                    @Override
                    public Tuple2<List<BigInteger>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, BigInteger>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getPendingFunNonce(BigInteger x, BigInteger y) {
        final Function function = new Function(FUNC_GETPENDINGFUNNONCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> burnETH(String receiver, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z) {
        final Function function = new Function(
                FUNC_BURNETH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> burn(String receiver, BigInteger token, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifyBurnPartSig(BigInteger receiver, BigInteger token, BigInteger amount, List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(FUNC_VERIFYBURNPARTSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray18<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray24<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray24<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class LogAggTransferEventResponse {
        public Log log;

        public String proxy;

        public String token;

        public List<BigInteger> fromto;

        public List<BigInteger> ct;

        public BigInteger time;
    }

    public static class LogBurnEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public String token;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogBurnPartEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public String token;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogDepositAccountEventResponse {
        public Log log;

        public String proxy;

        public String token;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogTransferEventResponse {
        public Log log;

        public String proxy;

        public String token;

        public List<BigInteger> fromto;

        public List<BigInteger> ct1;

        public List<BigInteger> ct2;

        public BigInteger time;
    }
}
