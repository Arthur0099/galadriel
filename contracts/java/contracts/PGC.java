package contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray5;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class PGC extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_N = "n";

    public static final String FUNC_DLESIGMAVERIFIER = "dleSigmaVerifier";

    public static final String FUNC_BITSIZE = "bitSize";

    public static final String FUNC_RANGEPROOFVERIFIER = "rangeProofVerifier";

    public static final String FUNC_SIGMAVERIFIER = "sigmaVerifier";

    public static final String FUNC_H = "h";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_G = "g";

    public static final String FUNC_DEPOSITACCOUNT = "depositAccount";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_VERIFYBURNSIG = "verifyBurnSig";

    public static final Event LOGDEPOSITACCOUNT_EVENT = new Event("LogDepositAccount", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGTRANSFER_EVENT = new Event("LogTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGBURN_EVENT = new Event("LogBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> n() {
        final Function function = new Function(FUNC_N, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dleSigmaVerifier() {
        final Function function = new Function(FUNC_DLESIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> bitSize() {
        final Function function = new Function(FUNC_BITSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> rangeProofVerifier() {
        final Function function = new Function(FUNC_RANGEPROOFVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> sigmaVerifier() {
        final Function function = new Function(FUNC_SIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<LogDepositAccountEventResponse> getLogDepositAccountEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, transactionReceipt);
        ArrayList<LogDepositAccountEventResponse> responses = new ArrayList<LogDepositAccountEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogDepositAccountEventResponse>() {
            @Override
            public LogDepositAccountEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGDEPOSITACCOUNT_EVENT, log);
                LogDepositAccountEventResponse typedResponse = new LogDepositAccountEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogDepositAccountEventResponse> logDepositAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGDEPOSITACCOUNT_EVENT));
        return logDepositAccountEventObservable(filter);
    }

    public List<LogTransferEventResponse> getLogTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTRANSFER_EVENT, transactionReceipt);
        ArrayList<LogTransferEventResponse> responses = new ArrayList<LogTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTransferEventResponse typedResponse = new LogTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fromy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.amountSenderXX = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.amountSenderXY = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.amountSenderYX = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.amountSenderYY = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.amountFromXX = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.amountFromXY = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            typedResponse.amountFromYX = (BigInteger) eventValues.getNonIndexedValues().get(10).getValue();
            typedResponse.amountFromYY = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(12).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogTransferEventResponse>() {
            @Override
            public LogTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTRANSFER_EVENT, log);
                LogTransferEventResponse typedResponse = new LogTransferEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.fromx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.fromy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tox = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.toy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.amountSenderXX = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.amountSenderXY = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.amountSenderYX = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.amountSenderYY = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                typedResponse.amountFromXX = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
                typedResponse.amountFromXY = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
                typedResponse.amountFromYX = (BigInteger) eventValues.getNonIndexedValues().get(10).getValue();
                typedResponse.amountFromYY = (BigInteger) eventValues.getNonIndexedValues().get(11).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(12).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTRANSFER_EVENT));
        return logTransferEventObservable(filter);
    }

    public List<LogBurnEventResponse> getLogBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBURN_EVENT, transactionReceipt);
        ArrayList<LogBurnEventResponse> responses = new ArrayList<LogBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBurnEventResponse typedResponse = new LogBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogBurnEventResponse>() {
            @Override
            public LogBurnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBURN_EVENT, log);
                LogBurnEventResponse typedResponse = new LogBurnEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.receiver = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.accountx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.accounty = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<LogBurnEventResponse> logBurnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBURN_EVENT));
        return logBurnEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> depositAccount(List<BigInteger> publicKey, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> transfer(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray28<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getUserBalance(BigInteger x, BigInteger y) {
        final Function function = new Function(FUNC_GETUSERBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray5<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> burn(String receiver, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyBurnSig(BigInteger receiver, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z, BigInteger nonce, List<BigInteger> sig) {
        final Function function = new Function(
                FUNC_VERIFYBURNSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(sig, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class LogDepositAccountEventResponse {
        public Log log;

        public String proxy;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amount;

        public BigInteger time;
    }

    public static class LogTransferEventResponse {
        public Log log;

        public String proxy;

        public BigInteger fromx;

        public BigInteger fromy;

        public BigInteger tox;

        public BigInteger toy;

        public BigInteger amountSenderXX;

        public BigInteger amountSenderXY;

        public BigInteger amountSenderYX;

        public BigInteger amountSenderYY;

        public BigInteger amountFromXX;

        public BigInteger amountFromXY;

        public BigInteger amountFromYX;

        public BigInteger amountFromYY;

        public BigInteger time;
    }

    public static class LogBurnEventResponse {
        public Log log;

        public String proxy;

        public String receiver;

        public BigInteger accountx;

        public BigInteger accounty;

        public BigInteger amount;

        public BigInteger time;
    }
}
