package contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class PGC extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160808062002bb1833981018060405260808110156200003357600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505083600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000170620004c9565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620001f457600080fd5b505afa15801562000209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200022f57600080fd5b8101908091905050905062000243620004c9565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620002c757600080fd5b505afa158015620002dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200030257600080fd5b810190809190505090508160006002811015156200031c57fe5b60200201516001600001819055508160016002811015156200033a57fe5b602002015160018001819055508060006002811015156200035757fe5b60200201516003600001819055508060016002811015156200037557fe5b6020020151600360010181905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200040857600080fd5b505afa1580156200041d573d6000803e3d6000fd5b505050506040513d60208110156200043457600080fd5b81019080805190602001909291905050506010141515620004bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f62697473697a65206e6f7420657175616c00000000000000000000000000000081525060200191505060405180910390fd5b505050505050620004eb565b6040805190810160405280600290602082028038833980820191505090505090565b6126b680620004fb6000396000f3fe6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063295243ee146100ca5780632e52d6061461014b578063361eb474146101765780633e8d3764146101cd57806361e5af5e146101f85780637048f2651461024f57806381b7bc731461034f5780638a4068dd146103a65780639e0cf59f146103d5578063b8c9d36514610452578063cff0ab9614610484578063e2179b8e146104db578063ead4340b1461050d575b600080fd5b3480156100d657600080fd5b5061010d600480360360408110156100ed57600080fd5b8101908080359060200190929190803590602001909291905050506106a1565b6040518082600460200280838360005b8381101561013857808201518184015260208101905061011d565b5050505090500191505060405180910390f35b34801561015757600080fd5b506101606107bf565b6040518082815260200191505060405180910390f35b34801561018257600080fd5b5061018b6107c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d957600080fd5b506101e26107ea565b6040518082815260200191505060405180910390f35b34801561020457600080fd5b5061020d6107ef565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025b57600080fd5b50610335600480360361012081101561027357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080608001906004806020026040519081016040528092919082600460200280828437600081840152601f19601f820116905080830192505050505050919291929080359060200190929190505050610815565b604051808215151515815260200191505060405180910390f35b34801561035b57600080fd5b50610364610cae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b257600080fd5b506103bb610cd4565b604051808215151515815260200191505060405180910390f35b610438600480360360408110156103eb57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610cd9565b604051808215151515815260200191505060405180910390f35b34801561045e57600080fd5b50610467610f4d565b604051808381526020018281526020019250505060405180910390f35b34801561049057600080fd5b50610499610f5f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e757600080fd5b506104f0610f85565b604051808381526020018281526020019250505060405180910390f35b34801561051957600080fd5b506106876004803603610b4081101561053157600080fd5b81019080806103800190601c806020026040519081016040528092919082601c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f82011690508083019250505050505091929192908061020001906010806020026040519081016040528092919082601060200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610f97565b604051808215151515815260200191505060405180910390f35b6106a9612451565b6106b1612474565b600080858152602001908152602001600020600084815260200190815260200160002060408051908101604052908160008201604080519081016040529081600082015481526020016001820154815250508152602001600282016040805190810160405290816000820154815260200160018201548152505081525050905080600001516000015182600060048110151561074957fe5b60200201818152505080600001516020015182600160048110151561076a57fe5b60200201818152505080602001516000015182600260048110151561078b57fe5b6020020181815250508060200151602001518260036004811015156107ac57fe5b6020020181815250508191505092915050565b600481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018510156108295760009050610ca5565b600080600086600060028110151561083d57fe5b60200201518152602001908152602001600020600086600160028110151561086157fe5b60200201518152602001908152602001600020905061087e61249b565b6108ed6108bc6108b789600360408051908101604052908160008201548152602001600182015481525050611e2890919063ffffffff16565b611ed5565b8360020160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b90506108f76124b5565b85600060048110151561090657fe5b6020020151816000600c8110151561091a57fe5b60200201818152505085600160048110151561093257fe5b6020020151816001600c8110151561094657fe5b60200201818152505085600260048110151561095e57fe5b6020020151816002600c8110151561097257fe5b60200201818152505085600360048110151561098a57fe5b6020020151816003600c8110151561099e57fe5b6020020181815250508160000151816004600c811015156109bb57fe5b6020020181815250508160200151816005600c811015156109d857fe5b6020020181815250508260000160000154816006600c811015156109f857fe5b6020020181815250508260000160010154816007600c81101515610a1857fe5b602002018181525050600160000154816008600c81101515610a3657fe5b6020020181815250506001800154816009600c81101515610a5357fe5b602002018181525050866000600281101515610a6b57fe5b602002015181600a600c81101515610a7f57fe5b602002018181525050866001600281101515610a9757fe5b602002015181600b600c81101515610aab57fe5b602002018181525050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb1382876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b83811015610b4a578082015181840152602081019050610b2f565b505050509050018281526020019250505060206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d6020811015610b9d57600080fd5b81019080805190602001909291905050501515610bc05760009350505050610ca5565b610bc8612474565b610c0d600060408051908101604052808b6000600281101515610be757fe5b602002015181526020018b6001600281101515610c0057fe5b6020020151815250612007565b9050806000015184600001600082015181600001556020820151816001015590505080602001518460020160008201518160000155602082015181600101559050508973ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400008b029081150290604051600060405180830381858888f19350505050158015610c9f573d6000803e3d6000fd5b50505050505b95945050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600090565b6000670de0b6b3a764000034111515610d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f657468206465706f7369746564206c657373207468616e20312065746800000081525060200191505060405180910390fd5b34670de0b6b3a76400008034811515610d6f57fe5b0402141515610de6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f65746820616d6f756e74206e6f7420616e20696e74656765720000000000000081525060200191505060405180910390fd5b6000670de0b6b3a764000034811515610dfb57fe5b0490506000806000856000600281101515610e1257fe5b602002015181526020019081526020016000206000856001600281101515610e3657fe5b602002015181526020019081526020016000209050610e53612474565b610e97836040805190810160405280886000600281101515610e7157fe5b60200201518152602001886001600281101515610e8a57fe5b6020020151815250612007565b9050610ed281600001518360000160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b826000016000820151816000015560208201518160010155905050610f2681602001518360020160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b82600201600082015181600001556020820151816001015590505060019350505050919050565b60018060000154908060010154905082565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038060000154908060010154905082565b6000610fa16124d9565b60008090505b6014811015610feb578781601c81101515610fbe57fe5b6020020151826000015182601481101515610fd557fe5b6020020181815250508080600101915050610fa7565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e26cc318260000151886000600e8110151561103e57fe5b6020020151896001600e8110151561105257fe5b60200201518a6002600e8110151561106657fe5b60200201516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085601460200280838360005b838110156110c15780820151818401526020810190506110a6565b5050505090500184815260200183815260200182815260200194505050505060206040518083038186803b1580156110f857600080fd5b505afa15801561110c573d6000803e3d6000fd5b505050506040513d602081101561112257600080fd5b810190808051906020019092919050505015156111a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7369676d6120766572696679206661696c65640000000000000000000000000081525060200191505060405180910390fd5b6040805190810160405280886002601c811015156111c157fe5b60200201518152602001886003601c811015156111da57fe5b60200201518152508160200151600001819052506040805190810160405280886004601c8110151561120857fe5b60200201518152602001886005601c8110151561122157fe5b60200201518152508160200151602001819052506000806000896000601c8110151561124957fe5b602002015181526020019081526020016000206000896001601c8110151561126d57fe5b6020020151815260200190815260200160002090506112c7611296836020015160000151611ed5565b8260000160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b8260600151600001819052506113186112e7836020015160200151611ed5565b8260020160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b8260600151602001819052506040805190810160405280896014601c8110151561133e57fe5b60200201518152602001896015601c8110151561135757fe5b60200201518152508260800151600001819052506040805190810160405280896016601c8110151561138557fe5b60200201518152602001896017601c8110151561139e57fe5b60200201518152508260800151602001819052506040805190810160405280896018601c811015156113cc57fe5b60200201518152602001896019601c811015156113e557fe5b60200201518152508260a00151600060028110151561140057fe5b6020020181905250604080519081016040528089601a601c8110151561142257fe5b6020020151815260200189601b601c8110151561143b57fe5b60200201518152508260a00151600160028110151561145657fe5b60200201819052506114c4826060015183608001518460a0015160408051908101604052808d6000601c8110151561148a57fe5b602002015181526020018d6001601c811015156114a357fe5b60200201518152508b6003600e811015156114ba57fe5b602002015161213c565b1515611538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f646c65207369676d612070726f6f66206661696c65640000000000000000000081525060200191505060405180910390fd5b60008090505b600881101561158257868160108110151561155557fe5b60200201518360c0015182600a8110151561156c57fe5b602002018181525050808060010191505061153e565b50876004601c8110151561159257fe5b60200201518260c001516008600a811015156115aa57fe5b602002018181525050876005601c811015156115c257fe5b60200201518260c001516009600a811015156115da57fe5b60200201818152505060008090505b600460020281101561166057858160108110151561160357fe5b60200201518361010001518260088110151561161b57fe5b602002018181525050848160108110151561163257fe5b60200201518361012001518260088110151561164a57fe5b60200201818152505080806001019150506115e9565b5060008090505b60058110156116ae578781600401600e8110151561168157fe5b60200201518360e001518260058110151561169857fe5b6020020181815250508080600101915050611667565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae288360c001518460e001518561010001518661012001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b8381101561175957808201518184015260208101905061173e565b5050505090500184600560200280838360005b8381101561178757808201518184015260208101905061176c565b5050505090500183600860200280838360005b838110156117b557808201518184015260208101905061179a565b5050505090500182600860200280838360005b838110156117e35780820151818401526020810190506117c8565b5050505090500194505050505060206040518083038186803b15801561180857600080fd5b505afa15801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b810190808051906020019092919050505015156118b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f72616e67652070726f6f662031206661696c656400000000000000000000000081525060200191505060405180910390fd5b60008090505b60088110156119045786816008016010811015156118d757fe5b60200201518360c0015182600a811015156118ee57fe5b60200201818152505080806001019150506118bd565b50876016601c8110151561191457fe5b60200201518260c001516008600a8110151561192c57fe5b602002018181525050876017601c8110151561194457fe5b60200201518260c001516009600a8110151561195c57fe5b60200201818152505060008090505b60046002028110156119ee57856004600202820160108110151561198b57fe5b6020020151836101000151826008811015156119a357fe5b60200201818152505084600460020282016010811015156119c057fe5b6020020151836101200151826008811015156119d857fe5b602002018181525050808060010191505061196b565b5060008090505b6005811015611a3c578781600901600e81101515611a0f57fe5b60200201518360e0015182600581101515611a2657fe5b60200201818152505080806001019150506119f5565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635eacae288360c001518460e001518561010001518661012001516040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600a60200280838360005b83811015611ae7578082015181840152602081019050611acc565b5050505090500184600560200280838360005b83811015611b15578082015181840152602081019050611afa565b5050505090500183600860200280838360005b83811015611b43578082015181840152602081019050611b28565b5050505090500182600860200280838360005b83811015611b71578082015181840152602081019050611b56565b5050505090500194505050505060206040518083038186803b158015611b9657600080fd5b505afa158015611baa573d6000803e3d6000fd5b505050506040513d6020811015611bc057600080fd5b81019080805190602001909291905050501515611c45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f72616e67652070726f6f66203220766572696679206661696c6564000000000081525060200191505060405180910390fd5b81606001516000015181600001600082015181600001556020820151816001015590505081606001516020015181600201600082015181600001556020820151816001015590505060008060008a6006601c81101515611ca157fe5b6020020151815260200190815260200160002060008a6007601c81101515611cc557fe5b60200201518152602001908152602001600020905060408051908101604052808a6008601c81101515611cf457fe5b602002015181526020018a6009601c81101515611d0d57fe5b602002015181525083604001516000018190525060408051908101604052808a600a601c81101515611d3b57fe5b602002015181526020018a600b601c81101515611d5457fe5b6020020151815250836040015160200181905250611da58360400151600001518260000160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b816000016000820151816000015560208201518160010155905050611dfd8360400151602001518260020160408051908101604052908160008201548152602001600182015481525050611f6590919063ffffffff16565b8160020160008201518160000155602082015181600101559050506001935050505095945050505050565b611e3061249b565b6001821415611e4157829050611ecf565b6002821415611e5b57611e548384611f65565b9050611ecf565b611e63612569565b8360000151816000600381101515611e7757fe5b6020020181815250508360200151816001600381101515611e9457fe5b60200201818152505082816002600381101515611ead57fe5b6020020181815250506040826060836007600019fa1515611ecd57600080fd5b505b92915050565b611edd61249b565b60008260000151148015611ef5575060008260200151145b15611f185760408051908101604052806000815260200160008152509050611f60565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b611f6d61249b565b611f75612451565b8360000151816000600481101515611f8957fe5b6020020181815250508360200151816001600481101515611fa657fe5b6020020181815250508260000151816002600481101515611fc357fe5b6020020181815250508260200151816003600481101515611fe057fe5b6020020181815250506040826080836006600019fa151561200057600080fd5b5092915050565b61200f612474565b601060020a8310151561208a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f616d6f756e74206f7574206f662072616e67650000000000000000000000000081525060200191505060405180910390fd5b6000809050612097612474565b6120aa8285611e2890919063ffffffff16565b81600001819052506121296120e883600160408051908101604052908160008201548152602001600182015481525050611e2890919063ffffffff16565b61211b87600360408051908101604052908160008201548152602001600182015481525050611e2890919063ffffffff16565b611f6590919063ffffffff16565b8160200181905250809250505092915050565b600061214661249b565b6121696121568860200151611ed5565b8760200151611f6590919063ffffffff16565b905061217361249b565b6121966121838960000151611ed5565b8860000151611f6590919063ffffffff16565b90506121a06124b5565b8660006002811015156121af57fe5b602002015160000151816000600c811015156121c757fe5b6020020181815250508660006002811015156121df57fe5b602002015160200151816001600c811015156121f757fe5b60200201818152505086600160028110151561220f57fe5b602002015160000151816002600c8110151561222757fe5b60200201818152505086600160028110151561223f57fe5b602002015160200151816003600c8110151561225757fe5b6020020181815250508260000151816004600c8110151561227457fe5b6020020181815250508260200151816005600c8110151561229157fe5b6020020181815250508160000151816006600c811015156122ae57fe5b6020020181815250508160200151816007600c811015156122cb57fe5b602002018181525050600160000154816008600c811015156122e957fe5b6020020181815250506001800154816009600c8110151561230657fe5b602002018181525050856000015181600a600c8110151561232357fe5b602002018181525050856020015181600b600c8110151561234057fe5b602002018181525050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639751cb1382876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600c60200280838360005b838110156123df5780820151818401526020810190506123c4565b505050509050018281526020019250505060206040518083038186803b15801561240857600080fd5b505afa15801561241c573d6000803e3d6000fd5b505050506040513d602081101561243257600080fd5b8101908080519060200190929190505050935050505095945050505050565b608060405190810160405280600490602082028038833980820191505090505090565b60806040519081016040528061248861258c565b815260200161249561258c565b81525090565b604080519081016040528060008152602001600081525090565b61018060405190810160405280600c90602082028038833980820191505090505090565b6108e0604051908101604052806124ee6125a6565b81526020016124fb6125ca565b81526020016125086125ca565b81526020016125156125ca565b81526020016125226125ca565b815260200161252f6125f1565b815260200161253c61261f565b8152602001612549612643565b8152602001612556612666565b8152602001612563612666565b81525090565b606060405190810160405280600390602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b61028060405190810160405280601490602082028038833980820191505090505090565b6080604051908101604052806125de61258c565b81526020016125eb61258c565b81525090565b6080604051908101604052806002905b61260961258c565b8152602001906001900390816126015790505090565b61014060405190810160405280600a90602082028038833980820191505090505090565b60a060405190810160405280600590602082028038833980820191505090505090565b6101006040519081016040528060089060208202803883398082019150509050509056fea165627a7a72305820631020a531dff3949573ef239730762c31cd7afff450519948ac542ffaa394ed0029";

    public static final String FUNC_N = "n";

    public static final String FUNC_DLESIGMAVERIFIER = "dleSigmaVerifier";

    public static final String FUNC_BITSIZE = "bitSize";

    public static final String FUNC_RANGEPROOFVERIFIER = "rangeProofVerifier";

    public static final String FUNC_SIGMAVERIFIER = "sigmaVerifier";

    public static final String FUNC_H = "h";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_G = "g";

    public static final String FUNC_DEPOSITACCOUNT = "depositAccount";

    public static final String FUNC_GETUSERBALANCE = "getUserBalance";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_TRANSFER = "transfer";

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PGC(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> n() {
        final Function function = new Function(FUNC_N, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dleSigmaVerifier() {
        final Function function = new Function(FUNC_DLESIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> bitSize() {
        final Function function = new Function(FUNC_BITSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> rangeProofVerifier() {
        final Function function = new Function(FUNC_RANGEPROOFVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> sigmaVerifier() {
        final Function function = new Function(FUNC_SIGMAVERIFIER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PGC> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_, String dleSigmaVerifier_, String rangeProofVerifier_, String sigmaVerifier_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_), 
                new org.web3j.abi.datatypes.Address(dleSigmaVerifier_), 
                new org.web3j.abi.datatypes.Address(rangeProofVerifier_), 
                new org.web3j.abi.datatypes.Address(sigmaVerifier_)));
        return deployRemoteCall(PGC.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> depositAccount(List<BigInteger> publicKey, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DEPOSITACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<List> getUserBalance(BigInteger x, BigInteger y) {
        final Function function = new Function(FUNC_GETUSERBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x), 
                new org.web3j.abi.datatypes.generated.Uint256(y)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray4<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> burn(String receiver, BigInteger amount, List<BigInteger> publicKey, List<BigInteger> proof, BigInteger z) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(receiver), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(publicKey, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray4<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(proof, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(z)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer() {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> rpoints, List<BigInteger> l, List<BigInteger> r) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray28<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(rpoints, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray16<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PGC(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PGC load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PGC load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PGC(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
