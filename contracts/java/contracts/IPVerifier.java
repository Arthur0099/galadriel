package contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class IPVerifier extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051611b63380380611b638339818101604052602081101561003357600080fd5b810190808051906020019092919050505050611b0f806100546000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637b7fc9ad1461003b5780639761686314610368575b600080fd5b61034e600480360361016081101561005257600080fd5b810190808035906020019064010000000081111561006f57600080fd5b82018360208201111561008157600080fd5b803590602001918460208302840111640100000000831117156100a357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561010357600080fd5b82018360208201111561011557600080fd5b8035906020019184602083028401116401000000008311171561013757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019064010000000081111561022357600080fd5b82018360208201111561023557600080fd5b8035906020019184602083028401116401000000008311171561025757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102b757600080fd5b8201836020820111156102c957600080fd5b803590602001918460208302840111640100000000831117156102eb57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610695565b604051808215151515815260200191505060405180910390f35b61067b600480360361016081101561037f57600080fd5b810190808035906020019064010000000081111561039c57600080fd5b8201836020820111156103ae57600080fd5b803590602001918460208302840111640100000000831117156103d057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561043057600080fd5b82018360208201111561044257600080fd5b8035906020019184602083028401116401000000008311171561046457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019064010000000081111561055057600080fd5b82018360208201111561056257600080fd5b8035906020019184602083028401116401000000008311171561058457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105e457600080fd5b8201836020820111156105f657600080fd5b8035906020019184602083028401116401000000008311171561061857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291905050506106f5565b604051808215151515815260200191505060405180910390f35b600061069f611997565b60006106b28c8c8c8c8c8c8c8c8c610755565b8093508192505050806106ca576000925050506106e8565b6106e38c8c8460000151856020015186604001516109b1565b925050505b9998505050505050505050565b60006106ff611997565b60006107128c8c8c8c8c8c8c8c8c610755565b80935081925050508061072a57600092505050610748565b6107438c8c846000015185602001518660400151610fb5565b925050505b9998505050505050505050565b600061075f611997565b610767611997565b8a518c5114158061077a57508551875114155b1561078c5760008192509250506109a3565b60028c518161079757fe5b0460028851816107a357fe5b0460020a146107b95760008192509250506109a3565b86516040519080825280602002602001820160405280156107e95781602001602082028038833980820191505090505b5081604001516000018190525086516040519080825280602002602001820160405280156108265781602001602082028038833980820191505090505b5081604001516020018190525060008090505b87518110156108b75787818151811061084e57fe5b6020026020010151826040015160000151828151811061086a57fe5b60200260200101818152505086818151811061088257fe5b6020026020010151826040015160200151828151811061089e57fe5b6020026020010181815250508080600101915050610839565b508481604001516040018181525050838160400151606001818152505060006108df89611481565b905061092a8160405180604001604052808d6000600281106108fd57fe5b602002015181526020018d60016002811061091457fe5b60200201518152506114bc90919063ffffffff16565b826000018190525061099160405180604001604052808d60006002811061094d57fe5b602002015181526020018d60016002811061096457fe5b60200201518152506109838b85600001516114bc90919063ffffffff16565b61156190919063ffffffff16565b82602001819052506001829350935050505b995099975050505050505050565b60006109bb6119ca565b60006002905060008090505b6002856000015151816109d657fe5b04811015610e61576040518060400160405280866000015183600202815181106109fc57fe5b6020026020010151815260200186600001516001846002020181518110610a1f57fe5b60200260200101518152508360000181905250604051806040016040528086602001518360020281518110610a5057fe5b6020026020010151815260200186602001516001846002020181518110610a7357fe5b602002602001015181525083602001819052506000610b0286600001518360020281518110610a9e57fe5b602002602001015187600001516001856002020181518110610abc57fe5b602002602001015188602001518560020281518110610ad757fe5b602002602001015189602001516001876002020181518110610af557fe5b60200260200101516115f9565b90506000610b0f8261164f565b905060008090505b8460028d5181610b2357fe5b0481610b2b57fe5b04811015610dc457808560028e5181610b4057fe5b0481610b4857fe5b04018660c001818152505060405180604001604052808d8360020281518110610b6d57fe5b602002602001015181526020018d6001846002020181518110610b8c57fe5b6020026020010151815250866040018190525060405180604001604052808d60028960c001510281518110610bbd57fe5b602002602001015181526020018d600160028a60c00151020181518110610be057fe5b60200260200101518152508660600181905250610c32610c0d8488606001516114bc90919063ffffffff16565b610c248489604001516114bc90919063ffffffff16565b61156190919063ffffffff16565b86608001819052508560800151600001518c6002830281518110610c5257fe5b6020026020010181815250508560800151602001518c6001600284020181518110610c7957fe5b60200260200101818152505060405180604001604052808c8360020281518110610c9f57fe5b602002602001015181526020018c6001846002020181518110610cbe57fe5b6020026020010151815250866040018190525060405180604001604052808c60028960c001510281518110610cef57fe5b602002602001015181526020018c600160028a60c00151020181518110610d1257fe5b60200260200101518152508660600181905250610d64610d3f8388606001516114bc90919063ffffffff16565b610d568589604001516114bc90919063ffffffff16565b61156190919063ffffffff16565b8660a001819052508560a00151600001518b6002830281518110610d8457fe5b6020026020010181815250508560a00151602001518b6001600284020181518110610dab57fe5b6020026020010181815250508080600101915050610b17565b50610e4a88610e3c610dfd610dea610de5868761171990919063ffffffff16565b611753565b89602001516114bc90919063ffffffff16565b610e2e610e1b610e16888961171990919063ffffffff16565b611753565b8a600001516114bc90919063ffffffff16565b61156190919063ffffffff16565b61156190919063ffffffff16565b9750600284029350505080806001019150506109c7565b506000610e87610e828660600151876040015161171990919063ffffffff16565b611753565b905060405180604001604052808a600081518110610ea157fe5b602002602001015181526020018a600181518110610ebb57fe5b60200260200101518152508360400181905250604051806040016040528089600081518110610ee657fe5b6020026020010151815260200189600181518110610f0057fe5b60200260200101518152508360600181905250610f1b611a3a565b610f86610f39876060015186606001516114bc90919063ffffffff16565b610f78610f57896040015188604001516114bc90919063ffffffff16565b610f6a868d6114bc90919063ffffffff16565b61156190919063ffffffff16565b61156190919063ffffffff16565b905080600001518760000151148015610fa6575080602001518760200151145b94505050505095945050505050565b6000610fbf6119ca565b600283600001515181610fce57fe5b04604051908082528060200260200182016040528015610ffd5781602001602082028038833980820191505090505b508160e0018190525060028360000151518161101557fe5b046040519080825280602002602001820160405280156110445781602001602082028038833980820191505090505b5081610100018190525060008090505b60028460000151518161106357fe5b0481101561125f5760405180604001604052808560000151836002028151811061108957fe5b60200260200101518152602001856000015160018460020201815181106110ac57fe5b602002602001015181525082600001819052506040518060400160405280856020015183600202815181106110dd57fe5b602002602001015181526020018560200151600184600202018151811061110057fe5b60200260200101518152508260200181905250600061118f8560000151836002028151811061112b57fe5b60200260200101518660000151600185600202018151811061114957fe5b60200260200101518760200151856002028151811061116457fe5b60200260200101518860200151600187600202018151811061118257fe5b60200260200101516115f9565b9050600061119c8261164f565b9050818460e0015184815181106111af57fe5b6020026020010181815250508084610100015184815181106111cd57fe5b60200260200101818152505061124e6112056111f2838461171990919063ffffffff16565b86602001516114bc90919063ffffffff16565b61124061123161121e868761171990919063ffffffff16565b88600001516114bc90919063ffffffff16565b8a61156190919063ffffffff16565b61156190919063ffffffff16565b965050508080600101915050611054565b506060600288518161126d57fe5b0460405190808252806020026020018201604052801561129c5781602001602082028038833980820191505090505b50905060008090505b60028951816112b057fe5b048110156113bb5760008090505b6002866000015151816112cd57fe5b048110156113ad5760006112f1838360028a6000015151816112eb57fe5b0461178b565b15611315578460e00151828151811061130657fe5b60200260200101519050611331565b846101000151828151811061132657fe5b602002602001015190505b6000821415611358578084848151811061134757fe5b60200260200101818152505061139f565b6113866113818286868151811061136b57fe5b602002602001015161171990919063ffffffff16565b611753565b84848151811061139257fe5b6020026020010181815250505b5080806001019150506112be565b5080806001019150506112a5565b506113c4611a3a565b6114536113f46113e58760600151886040015161171990919063ffffffff16565b896114bc90919063ffffffff16565b61144561141788606001516114098d886117dc565b6114bc90919063ffffffff16565b61143789604001516114298f8961187d565b6114bc90919063ffffffff16565b61156190919063ffffffff16565b61156190919063ffffffff16565b905085600001518160000151148015611473575085602001518160200151145b935050505095945050505050565b60006114b582604051602001808281526020019150506040516020818303038152906040528051906020012060001c611753565b9050919050565b6114c4611a3a565b60018214156114d55782905061155b565b60028214156114ef576114e88384611561565b905061155b565b6114f7611a54565b83600001518160006003811061150957fe5b60200201818152505083602001518160016003811061152457fe5b602002018181525050828160026003811061153b57fe5b6020020181815250506040826060836007600019fa61155957600080fd5b505b92915050565b611569611a3a565b611571611a76565b83600001518160006004811061158357fe5b60200201818152505083602001518160016004811061159e57fe5b6020020181815250508260000151816002600481106115b957fe5b6020020181815250508260200151816003600481106115d457fe5b6020020181815250506040826080836006600019fa6115f257600080fd5b5092915050565b600061164585858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060001c611753565b9050949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506000839050600081141561168e57600092505050611714565b818111156116a35781818161169f57fe5b0690505b600080600190506000849050600084905060005b600082146116ec578183816116c857fe5b049050838482028603838484028603809550819650829750839850505050506116b7565b600085121561170957846000038703975050505050505050611714565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808061174757fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080838161178257fe5b06915050919050565b600080600183036001901b905060008090505b848110156117ba57600182901c9150808060010191505061179e565b506000818616146117cf5760019150506117d5565b60009150505b9392505050565b6117e4611a3a565b606082516040519080825280602002602001820160405280156118165781602001602082028038833980820191505090505b50905060008090505b83518110156118695761184484828151811061183757fe5b602002602001015161164f565b82828151811061185057fe5b602002602001018181525050808060010191505061181f565b50611874848261187d565b91505092915050565b611885611a3a565b61188d611a3a565b6118f08360008151811061189d57fe5b60200260200101516040518060400160405280876000815181106118bd57fe5b60200260200101518152602001876001815181106118d757fe5b60200260200101518152506114bc90919063ffffffff16565b90506000600190505b835181101561198c5761197d61196e85838151811061191457fe5b6020026020010151604051806040016040528089866002028151811061193657fe5b6020026020010151815260200189600187600202018151811061195557fe5b60200260200101518152506114bc90919063ffffffff16565b8361156190919063ffffffff16565b915080806001019150506118f9565b508091505092915050565b60405180606001604052806119aa611a98565b81526020016119b7611a98565b81526020016119c4611ab2565b81525090565b6040518061012001604052806119de611a98565b81526020016119eb611a98565b81526020016119f8611a98565b8152602001611a05611a98565b8152602001611a12611a98565b8152602001611a1f611a98565b81526020016000815260200160608152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b604051806040016040528060008152602001600081525090565b604051806080016040528060608152602001606081526020016000815260200160008152509056fea265627a7a7231582078f8119f085506045a449792bae6473cd6c25932b75cd95a755ade7d92ccd34864736f6c63430005100032";

    public static final String FUNC_OPTIMIZEDVERIFYIPPROOF = "optimizedVerifyIPProof";

    public static final String FUNC_VERIFYIPPROOF = "verifyIPProof";

    @Deprecated
    protected IPVerifier(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IPVerifier(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected IPVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected IPVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<IPVerifier> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<IPVerifier> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IPVerifier> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IPVerifier> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<Boolean> optimizedVerifyIPProof(List<BigInteger> gv, List<BigInteger> hv, List<BigInteger> p, List<BigInteger> u, BigInteger c, List<BigInteger> l, List<BigInteger> r, BigInteger a, BigInteger b) {
        final Function function = new Function(FUNC_OPTIMIZEDVERIFYIPPROOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(p, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(u, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(c), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(a), 
                new org.web3j.abi.datatypes.generated.Uint256(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verifyIPProof(List<BigInteger> gv, List<BigInteger> hv, List<BigInteger> p, List<BigInteger> u, BigInteger c, List<BigInteger> l, List<BigInteger> r, BigInteger a, BigInteger b) {
        final Function function = new Function(FUNC_VERIFYIPPROOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(p, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(u, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(c), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(a), 
                new org.web3j.abi.datatypes.generated.Uint256(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static IPVerifier load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IPVerifier(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static IPVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IPVerifier(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static IPVerifier load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new IPVerifier(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static IPVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new IPVerifier(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
