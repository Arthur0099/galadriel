package contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class IPVerifier extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051602080611cae8339810180604052602081101561003057600080fd5b810190808051906020019092919050505050611c5d806100516000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637b7fc9ad14610051578063976168631461038b575b600080fd5b34801561005d57600080fd5b50610371600480360361016081101561007557600080fd5b810190808035906020019064010000000081111561009257600080fd5b8201836020820111156100a457600080fd5b803590602001918460208302840111640100000000831117156100c657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561012657600080fd5b82018360208201111561013857600080fd5b8035906020019184602083028401116401000000008311171561015a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019064010000000081111561024657600080fd5b82018360208201111561025857600080fd5b8035906020019184602083028401116401000000008311171561027a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102da57600080fd5b8201836020820111156102ec57600080fd5b8035906020019184602083028401116401000000008311171561030e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291905050506106c5565b604051808215151515815260200191505060405180910390f35b34801561039757600080fd5b506106ab60048036036101608110156103af57600080fd5b81019080803590602001906401000000008111156103cc57600080fd5b8201836020820111156103de57600080fd5b8035906020019184602083028401116401000000008311171561040057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561046057600080fd5b82018360208201111561047257600080fd5b8035906020019184602083028401116401000000008311171561049457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001909291908035906020019064010000000081111561058057600080fd5b82018360208201111561059257600080fd5b803590602001918460208302840111640100000000831117156105b457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561061457600080fd5b82018360208201111561062657600080fd5b8035906020019184602083028401116401000000008311171561064857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610727565b604051808215151515815260200191505060405180910390f35b60006106cf611ae8565b60006106e28c8c8c8c8c8c8c8c8c610789565b80935081925050508015156106fc5760009250505061071a565b6107158c8c846000015185602001518660400151610a03565b925050505b9998505050505050505050565b6000610731611ae8565b60006107448c8c8c8c8c8c8c8c8c610789565b809350819250505080151561075e5760009250505061077c565b6107778c8c846000015185602001518660400151611071565b925050505b9998505050505050505050565b6000610793611ae8565b61079b611ae8565b8a518c511415806107ae57508551875114155b156107c05760008192509250506109f5565b60028c518115156107cd57fe5b04600288518115156107db57fe5b0460020a1415156107f35760008192509250506109f5565b86516040519080825280602002602001820160405280156108235781602001602082028038833980820191505090505b5081604001516000018190525086516040519080825280602002602001820160405280156108605781602001602082028038833980820191505090505b5081604001516020018190525060008090505b875181101561090157878181518110151561088a57fe5b90602001906020020151826040015160000151828151811015156108aa57fe5b906020019060200201818152505086818151811015156108c657fe5b90602001906020020151826040015160200151828151811015156108e657fe5b90602001906020020181815250508080600101915050610873565b5084816040015160400181815250508381604001516060018181525050600061092989611587565b90506109788160408051908101604052808d600060028110151561094957fe5b602002015181526020018d600160028110151561096257fe5b60200201518152506115c390919063ffffffff16565b82600001819052506109e360408051908101604052808d600060028110151561099d57fe5b602002015181526020018d60016002811015156109b657fe5b60200201518152506109d58b85600001516115c390919063ffffffff16565b61167090919063ffffffff16565b82602001819052506001829350935050505b995099975050505050505050565b6000610a0d611b1d565b60006002905060008090505b6002856000015151811515610a2a57fe5b04811015610f0d576040805190810160405280866000015183600202815181101515610a5257fe5b906020019060200201518152602001866000015160018460020201815181101515610a7957fe5b9060200190602002015181525083600001819052506040805190810160405280866020015183600202815181101515610aae57fe5b906020019060200201518152602001866020015160018460020201815181101515610ad557fe5b9060200190602002015181525083602001819052506000610b76866000015183600202815181101515610b0457fe5b90602001906020020151876000015160018560020201815181101515610b2657fe5b90602001906020020151886020015185600202815181101515610b4557fe5b90602001906020020151896020015160018760020201815181101515610b6757fe5b90602001906020020151611712565b90506000610b8382611769565b905060008090505b8460028d51811515610b9957fe5b04811515610ba357fe5b04811015610e7057808560028e51811515610bba57fe5b04811515610bc457fe5b04018660c001818152505060408051908101604052808d83600202815181101515610beb57fe5b9060200190602002015181526020018d60018460020201815181101515610c0e57fe5b90602001906020020151815250866040018190525060408051908101604052808d60028960c0015102815181101515610c4357fe5b9060200190602002015181526020018d600160028a60c001510201815181101515610c6a57fe5b906020019060200201518152508660600181905250610cbe610c998488606001516115c390919063ffffffff16565b610cb08489604001516115c390919063ffffffff16565b61167090919063ffffffff16565b86608001819052508560800151600001518c60028302815181101515610ce057fe5b90602001906020020181815250508560800151602001518c60016002840201815181101515610d0b57fe5b906020019060200201818152505060408051908101604052808c83600202815181101515610d3557fe5b9060200190602002015181526020018c60018460020201815181101515610d5857fe5b90602001906020020151815250866040018190525060408051908101604052808c60028960c0015102815181101515610d8d57fe5b9060200190602002015181526020018c600160028a60c001510201815181101515610db457fe5b906020019060200201518152508660600181905250610e08610de38388606001516115c390919063ffffffff16565b610dfa8589604001516115c390919063ffffffff16565b61167090919063ffffffff16565b8660a001819052508560a00151600001518b60028302815181101515610e2a57fe5b90602001906020020181815250508560a00151602001518b60016002840201815181101515610e5557fe5b90602001906020020181815250508080600101915050610b8b565b50610ef688610ee8610ea9610e96610e91868761183990919063ffffffff16565b611875565b89602001516115c390919063ffffffff16565b610eda610ec7610ec2888961183990919063ffffffff16565b611875565b8a600001516115c390919063ffffffff16565b61167090919063ffffffff16565b61167090919063ffffffff16565b975060028402935050508080600101915050610a19565b506000610f33610f2e8660600151876040015161183990919063ffffffff16565b611875565b905060408051908101604052808a6000815181101515610f4f57fe5b9060200190602002015181526020018a6001815181101515610f6d57fe5b9060200190602002015181525083604001819052506040805190810160405280896000815181101515610f9c57fe5b906020019060200201518152602001896001815181101515610fba57fe5b906020019060200201518152508360600181905250610fd7611b8e565b611042610ff5876060015186606001516115c390919063ffffffff16565b611034611013896040015188604001516115c390919063ffffffff16565b611026868d6115c390919063ffffffff16565b61167090919063ffffffff16565b61167090919063ffffffff16565b905080600001518760000151148015611062575080602001518760200151145b94505050505095945050505050565b600061107b611b1d565b600283600001515181151561108c57fe5b046040519080825280602002602001820160405280156110bb5781602001602082028038833980820191505090505b508160e0018190525060028360000151518115156110d557fe5b046040519080825280602002602001820160405280156111045781602001602082028038833980820191505090505b5081610100018190525060008090505b600284600001515181151561112557fe5b0481101561134957604080519081016040528085600001518360020281518110151561114d57fe5b90602001906020020151815260200185600001516001846002020181518110151561117457fe5b90602001906020020151815250826000018190525060408051908101604052808560200151836002028151811015156111a957fe5b9060200190602002015181526020018560200151600184600202018151811015156111d057fe5b90602001906020020151815250826020018190525060006112718560000151836002028151811015156111ff57fe5b9060200190602002015186600001516001856002020181518110151561122157fe5b9060200190602002015187602001518560020281518110151561124057fe5b9060200190602002015188602001516001876002020181518110151561126257fe5b90602001906020020151611712565b9050600061127e82611769565b9050818460e001518481518110151561129357fe5b906020019060200201818152505080846101000151848151811015156112b557fe5b90602001906020020181815250506113386112ef6112dc838461183990919063ffffffff16565b86602001516115c390919063ffffffff16565b61132a61131b611308868761183990919063ffffffff16565b88600001516115c390919063ffffffff16565b8a61167090919063ffffffff16565b61167090919063ffffffff16565b965050508080600101915050611114565b5060606002885181151561135957fe5b046040519080825280602002602001820160405280156113885781602001602082028038833980820191505090505b50905060008090505b6002895181151561139e57fe5b048110156114c15760008090505b60028660000151518115156113bd57fe5b048110156114b35760006113e3838360028a60000151518115156113dd57fe5b046118af565b1561140b578460e00151828151811015156113fa57fe5b90602001906020020151905061142b565b8461010001518281518110151561141e57fe5b9060200190602002015190505b60008214156114565780848481518110151561144357fe5b90602001906020020181815250506114a5565b61148861148382868681518110151561146b57fe5b9060200190602002015161183990919063ffffffff16565b611875565b848481518110151561149657fe5b90602001906020020181815250505b5080806001019150506113ac565b508080600101915050611391565b506114ca611b8e565b6115596114fa6114eb8760600151886040015161183990919063ffffffff16565b896115c390919063ffffffff16565b61154b61151d886060015161150f8d8861190d565b6115c390919063ffffffff16565b61153d896040015161152f8f896119b6565b6115c390919063ffffffff16565b61167090919063ffffffff16565b61167090919063ffffffff16565b905085600001518160000151148015611579575085602001518160200151145b935050505095945050505050565b60006115bc82604051602001808281526020019150506040516020818303038152906040528051906020012060019004611875565b9050919050565b6115cb611b8e565b60018214156115dc5782905061166a565b60028214156115f6576115ef8384611670565b905061166a565b6115fe611ba8565b836000015181600060038110151561161257fe5b602002018181525050836020015181600160038110151561162f57fe5b6020020181815250508281600260038110151561164857fe5b6020020181815250506040826060836007600019fa151561166857600080fd5b505b92915050565b611678611b8e565b611680611bcb565b836000015181600060048110151561169457fe5b60200201818152505083602001518160016004811015156116b157fe5b60200201818152505082600001518160026004811015156116ce57fe5b60200201818152505082602001518160036004811015156116eb57fe5b6020020181815250506040826080836006600019fa151561170b57600080fd5b5092915050565b600061175f85858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004611875565b9050949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600083905060008114156117a857600092505050611834565b818111156117bf5781818115156117bb57fe5b0690505b600080600190506000849050600084905060005b60008214151561180c5781838115156117e857fe5b049050838482028603838484028603809550819650829750839850505050506117d3565b600085121561182957846000038703975050505050505050611834565b849750505050505050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561186957fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080838115156118a657fe5b06915050919050565b6000806001830360019060020a02905060008090505b848110156118e957600182908060020a8204915050915080806001019150506118c5565b506000818616141515611900576001915050611906565b60009150505b9392505050565b611915611b8e565b606082516040519080825280602002602001820160405280156119475781602001602082028038833980820191505090505b50905060008090505b83518110156119a257611979848281518110151561196a57fe5b90602001906020020151611769565b828281518110151561198757fe5b90602001906020020181815250508080600101915050611950565b506119ad84826119b6565b91505092915050565b6119be611b8e565b6119c6611b8e565b611a358360008151811015156119d857fe5b9060200190602002015160408051908101604052808760008151811015156119fc57fe5b906020019060200201518152602001876001815181101515611a1a57fe5b906020019060200201518152506115c390919063ffffffff16565b90506000600190505b8351811015611add57611ace611abf8583815181101515611a5b57fe5b9060200190602002015160408051908101604052808986600202815181101515611a8157fe5b9060200190602002015181526020018960018760020201815181101515611aa457fe5b906020019060200201518152506115c390919063ffffffff16565b8361167090919063ffffffff16565b91508080600101915050611a3e565b508091505092915050565b61010060405190810160405280611afd611bee565b8152602001611b0a611bee565b8152602001611b17611c08565b81525090565b6101e060405190810160405280611b32611bee565b8152602001611b3f611bee565b8152602001611b4c611bee565b8152602001611b59611bee565b8152602001611b66611bee565b8152602001611b73611bee565b81526020016000815260200160608152602001606081525090565b604080519081016040528060008152602001600081525090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b60806040519081016040528060608152602001606081526020016000815260200160008152509056fea165627a7a72305820235ae25bb464a4debc065060fae6895e67e0142251e758f7a5353b5ac58f405b0029";

    public static final String FUNC_OPTIMIZEDVERIFYIPPROOF = "optimizedVerifyIPProof";

    public static final String FUNC_VERIFYIPPROOF = "verifyIPProof";

    @Deprecated
    protected IPVerifier(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IPVerifier(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected IPVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected IPVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<IPVerifier> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<IPVerifier> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IPVerifier> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<IPVerifier> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params)));
        return deployRemoteCall(IPVerifier.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<Boolean> optimizedVerifyIPProof(List<BigInteger> gv, List<BigInteger> hv, List<BigInteger> p, List<BigInteger> u, BigInteger c, List<BigInteger> l, List<BigInteger> r, BigInteger a, BigInteger b) {
        final Function function = new Function(FUNC_OPTIMIZEDVERIFYIPPROOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(p, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(u, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(c), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(a), 
                new org.web3j.abi.datatypes.generated.Uint256(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verifyIPProof(List<BigInteger> gv, List<BigInteger> hv, List<BigInteger> p, List<BigInteger> u, BigInteger c, List<BigInteger> l, List<BigInteger> r, BigInteger a, BigInteger b) {
        final Function function = new Function(FUNC_VERIFYIPPROOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(gv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(hv, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(p, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(u, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(c), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(a), 
                new org.web3j.abi.datatypes.generated.Uint256(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static IPVerifier load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IPVerifier(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static IPVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IPVerifier(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static IPVerifier load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new IPVerifier(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static IPVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new IPVerifier(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
