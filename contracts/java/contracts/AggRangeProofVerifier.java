package contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class AggRangeProofVerifier extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b506040516020806200280e833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200010857600080fd5b505afa1580156200011d573d6000803e3d6000fd5b505050506040513d60208110156200013457600080fd5b81019080805190602001909291905050506040141515620001bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269732073697a65206e6f7420657175616c000000000000000000000000000081525060200191505060405180910390fd5b620001c762000792565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200028557600080fd5b810190809190505090506200029962000792565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200031c57600080fd5b505afa15801562000331573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200035757600080fd5b810190809190505090506200036b62000792565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620003ee57600080fd5b505afa15801562000403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200042957600080fd5b810190809190505090506200043d620007b4565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634db118756040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120006040518083038186803b158015620004c257600080fd5b505afa158015620004d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612000811015620004fe57600080fd5b8101908091905050905062000512620007b4565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da2b99ce6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120006040518083038186803b1580156200059757600080fd5b505afa158015620005ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612000811015620005d357600080fd5b81019080919050509050846000600281101515620005ed57fe5b60200201516001600001819055508460016002811015156200060b57fe5b602002015160018001819055508360006002811015156200062857fe5b60200201516003600001819055508360016002811015156200064657fe5b60200201516003600101819055508260006002811015156200066457fe5b60200201516005600001819055508260016002811015156200068257fe5b602002015160056001018190555060008090505b60026040028110156200078557828160020261010081101515620006b657fe5b6020020151600782608081101515620006cb57fe5b6002020160000181905550826001826002020161010081101515620006ec57fe5b60200201516007826080811015156200070157fe5b60020201600101819055508181600202610100811015156200071f57fe5b6020020151610107826080811015156200073557fe5b60020201600001819055508160018260020201610100811015156200075657fe5b6020020151610107826080811015156200076c57fe5b6002020160010181905550808060010191505062000696565b50505050505050620007d9565b6040805190810160405280600290602082028038833980820191505090505090565b6120006040519081016040528061010090602082028038833980820191505090505090565b61202580620007e96000396000f3fe608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631213e20114610088578063654474ee146100ba578063b7479f5f14610110578063b8c9d36514610166578063cff0ab9614610198578063e2179b8e146101ef578063e5d34a6314610221575b600080fd5b34801561009457600080fd5b5061009d610372565b604051808381526020018281526020019250505060405180910390f35b3480156100c657600080fd5b506100f3600480360360208110156100dd57600080fd5b8101908080359060200190929190505050610384565b604051808381526020018281526020019250505060405180910390f35b34801561011c57600080fd5b506101496004803603602081101561013357600080fd5b81019080803590602001909291905050506103ae565b604051808381526020018281526020019250505060405180910390f35b34801561017257600080fd5b5061017b6103d7565b604051808381526020018281526020019250505060405180910390f35b3480156101a457600080fd5b506101ad6103e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101fb57600080fd5b5061020461040e565b604051808381526020018281526020019250505060405180910390f35b34801561022d57600080fd5b5061035860048036036105a081101561024557600080fd5b81019080806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f82011690508083019250505050505091929192908060a001906005806020026040519081016040528092919082600560200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101c00190600e806020026040519081016040528092919082600e60200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610420565b604051808215151515815260200191505060405180910390f35b60058060000154908060010154905082565b6101078160808110151561039457fe5b600202016000915090508060000154908060010154905082565b6007816080811015156103bd57fe5b600202016000915090508060000154908060010154905082565b60038060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018060000154908060010154905082565b600061042a611c3a565b6040805190810160405280876000600c8110151561044457fe5b60200201518152602001876001600c8110151561045d57fe5b602002015181525081600001819052506040805190810160405280876002600c8110151561048757fe5b60200201518152602001876003600c811015156104a057fe5b602002015181525081602001819052506040805190810160405280876004600c811015156104ca57fe5b60200201518152602001876005600c811015156104e357fe5b602002015181525081604001819052506040805190810160405280876006600c8110151561050d57fe5b60200201518152602001876007600c8110151561052657fe5b6020020151815250816060018190525084600060058110151561054557fe5b602002015181608001818152505084600160058110151561056257fe5b60200201518160a001818152505084600260058110151561057f57fe5b60200201518160c0018181525050610595611c9e565b6040805190810160405280886008600c811015156105af57fe5b60200201518152602001886009600c811015156105c857fe5b60200201518152508160006002811015156105df57fe5b6020020181905250604080519081016040528088600a600c8110151561060157fe5b6020020151815260200188600b600c8110151561061a57fe5b602002015181525081600160028110151561063157fe5b6020020181905250848260e0015160000181905250838260e001516020018190525085600360058110151561066257fe5b60200201518260e00151604001818152505085600460058110151561068357fe5b60200201518260e00151606001818152505061069f81836106ab565b92505050949350505050565b60006106b5611ccc565b6106bd6113f2565b90506106c7611ccc565b6106cf61148d565b90506106d9611cfb565b61070585600001516000015186600001516020015187602001516000015188602001516020015161152a565b8160a001818152505061073a85602001516000015186602001516020015187600001516000015188600001516020015161152a565b816101000181815250506107518160a00151611581565b8160c0018190525061076e6107698260a00151611629565b611581565b8160e001819052506107848161010001516116f9565b816101600181815250506107b36107ae82610100015183610100015161172590919063ffffffff16565b611761565b816101200181815250506107e26107dd82610100015183610120015161172590919063ffffffff16565b611761565b816101400181815250506107f6600261179b565b81610180018190525061082b85604001516000015186604001516020015187606001516000015188606001516020015161152a565b81606001818152505061084f8160600151826060015161172590919063ffffffff16565b8160800181815250506109176108768260800151876060015161184090919063ffffffff16565b6109096108948460600151896040015161184090919063ffffffff16565b6108fb6108c28661014001518c60016002811015156108af57fe5b602002015161184090919063ffffffff16565b6108ed8761012001518d60006002811015156108da57fe5b602002015161184090919063ffffffff16565b6118ed90919063ffffffff16565b6118ed90919063ffffffff16565b6118ed90919063ffffffff16565b816101c0018190525061099161094861093483610180015161198f565b83610140015161172590919063ffffffff16565b6109836109588460c001516119f6565b610975856101200151866101000151611a6090919063ffffffff16565b61172590919063ffffffff16565b611a6090919063ffffffff16565b816102000181815250506109ee6109da6109af83610180015161198f565b6109cc84610100015185610140015161172590919063ffffffff16565b61172590919063ffffffff16565b826102000151611a6090919063ffffffff16565b81610200018181525050610a8e610a328660a0015160036040805190810160405290816000820154815260200160018201548152505061184090919063ffffffff16565b610a80610a518461020001518960800151611a6090919063ffffffff16565b60016040805190810160405290816000820154815260200160018201548152505061184090919063ffffffff16565b6118ed90919063ffffffff16565b816101e00181905250806101e0015160000151816101c0015160000151141580610aca5750806101e0015160200151816101c001516020015114155b15610adb57600093505050506113ec565b610ae3611e1e565b610b14610b018360600151886020015161184090919063ffffffff16565b87600001516118ed90919063ffffffff16565b905060008090505b6001600601811015610d88576000610bb08860e001516000015183600202600e81101515610b4657fe5b60200201518960e001516000015160018560020201600e81101515610b6757fe5b60200201518a60e001516020015185600202600e81101515610b8557fe5b60200201518b60e001516020015160018760020201600e81101515610ba657fe5b602002015161152a565b90508084610220015183600781101515610bc657fe5b602002018181525050610bea610be5828361172590919063ffffffff16565b611761565b84610260015183600781101515610bfd57fe5b602002018181525050610c2684610260015183600781101515610c1c57fe5b6020020151611629565b84610280015183600781101515610c3957fe5b60200201818152505060408051908101604052808960e001516000015184600202600e81101515610c6657fe5b602002015181526020018960e001516000015160018560020201600e81101515610c8c57fe5b60200201518152508460400181905250610cdc610ccd85610260015184600781101515610cb557fe5b6020020151866040015161184090919063ffffffff16565b846118ed90919063ffffffff16565b925060408051908101604052808960e001516020015184600202600e81101515610d0257fe5b602002015181526020018960e001516020015160018560020201600e81101515610d2857fe5b60200201518152508460400181905250610d78610d6985610280015184600781101515610d5157fe5b6020020151866040015161184090919063ffffffff16565b846118ed90919063ffffffff16565b9250508080600101915050610b1c565b5060008090505b6002604002811015611272576000811415610ed05760008090505b6001600601811015610e5a57600084610220015182600781101515610dcb57fe5b602002015190506000821415610dfd5780856102c0015184608081101515610def57fe5b602002018181525050610e4c565b610e2f610e2a82876102c0015186608081101515610e1757fe5b602002015161172590919063ffffffff16565b611761565b856102c0015184608081101515610e4257fe5b6020020181815250505b508080600101915050610daa565b50826102c0015181608081101515610e6e57fe5b602002015183610300015182608081101515610e8657fe5b602002018181525050610eaf836102c0015182608081101515610ea557fe5b6020020151611629565b836102c0015182608081101515610ec257fe5b602002018181525050610fd4565b6000610ee0826001600601611aa5565b9050610f3e610f3985610260015183600160060103600781101515610f0157fe5b6020020151866102c00151610f1860018603611af5565b8603608081101515610f2657fe5b602002015161172590919063ffffffff16565b611761565b846102c0015183608081101515610f5157fe5b602002018181525050610fb6610fb185610280015183600160060103600781101515610f7957fe5b6020020151866103000151610f9060018603611af5565b8603608081101515610f9e57fe5b602002015161172590919063ffffffff16565b611761565b84610300015183608081101515610fc957fe5b602002018181525050505b826102c0015181608081101515610fe757fe5b6020020151836102a0015182608081101515610fff57fe5b6020020181815250508261030001518160808110151561101b57fe5b6020020151836102e001518260808110151561103357fe5b6020020181815250506110858361010001516110778960e0015160400151866102a001518560808110151561106457fe5b602002015161172590919063ffffffff16565b611b3d90919063ffffffff16565b836102a001518260808110151561109857fe5b6020020181815250506110d38760e0015160600151846102e00151836080811015156110c057fe5b602002015161172590919063ffffffff16565b836102e00151826080811015156110e657fe5b60200201818152505060408110156111715761115061112a8461018001518360408110151561111157fe5b602002015185610120015161172590919063ffffffff16565b846102e001518360808110151561113d57fe5b6020020151611a6090919063ffffffff16565b836102e001518260808110151561116357fe5b6020020181815250506111f2565b6111d56111af84610180015160408481151561118957fe5b0660408110151561119657fe5b602002015185610140015161172590919063ffffffff16565b846102e00151836080811015156111c257fe5b6020020151611a6090919063ffffffff16565b836102e00151826080811015156111e857fe5b6020020181815250505b61124983610100015161123b8560e001518460808110151561121057fe5b6020020151866102e001518560808110151561122857fe5b602002015161172590919063ffffffff16565b611a6090919063ffffffff16565b836102e001518260808110151561125c57fe5b6020020181815250508080600101915050610d8f565b5060006112ac8760800151604051602001808281526020019150506040516020818303038152906040528051906020012060019004611761565b90506113b36112e88860c0015160036040805190810160405290816000820154815260200160018201548152505061184090919063ffffffff16565b6113a561136861133961132a8c6080015161131c8e60e00151606001518f60e001516040015161172590919063ffffffff16565b611a6090919063ffffffff16565b8661172590919063ffffffff16565b60056040805190810160405290816000820154815260200160018201548152505061184090919063ffffffff16565b61139761137a89896102e00151611b79565b6113898b8a6102a00151611b79565b6118ed90919063ffffffff16565b6118ed90919063ffffffff16565b6118ed90919063ffffffff16565b836101e001819052508160000151836101e00151600001511480156113e457508160200151836101e0015160200151145b955050505050505b92915050565b6113fa611ccc565b611402611ccc565b60008090505b60026040028110156114855760078160808110151561142357fe5b6002020160000154828260808110151561143957fe5b6020020151600001818152505060078160808110151561145557fe5b6002020160010154828260808110151561146b57fe5b602002015160200181815250508080600101915050611408565b508091505090565b611495611ccc565b61149d611ccc565b60008090505b600260400281101561152257610107816080811015156114bf57fe5b600202016000015482826080811015156114d557fe5b60200201516000018181525050610107816080811015156114f257fe5b6002020160010154828260808110151561150857fe5b6020020151602001818152505080806001019150506114a3565b508091505090565b600061157785858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004611761565b9050949350505050565b611589611e38565b600181600060808110151561159a57fe5b602002018181525050818160016080811015156115b357fe5b6020020181815250506000600290505b6002604002811015611623576115ff6115fa8484600185036080811015156115e757fe5b602002015161172590919063ffffffff16565b611761565b828260808110151561160d57fe5b60200201818152505080806001019150506115c3565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060008390506000811415611668576000925050506116f4565b8181111561167f57818181151561167b57fe5b0690505b600080600190506000849050600084905060005b6000821415156116cc5781838115156116a857fe5b04905083848202860383848402860380955081965082975083985050505050611693565b60008512156116e9578460000387039750505050505050506116f4565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561175557fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808381151561179257fe5b06915050919050565b6117a3611e5c565b60018160006040811015156117b457fe5b602002018181525050818160016040811015156117cd57fe5b6020020181815250506000600290505b604081101561183a576118166118118484600185036040811015156117fe57fe5b602002015161172590919063ffffffff16565b611761565b828260408110151561182457fe5b60200201818152505080806001019150506117dd565b50919050565b611848611e1e565b6001821415611859578290506118e7565b60028214156118735761186c83846118ed565b90506118e7565b61187b611e80565b836000015181600060038110151561188f57fe5b60200201818152505083602001518160016003811015156118ac57fe5b602002018181525050828160026003811015156118c557fe5b6020020181815250506040826060836007600019fa15156118e557600080fd5b505b92915050565b6118f5611e1e565b6118fd611ea3565b836000015181600060048110151561191157fe5b602002018181525050836020015181600160048110151561192e57fe5b602002018181525050826000015181600260048110151561194b57fe5b602002018181525050826020015181600360048110151561196857fe5b6020020181815250506040826080836006600019fa151561198857600080fd5b5092915050565b6000808260006040811015156119a157fe5b602002015190506000600190505b60408110156119ec576119dd84826040811015156119c957fe5b602002015183611b3d90919063ffffffff16565b915080806001019150506119af565b5080915050919050565b600080826000608081101515611a0857fe5b602002015190506000600190505b6002604002811015611a5657611a478482608081101515611a3357fe5b602002015183611b3d90919063ffffffff16565b91508080600101915050611a16565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905082841015611a98578383820301611a9c565b8284035b91505092915050565b6000808260019060020a02905060005b8185108015611ac45750600082115b15611ae557600182908060020a820491505091508080600101915050611ab5565b8084600101039250505092915050565b6000808290506000811415611b0e576001915050611b38565b6000600190505b6000821115611b3257600281029050818060019003925050611b15565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080801515611b6d57fe5b83850891505092915050565b611b81611e1e565b611b89611e1e565b611bc2836000608081101515611b9b57fe5b6020020151856000608081101515611baf57fe5b602002015161184090919063ffffffff16565b90506000600190505b6002604002811015611c2f57611c20611c118583608081101515611beb57fe5b60200201518784608081101515611bfe57fe5b602002015161184090919063ffffffff16565b836118ed90919063ffffffff16565b91508080600101915050611bcb565b508091505092915050565b61052060405190810160405280611c4f611ec6565b8152602001611c5c611ec6565b8152602001611c69611ec6565b8152602001611c76611ec6565b8152602001600081526020016000815260200160008152602001611c98611ee0565b81525090565b6080604051908101604052806002905b611cb6611ec6565b815260200190600190039081611cae5790505090565b612000604051908101604052806080905b611ce5611ec6565b815260200190600190039081611cdd5790505090565b61bd4060405190810160405280611d10611f16565b8152602001611d1d611f16565b8152602001611d2a611ec6565b8152602001600081526020016000815260200160008152602001611d4c611f3b565b8152602001611d59611f3b565b815260200160008152602001600081526020016000815260200160008152602001611d82611f5f565b8152602001611d8f611f83565b8152602001611d9c611ec6565b8152602001611da9611ec6565b815260200160008152602001611dbd611fb2565b8152602001611dca611fb2565b8152602001611dd7611fb2565b8152602001611de4611fb2565b8152602001611df1611f3b565b8152602001611dfe611f3b565b8152602001611e0b611f3b565b8152602001611e18611f3b565b81525090565b604080519081016040528060008152602001600081525090565b61100060405190810160405280608090602082028038833980820191505090505090565b61080060405190810160405280604090602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b6103c060405190810160405280611ef5611fd5565b8152602001611f02611fd5565b815260200160008152602001600081525090565b6120006040519081016040528061010090602082028038833980820191505090505090565b61100060405190810160405280608090602082028038833980820191505090505090565b61080060405190810160405280604090602082028038833980820191505090505090565b611000604051908101604052806040905b611f9c611ec6565b815260200190600190039081611f945790505090565b60e060405190810160405280600790602082028038833980820191505090505090565b6101c060405190810160405280600e9060208202803883398082019150509050509056fea165627a7a723058202edab98f37b121a7249cd9b25cd2c4230ef241d4b7bb62467f85594f5163ff050029";

    public static final String FUNC_UBASE = "uBase";

    public static final String FUNC_HVBASE = "hvBase";

    public static final String FUNC_GVBASE = "gvBase";

    public static final String FUNC_H = "h";

    public static final String FUNC_PARAMS = "params";

    public static final String FUNC_G = "g";

    public static final String FUNC_AGGVERIFYRANGEPROOF = "aggVerifyRangeProof";

    @Deprecated
    protected AggRangeProofVerifier(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AggRangeProofVerifier(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AggRangeProofVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AggRangeProofVerifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> uBase() {
        final Function function = new Function(FUNC_UBASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> hvBase(BigInteger param0) {
        final Function function = new Function(FUNC_HVBASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> gvBase(BigInteger param0) {
        final Function function = new Function(FUNC_GVBASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> h() {
        final Function function = new Function(FUNC_H, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> params() {
        final Function function = new Function(FUNC_PARAMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> g() {
        final Function function = new Function(FUNC_G, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static RemoteCall<AggRangeProofVerifier> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String params_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_)));
        return deployRemoteCall(AggRangeProofVerifier.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<AggRangeProofVerifier> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String params_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_)));
        return deployRemoteCall(AggRangeProofVerifier.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AggRangeProofVerifier> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String params_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_)));
        return deployRemoteCall(AggRangeProofVerifier.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AggRangeProofVerifier> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String params_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(params_)));
        return deployRemoteCall(AggRangeProofVerifier.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<Boolean> aggVerifyRangeProof(List<BigInteger> points, List<BigInteger> scalar, List<BigInteger> l, List<BigInteger> r) {
        final Function function = new Function(FUNC_AGGVERIFYRANGEPROOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray12<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(points, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray5<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(scalar, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(l, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.StaticArray14<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(r, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static AggRangeProofVerifier load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AggRangeProofVerifier(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AggRangeProofVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AggRangeProofVerifier(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AggRangeProofVerifier load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AggRangeProofVerifier(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AggRangeProofVerifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AggRangeProofVerifier(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
