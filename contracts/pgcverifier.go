// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PgcverifierABI is the input ABI used to generate the binding from.
const PgcverifierABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"aggRangeProofVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dleSigmaVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rangeProofVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sigmaVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"params_\",\"type\":\"address\"},{\"name\":\"dleSigmaVerifier_\",\"type\":\"address\"},{\"name\":\"rangeProofVerifier_\",\"type\":\"address\"},{\"name\":\"aggVerifier_\",\"type\":\"address\"},{\"name\":\"sigmaVerifier_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[36]\"},{\"name\":\"scalar\",\"type\":\"uint256[11]\"},{\"name\":\"l\",\"type\":\"uint256[12]\"},{\"name\":\"r\",\"type\":\"uint256[12]\"},{\"name\":\"ub\",\"type\":\"uint256[4]\"}],\"name\":\"verifyAggTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[28]\"},{\"name\":\"scalar\",\"type\":\"uint256[14]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[20]\"},{\"name\":\"r\",\"type\":\"uint256[20]\"},{\"name\":\"ub\",\"type\":\"uint256[4]\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"points\",\"type\":\"uint256[18]\"},{\"name\":\"scalar\",\"type\":\"uint256[12]\"},{\"name\":\"rpoints\",\"type\":\"uint256[16]\"},{\"name\":\"l\",\"type\":\"uint256[20]\"},{\"name\":\"r\",\"type\":\"uint256[20]\"},{\"name\":\"ub\",\"type\":\"uint256[4]\"}],\"name\":\"verifyBurnPart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"publicKey\",\"type\":\"uint256[2]\"},{\"name\":\"proof\",\"type\":\"uint256[4]\"},{\"name\":\"z\",\"type\":\"uint256\"},{\"name\":\"ub\",\"type\":\"uint256[4]\"}],\"name\":\"verifyBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PgcverifierBin is the compiled bytecode used for deploying new contracts.
const PgcverifierBin = ``

// DeployPgcverifier deploys a new Ethereum contract, binding an instance of Pgcverifier to it.
func DeployPgcverifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, dleSigmaVerifier_ common.Address, rangeProofVerifier_ common.Address, aggVerifier_ common.Address, sigmaVerifier_ common.Address) (common.Address, *types.Transaction, *Pgcverifier, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcverifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PgcverifierBin), backend, params_, dleSigmaVerifier_, rangeProofVerifier_, aggVerifier_, sigmaVerifier_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pgcverifier{PgcverifierCaller: PgcverifierCaller{contract: contract}, PgcverifierTransactor: PgcverifierTransactor{contract: contract}, PgcverifierFilterer: PgcverifierFilterer{contract: contract}}, nil
}

// Pgcverifier is an auto generated Go binding around an Ethereum contract.
type Pgcverifier struct {
	PgcverifierCaller     // Read-only binding to the contract
	PgcverifierTransactor // Write-only binding to the contract
	PgcverifierFilterer   // Log filterer for contract events
}

// PgcverifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type PgcverifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcverifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PgcverifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcverifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PgcverifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PgcverifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PgcverifierSession struct {
	Contract     *Pgcverifier      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PgcverifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PgcverifierCallerSession struct {
	Contract *PgcverifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PgcverifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PgcverifierTransactorSession struct {
	Contract     *PgcverifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PgcverifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type PgcverifierRaw struct {
	Contract *Pgcverifier // Generic contract binding to access the raw methods on
}

// PgcverifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PgcverifierCallerRaw struct {
	Contract *PgcverifierCaller // Generic read-only contract binding to access the raw methods on
}

// PgcverifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PgcverifierTransactorRaw struct {
	Contract *PgcverifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPgcverifier creates a new instance of Pgcverifier, bound to a specific deployed contract.
func NewPgcverifier(address common.Address, backend bind.ContractBackend) (*Pgcverifier, error) {
	contract, err := bindPgcverifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pgcverifier{PgcverifierCaller: PgcverifierCaller{contract: contract}, PgcverifierTransactor: PgcverifierTransactor{contract: contract}, PgcverifierFilterer: PgcverifierFilterer{contract: contract}}, nil
}

// NewPgcverifierCaller creates a new read-only instance of Pgcverifier, bound to a specific deployed contract.
func NewPgcverifierCaller(address common.Address, caller bind.ContractCaller) (*PgcverifierCaller, error) {
	contract, err := bindPgcverifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PgcverifierCaller{contract: contract}, nil
}

// NewPgcverifierTransactor creates a new write-only instance of Pgcverifier, bound to a specific deployed contract.
func NewPgcverifierTransactor(address common.Address, transactor bind.ContractTransactor) (*PgcverifierTransactor, error) {
	contract, err := bindPgcverifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PgcverifierTransactor{contract: contract}, nil
}

// NewPgcverifierFilterer creates a new log filterer instance of Pgcverifier, bound to a specific deployed contract.
func NewPgcverifierFilterer(address common.Address, filterer bind.ContractFilterer) (*PgcverifierFilterer, error) {
	contract, err := bindPgcverifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PgcverifierFilterer{contract: contract}, nil
}

// bindPgcverifier binds a generic wrapper to an already deployed contract.
func bindPgcverifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PgcverifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgcverifier *PgcverifierRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgcverifier.Contract.PgcverifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgcverifier *PgcverifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgcverifier.Contract.PgcverifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgcverifier *PgcverifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgcverifier.Contract.PgcverifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pgcverifier *PgcverifierCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pgcverifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pgcverifier *PgcverifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pgcverifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pgcverifier *PgcverifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pgcverifier.Contract.contract.Transact(opts, method, params...)
}

// AggRangeProofVerifier is a free data retrieval call binding the contract method 0x293ec7b4.
//
// Solidity: function aggRangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCaller) AggRangeProofVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "aggRangeProofVerifier")
	return *ret0, err
}

// AggRangeProofVerifier is a free data retrieval call binding the contract method 0x293ec7b4.
//
// Solidity: function aggRangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierSession) AggRangeProofVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.AggRangeProofVerifier(&_Pgcverifier.CallOpts)
}

// AggRangeProofVerifier is a free data retrieval call binding the contract method 0x293ec7b4.
//
// Solidity: function aggRangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCallerSession) AggRangeProofVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.AggRangeProofVerifier(&_Pgcverifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgcverifier *PgcverifierCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgcverifier *PgcverifierSession) BitSize() (*big.Int, error) {
	return _Pgcverifier.Contract.BitSize(&_Pgcverifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Pgcverifier *PgcverifierCallerSession) BitSize() (*big.Int, error) {
	return _Pgcverifier.Contract.BitSize(&_Pgcverifier.CallOpts)
}

// DleSigmaVerifier is a free data retrieval call binding the contract method 0x361eb474.
//
// Solidity: function dleSigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCaller) DleSigmaVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "dleSigmaVerifier")
	return *ret0, err
}

// DleSigmaVerifier is a free data retrieval call binding the contract method 0x361eb474.
//
// Solidity: function dleSigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierSession) DleSigmaVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.DleSigmaVerifier(&_Pgcverifier.CallOpts)
}

// DleSigmaVerifier is a free data retrieval call binding the contract method 0x361eb474.
//
// Solidity: function dleSigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCallerSession) DleSigmaVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.DleSigmaVerifier(&_Pgcverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgcverifier.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgcverifier.Contract.G(&_Pgcverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgcverifier.Contract.G(&_Pgcverifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Pgcverifier.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgcverifier.Contract.H(&_Pgcverifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Pgcverifier *PgcverifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Pgcverifier.Contract.H(&_Pgcverifier.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgcverifier *PgcverifierCaller) MaxNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "maxNumber")
	return *ret0, err
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgcverifier *PgcverifierSession) MaxNumber() (*big.Int, error) {
	return _Pgcverifier.Contract.MaxNumber(&_Pgcverifier.CallOpts)
}

// MaxNumber is a free data retrieval call binding the contract method 0x3a4f6999.
//
// Solidity: function maxNumber() constant returns(uint256)
func (_Pgcverifier *PgcverifierCallerSession) MaxNumber() (*big.Int, error) {
	return _Pgcverifier.Contract.MaxNumber(&_Pgcverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgcverifier *PgcverifierCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgcverifier *PgcverifierSession) N() (*big.Int, error) {
	return _Pgcverifier.Contract.N(&_Pgcverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Pgcverifier *PgcverifierCallerSession) N() (*big.Int, error) {
	return _Pgcverifier.Contract.N(&_Pgcverifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgcverifier *PgcverifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgcverifier *PgcverifierSession) Params() (common.Address, error) {
	return _Pgcverifier.Contract.Params(&_Pgcverifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Pgcverifier *PgcverifierCallerSession) Params() (common.Address, error) {
	return _Pgcverifier.Contract.Params(&_Pgcverifier.CallOpts)
}

// RangeProofVerifier is a free data retrieval call binding the contract method 0x61e5af5e.
//
// Solidity: function rangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCaller) RangeProofVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "rangeProofVerifier")
	return *ret0, err
}

// RangeProofVerifier is a free data retrieval call binding the contract method 0x61e5af5e.
//
// Solidity: function rangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierSession) RangeProofVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.RangeProofVerifier(&_Pgcverifier.CallOpts)
}

// RangeProofVerifier is a free data retrieval call binding the contract method 0x61e5af5e.
//
// Solidity: function rangeProofVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCallerSession) RangeProofVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.RangeProofVerifier(&_Pgcverifier.CallOpts)
}

// SigmaVerifier is a free data retrieval call binding the contract method 0x81b7bc73.
//
// Solidity: function sigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCaller) SigmaVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "sigmaVerifier")
	return *ret0, err
}

// SigmaVerifier is a free data retrieval call binding the contract method 0x81b7bc73.
//
// Solidity: function sigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierSession) SigmaVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.SigmaVerifier(&_Pgcverifier.CallOpts)
}

// SigmaVerifier is a free data retrieval call binding the contract method 0x81b7bc73.
//
// Solidity: function sigmaVerifier() constant returns(address)
func (_Pgcverifier *PgcverifierCallerSession) SigmaVerifier() (common.Address, error) {
	return _Pgcverifier.Contract.SigmaVerifier(&_Pgcverifier.CallOpts)
}

// VerifyBurn is a free data retrieval call binding the contract method 0xc3bbd720.
//
// Solidity: function verifyBurn(uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256[4] ub) constant returns(bool)
func (_Pgcverifier *PgcverifierCaller) VerifyBurn(opts *bind.CallOpts, amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, ub [4]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Pgcverifier.contract.Call(opts, out, "verifyBurn", amount, publicKey, proof, z, ub)
	return *ret0, err
}

// VerifyBurn is a free data retrieval call binding the contract method 0xc3bbd720.
//
// Solidity: function verifyBurn(uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256[4] ub) constant returns(bool)
func (_Pgcverifier *PgcverifierSession) VerifyBurn(amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, ub [4]*big.Int) (bool, error) {
	return _Pgcverifier.Contract.VerifyBurn(&_Pgcverifier.CallOpts, amount, publicKey, proof, z, ub)
}

// VerifyBurn is a free data retrieval call binding the contract method 0xc3bbd720.
//
// Solidity: function verifyBurn(uint256 amount, uint256[2] publicKey, uint256[4] proof, uint256 z, uint256[4] ub) constant returns(bool)
func (_Pgcverifier *PgcverifierCallerSession) VerifyBurn(amount *big.Int, publicKey [2]*big.Int, proof [4]*big.Int, z *big.Int, ub [4]*big.Int) (bool, error) {
	return _Pgcverifier.Contract.VerifyBurn(&_Pgcverifier.CallOpts, amount, publicKey, proof, z, ub)
}

// VerifyAggTransfer is a paid mutator transaction binding the contract method 0xc8ae1897.
//
// Solidity: function verifyAggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactor) VerifyAggTransfer(opts *bind.TransactOpts, points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.contract.Transact(opts, "verifyAggTransfer", points, scalar, l, r, ub)
}

// VerifyAggTransfer is a paid mutator transaction binding the contract method 0xc8ae1897.
//
// Solidity: function verifyAggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierSession) VerifyAggTransfer(points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyAggTransfer(&_Pgcverifier.TransactOpts, points, scalar, l, r, ub)
}

// VerifyAggTransfer is a paid mutator transaction binding the contract method 0xc8ae1897.
//
// Solidity: function verifyAggTransfer(uint256[36] points, uint256[11] scalar, uint256[12] l, uint256[12] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactorSession) VerifyAggTransfer(points [36]*big.Int, scalar [11]*big.Int, l [12]*big.Int, r [12]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyAggTransfer(&_Pgcverifier.TransactOpts, points, scalar, l, r, ub)
}

// VerifyBurnPart is a paid mutator transaction binding the contract method 0x122d6e46.
//
// Solidity: function verifyBurnPart(uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactor) VerifyBurnPart(opts *bind.TransactOpts, amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.contract.Transact(opts, "verifyBurnPart", amount, points, scalar, rpoints, l, r, ub)
}

// VerifyBurnPart is a paid mutator transaction binding the contract method 0x122d6e46.
//
// Solidity: function verifyBurnPart(uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierSession) VerifyBurnPart(amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyBurnPart(&_Pgcverifier.TransactOpts, amount, points, scalar, rpoints, l, r, ub)
}

// VerifyBurnPart is a paid mutator transaction binding the contract method 0x122d6e46.
//
// Solidity: function verifyBurnPart(uint256 amount, uint256[18] points, uint256[12] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactorSession) VerifyBurnPart(amount *big.Int, points [18]*big.Int, scalar [12]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyBurnPart(&_Pgcverifier.TransactOpts, amount, points, scalar, rpoints, l, r, ub)
}

// VerifyTransfer is a paid mutator transaction binding the contract method 0xa3c357f6.
//
// Solidity: function verifyTransfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactor) VerifyTransfer(opts *bind.TransactOpts, points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.contract.Transact(opts, "verifyTransfer", points, scalar, rpoints, l, r, ub)
}

// VerifyTransfer is a paid mutator transaction binding the contract method 0xa3c357f6.
//
// Solidity: function verifyTransfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierSession) VerifyTransfer(points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyTransfer(&_Pgcverifier.TransactOpts, points, scalar, rpoints, l, r, ub)
}

// VerifyTransfer is a paid mutator transaction binding the contract method 0xa3c357f6.
//
// Solidity: function verifyTransfer(uint256[28] points, uint256[14] scalar, uint256[16] rpoints, uint256[20] l, uint256[20] r, uint256[4] ub) returns(bool)
func (_Pgcverifier *PgcverifierTransactorSession) VerifyTransfer(points [28]*big.Int, scalar [14]*big.Int, rpoints [16]*big.Int, l [20]*big.Int, r [20]*big.Int, ub [4]*big.Int) (*types.Transaction, error) {
	return _Pgcverifier.Contract.VerifyTransfer(&_Pgcverifier.TransactOpts, points, scalar, rpoints, l, r, ub)
}
