// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AggrangeproofverifierABI is the input ABI used to generate the binding from.
const AggrangeproofverifierABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"params_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gvBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hvBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contractPublicParams\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"points\",\"type\":\"uint256[12]\"},{\"internalType\":\"uint256[5]\",\"name\":\"scalar\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[14]\",\"name\":\"l\",\"type\":\"uint256[14]\"},{\"internalType\":\"uint256[14]\",\"name\":\"r\",\"type\":\"uint256[14]\"}],\"name\":\"aggVerifyRangeProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// AggrangeproofverifierBin is the compiled bytecode used for deploying new contracts.
var AggrangeproofverifierBin = "0x60806040523480156200001157600080fd5b506040516200294a3803806200294a8339818101604052620000379190810190620004e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff1660e01b815260040160206040518083038186803b158015620000df57600080fd5b505afa158015620000f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200011a919081019062000540565b6040146200015f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015690620005ae565b60405180910390fd5b620001696200041a565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff1660e01b8152600401604080518083038186803b158015620001d057600080fd5b505afa158015620001e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200020b919081019062000514565b9050620002176200041a565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff1660e01b8152600401604080518083038186803b1580156200027e57600080fd5b505afa15801562000293573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002b9919081019062000514565b9050620002c56200041a565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff1660e01b8152600401604080518083038186803b1580156200032c57600080fd5b505afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000367919081019062000514565b9050826000600281106200037757fe5b6020020151600160000181905550826001600281106200039357fe5b6020020151600180018190555081600060028110620003ae57fe5b602002015160036000018190555081600160028110620003ca57fe5b602002015160036001018190555080600060028110620003e657fe5b6020020151600560000181905550806001600281106200040257fe5b602002015160056001018190555050505050620006a4565b6040518060400160405280600290602082028038833980820191505090505090565b6000815190506200044d8162000670565b92915050565b600082601f8301126200046557600080fd5b60026200047c6200047682620005fe565b620005d0565b915081838560208402820111156200049357600080fd5b60005b83811015620004c75781620004ac8882620004d1565b84526020840193506020830192505060018101905062000496565b5050505092915050565b600081519050620004e2816200068a565b92915050565b600060208284031215620004fb57600080fd5b60006200050b848285016200043c565b91505092915050565b6000604082840312156200052757600080fd5b6000620005378482850162000453565b91505092915050565b6000602082840312156200055357600080fd5b60006200056384828501620004d1565b91505092915050565b60006200057b60128362000621565b91507f6269732073697a65206e6f7420657175616c00000000000000000000000000006000830152602082019050919050565b60006020820190508181036000830152620005c9816200056c565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715620005f457600080fd5b8060405250919050565b600067ffffffffffffffff8211156200061657600080fd5b602082029050919050565b600082825260208201905092915050565b60006200063f8262000646565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200067b8162000632565b81146200068757600080fd5b50565b620006958162000666565b8114620006a157600080fd5b50565b61229680620006b46000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b8c9d3651161005b578063b8c9d36514610103578063cff0ab9614610122578063e2179b8e14610140578063e5d34a631461015f5761007d565b80631213e20114610082578063654474ee146100a1578063b7479f5f146100d2575b600080fd5b61008a61018f565b6040516100989291906120fa565b60405180910390f35b6100bb60048036036100b69190810190611fee565b6101a1565b6040516100c99291906120fa565b60405180910390f35b6100ec60048036036100e79190810190611fee565b6101c9565b6040516100fa9291906120fa565b60405180910390f35b61010b6101f0565b6040516101199291906120fa565b60405180910390f35b61012a610202565b60405161013791906120df565b60405180910390f35b610148610227565b6040516101569291906120fa565b60405180910390f35b61017960048036036101749190810190611f87565b610239565b60405161018691906120c4565b60405180910390f35b60058060000154908060010154905082565b61010781608081106101af57fe5b600202016000915090508060000154908060010154905082565b600781608081106101d657fe5b600202016000915090508060000154908060010154905082565b60038060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018060000154908060010154905082565b6000610243611968565b6040518060400160405280876000600c811061025b57fe5b60200201518152602001876001600c811061027257fe5b602002015181525081600001819052506040518060400160405280876002600c811061029a57fe5b60200201518152602001876003600c81106102b157fe5b602002015181525081602001819052506040518060400160405280876004600c81106102d957fe5b60200201518152602001876005600c81106102f057fe5b602002015181525081604001819052506040518060400160405280876006600c811061031857fe5b60200201518152602001876007600c811061032f57fe5b602002015181525081606001819052508460006005811061034c57fe5b60200201518160800181815250508460016005811061036757fe5b60200201518160a00181815250508460026005811061038257fe5b60200201518160c00181815250506103986119cb565b6040518060400160405280886008600c81106103b057fe5b60200201518152602001886009600c81106103c757fe5b6020020151815250816000600281106103dc57fe5b6020020181905250604051806040016040528088600a600c81106103fc57fe5b6020020151815260200188600b600c811061041357fe5b60200201518152508160016002811061042857fe5b6020020181905250848260e0015160000181905250838260e00151602001819052508560036005811061045757fe5b60200201518260e0015160400181815250508560046005811061047657fe5b60200201518260e001516060018181525050610492818361049e565b92505050949350505050565b60006104a86119f8565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d498bef06040518163ffffffff1660e01b81526004016120006040518083038186803b15801561051057600080fd5b505afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105489190810190611f5d565b90506105526119f8565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663713eb04d6040518163ffffffff1660e01b81526004016120006040518083038186803b1580156105ba57600080fd5b505afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105f29190810190611f5d565b90506105fc611a26565b6106288560000151600001518660000151602001518760200151600001518860200151602001516112b4565b8160a001818152505061065d8560200151600001518660200151602001518760000151600001518860000151602001516112b4565b816101000181815250506106748160a001516112f8565b8160c0018190525061069161068c8260a00151611398565b6112f8565b8160e001819052506106a7816101000151611462565b816101600181815250506106d66106d182610100015183610100015161148e90919063ffffffff16565b6114c8565b8161012001818152505061070561070082610100015183610120015161148e90919063ffffffff16565b6114c8565b816101400181815250506107196002611500565b81610180018190525061074e8560400151600001518660400151602001518760600151600001518860600151602001516112b4565b8160600181815250506107728160600151826060015161148e90919063ffffffff16565b8160800181815250506108366107998260800151876060015161159d90919063ffffffff16565b6108286107b78460600151896040015161159d90919063ffffffff16565b61081a6107e38661014001518c6001600281106107d057fe5b602002015161159d90919063ffffffff16565b61080c8761012001518d6000600281106107f957fe5b602002015161159d90919063ffffffff16565b61164290919063ffffffff16565b61164290919063ffffffff16565b61164290919063ffffffff16565b816101c001819052506108b06108676108538361018001516116da565b83610140015161148e90919063ffffffff16565b6108a26108778460c0015161173d565b6108948561012001518661010001516117a390919063ffffffff16565b61148e90919063ffffffff16565b6117a390919063ffffffff16565b8161020001818152505061090d6108f96108ce8361018001516116da565b6108eb84610100015185610140015161148e90919063ffffffff16565b61148e90919063ffffffff16565b8261020001516117a390919063ffffffff16565b816102000181815250506109ad6109518660a0015160036040518060400160405290816000820154815260200160018201548152505061159d90919063ffffffff16565b61099f61097084610200015189608001516117a390919063ffffffff16565b60016040518060400160405290816000820154815260200160018201548152505061159d90919063ffffffff16565b61164290919063ffffffff16565b816101e00181905250806101e0015160000151816101c00151600001511415806109e95750806101e0015160200151816101c001516020015114155b156109fa57600093505050506112ae565b610a02611b48565b610a33610a208360600151886020015161159d90919063ffffffff16565b876000015161164290919063ffffffff16565b905060008090505b6001600601811015610c8b576000610ac78860e001516000015183600202600e8110610a6357fe5b60200201518960e001516000015160018560020201600e8110610a8257fe5b60200201518a60e001516020015185600202600e8110610a9e57fe5b60200201518b60e001516020015160018760020201600e8110610abd57fe5b60200201516112b4565b9050808461022001518360078110610adb57fe5b602002018181525050610aff610afa828361148e90919063ffffffff16565b6114c8565b8461026001518360078110610b1057fe5b602002018181525050610b378461026001518360078110610b2d57fe5b6020020151611398565b8461028001518360078110610b4857fe5b60200201818152505060405180604001604052808960e001516000015184600202600e8110610b7357fe5b602002015181526020018960e001516000015160018560020201600e8110610b9757fe5b60200201518152508460400181905250610be5610bd68561026001518460078110610bbe57fe5b6020020151866040015161159d90919063ffffffff16565b8461164290919063ffffffff16565b925060405180604001604052808960e001516020015184600202600e8110610c0957fe5b602002015181526020018960e001516020015160018560020201600e8110610c2d57fe5b60200201518152508460400181905250610c7b610c6c8561028001518460078110610c5457fe5b6020020151866040015161159d90919063ffffffff16565b8461164290919063ffffffff16565b9250508080600101915050610a3b565b5060008090505b6002604002811015611135576000811415610dc35760008090505b6001600601811015610d555760008461022001518260078110610ccc57fe5b602002015190506000821415610cfc5780856102c001518460808110610cee57fe5b602002018181525050610d47565b610d2c610d2782876102c001518660808110610d1457fe5b602002015161148e90919063ffffffff16565b6114c8565b856102c001518460808110610d3d57fe5b6020020181815250505b508080600101915050610cad565b50826102c001518160808110610d6757fe5b60200201518361030001518260808110610d7d57fe5b602002018181525050610da4836102c001518260808110610d9a57fe5b6020020151611398565b836102c001518260808110610db557fe5b602002018181525050610ebb565b6000610dd38260016006016117e8565b9050610e2d610e288561026001518360016006010360078110610df257fe5b6020020151866102c00151610e096001860361182d565b860360808110610e1557fe5b602002015161148e90919063ffffffff16565b6114c8565b846102c001518360808110610e3e57fe5b602002018181525050610e9f610e9a8561028001518360016006010360078110610e6457fe5b6020020151866103000151610e7b6001860361182d565b860360808110610e8757fe5b602002015161148e90919063ffffffff16565b6114c8565b8461030001518360808110610eb057fe5b602002018181525050505b826102c001518160808110610ecc57fe5b6020020151836102a001518260808110610ee257fe5b6020020181815250508261030001518160808110610efc57fe5b6020020151836102e001518260808110610f1257fe5b602002018181525050610f62836101000151610f548960e0015160400151866102a001518560808110610f4157fe5b602002015161148e90919063ffffffff16565b61187590919063ffffffff16565b836102a001518260808110610f7357fe5b602002018181525050610fac8760e0015160600151846102e001518360808110610f9957fe5b602002015161148e90919063ffffffff16565b836102e001518260808110610fbd57fe5b602002018181525050604081101561104257611023610fff8461018001518360408110610fe657fe5b602002015185610120015161148e90919063ffffffff16565b846102e00151836080811061101057fe5b60200201516117a390919063ffffffff16565b836102e00151826080811061103457fe5b6020020181815250506110bb565b6110a061107c8461018001516040848161105857fe5b066040811061106357fe5b602002015185610140015161148e90919063ffffffff16565b846102e00151836080811061108d57fe5b60200201516117a390919063ffffffff16565b836102e0015182608081106110b157fe5b6020020181815250505b61110e8361010001516111008560e0015184608081106110d757fe5b6020020151866102e0015185608081106110ed57fe5b602002015161148e90919063ffffffff16565b6117a390919063ffffffff16565b836102e00151826080811061111f57fe5b6020020181815250508080600101915050610c92565b50600061116e8760800151604051602001611150919061205b565b6040516020818303038152906040528051906020012060001c6114c8565b90506112756111aa8860c0015160036040518060400160405290816000820154815260200160018201548152505061159d90919063ffffffff16565b61126761122a6111fb6111ec8c608001516111de8e60e00151606001518f60e001516040015161148e90919063ffffffff16565b6117a390919063ffffffff16565b8661148e90919063ffffffff16565b60056040518060400160405290816000820154815260200160018201548152505061159d90919063ffffffff16565b61125961123c89896102e001516118af565b61124b8b8a6102a001516118af565b61164290919063ffffffff16565b61164290919063ffffffff16565b61164290919063ffffffff16565b836101e001819052508160000151836101e00151600001511480156112a657508160200151836101e0015160200151145b955050505050505b92915050565b60006112ee858585856040516020016112d09493929190612076565b6040516020818303038152906040528051906020012060001c6114c8565b9050949350505050565b611300611b62565b60018160006080811061130f57fe5b602002018181525050818160016080811061132657fe5b6020020181815250506000600290505b60026040028110156113925761137061136b8484600185036080811061135857fe5b602002015161148e90919063ffffffff16565b6114c8565b82826080811061137c57fe5b6020020181815250508080600101915050611336565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050600083905060008114156113d75760009250505061145d565b818111156113ec578181816113e857fe5b0690505b600080600190506000849050600084905060005b600082146114355781838161141157fe5b04905083848202860383848402860380955081965082975083985050505050611400565b60008512156114525784600003870397505050505050505061145d565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080806114bc57fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508083816114f757fe5b06915050919050565b611508611b85565b60018160006040811061151757fe5b602002018181525050818160016040811061152e57fe5b6020020181815250506000600290505b6040811015611597576115756115708484600185036040811061155d57fe5b602002015161148e90919063ffffffff16565b6114c8565b82826040811061158157fe5b602002018181525050808060010191505061153e565b50919050565b6115a5611b48565b60018214156115b65782905061163c565b60028214156115d0576115c98384611642565b905061163c565b6115d8611ba8565b8360000151816000600381106115ea57fe5b60200201818152505083602001518160016003811061160557fe5b602002018181525050828160026003811061161c57fe5b6020020181815250506040826060836007600019fa61163a57600080fd5b505b92915050565b61164a611b48565b611652611bca565b83600001518160006004811061166457fe5b60200201818152505083602001518160016004811061167f57fe5b60200201818152505082600001518160026004811061169a57fe5b6020020181815250508260200151816003600481106116b557fe5b6020020181815250506040826080836006600019fa6116d357600080fd5b5092915050565b600080826000604081106116ea57fe5b602002015190506000600190505b60408110156117335761172484826040811061171057fe5b60200201518361187590919063ffffffff16565b915080806001019150506116f8565b5080915050919050565b6000808260006080811061174d57fe5b602002015190506000600190505b60026040028110156117995761178a84826080811061177657fe5b60200201518361187590919063ffffffff16565b9150808060010191505061175b565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050828410156117db5783838203016117df565b8284035b91505092915050565b600080826001901b905060005b81851080156118045750600082115b1561181d57600182901c915080806001019150506117f5565b8084600101039250505092915050565b6000808290506000811415611846576001915050611870565b6000600190505b600082111561186a5760028102905081806001900392505061184d565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080806118a357fe5b83850891505092915050565b6118b7611b48565b6118bf611b48565b6118f4836000608081106118cf57fe5b6020020151856000608081106118e157fe5b602002015161159d90919063ffffffff16565b90506000600190505b600260400281101561195d5761194e61193f85836080811061191b57fe5b602002015187846080811061192c57fe5b602002015161159d90919063ffffffff16565b8361164290919063ffffffff16565b915080806001019150506118fd565b508091505092915050565b60405180610100016040528061197c611bec565b8152602001611989611bec565b8152602001611996611bec565b81526020016119a3611bec565b81526020016000815260200160008152602001600081526020016119c5611c06565b81525090565b60405180604001604052806002905b6119e2611bec565b8152602001906001900390816119da5790505090565b6040518061100001604052806080905b611a10611bec565b815260200190600190039081611a085790505090565b604051806103200160405280611a3a611c3a565b8152602001611a47611c3a565b8152602001611a54611bec565b8152602001600081526020016000815260200160008152602001611a76611c5e565b8152602001611a83611c5e565b815260200160008152602001600081526020016000815260200160008152602001611aac611c81565b8152602001611ab9611ca4565b8152602001611ac6611bec565b8152602001611ad3611bec565b815260200160008152602001611ae7611cd2565b8152602001611af4611cd2565b8152602001611b01611cd2565b8152602001611b0e611cd2565b8152602001611b1b611c5e565b8152602001611b28611c5e565b8152602001611b35611c5e565b8152602001611b42611c5e565b81525090565b604051806040016040528060008152602001600081525090565b604051806110000160405280608090602082028038833980820191505090505090565b604051806108000160405280604090602082028038833980820191505090505090565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b604051806040016040528060008152602001600081525090565b6040518060800160405280611c19611cf4565b8152602001611c26611cf4565b815260200160008152602001600081525090565b60405180612000016040528061010090602082028038833980820191505090505090565b604051806110000160405280608090602082028038833980820191505090505090565b604051806108000160405280604090602082028038833980820191505090505090565b6040518061080001604052806040905b611cbc611bec565b815260200190600190039081611cb45790505090565b6040518060e00160405280600790602082028038833980820191505090505090565b604051806101c00160405280600e90602082028038833980820191505090505090565b600082601f830112611d2857600080fd5b6080611d3b611d3682612150565b612123565b91508183856040840282011115611d5157600080fd5b60005b83811015611d815781611d678882611ee7565b845260208401935060408301925050600181019050611d54565b5050505092915050565b600082601f830112611d9c57600080fd5b600c611daf611daa82612172565b612123565b91508183856020840282011115611dc557600080fd5b60005b83811015611df55781611ddb8882611f33565b845260208401935060208301925050600181019050611dc8565b5050505092915050565b600082601f830112611e1057600080fd5b600e611e23611e1e82612194565b612123565b91508183856020840282011115611e3957600080fd5b60005b83811015611e695781611e4f8882611f33565b845260208401935060208301925050600181019050611e3c565b5050505092915050565b600082601f830112611e8457600080fd5b6005611e97611e92826121b6565b612123565b91508183856020840282011115611ead57600080fd5b60005b83811015611edd5781611ec38882611f33565b845260208401935060208301925050600181019050611eb0565b5050505092915050565b600060408284031215611ef957600080fd5b611f036040612123565b90506000611f1384828501611f48565b6000830152506020611f2784828501611f48565b60208301525092915050565b600081359050611f428161223c565b92915050565b600081519050611f578161223c565b92915050565b60006120008284031215611f7057600080fd5b6000611f7e84828501611d17565b91505092915050565b6000806000806105a08587031215611f9e57600080fd5b6000611fac87828801611d8b565b945050610180611fbe87828801611e73565b935050610220611fd087828801611dff565b9250506103e0611fe287828801611dff565b91505092959194509250565b60006020828403121561200057600080fd5b600061200e84828501611f33565b91505092915050565b612020816121d8565b82525050565b61202f8161220e565b82525050565b61203e81612204565b82525050565b61205561205082612204565b612232565b82525050565b60006120678284612044565b60208201915081905092915050565b60006120828287612044565b6020820191506120928286612044565b6020820191506120a28285612044565b6020820191506120b28284612044565b60208201915081905095945050505050565b60006020820190506120d96000830184612017565b92915050565b60006020820190506120f46000830184612026565b92915050565b600060408201905061210f6000830185612035565b61211c6020830184612035565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561214657600080fd5b8060405250919050565b600067ffffffffffffffff82111561216757600080fd5b602082029050919050565b600067ffffffffffffffff82111561218957600080fd5b602082029050919050565b600067ffffffffffffffff8211156121ab57600080fd5b602082029050919050565b600067ffffffffffffffff8211156121cd57600080fd5b602082029050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061221982612220565b9050919050565b600061222b826121e4565b9050919050565b6000819050919050565b61224581612204565b811461225057600080fd5b5056fea365627a7a72315820d261a32552093261b97c707a935497a34f140d0e2705ea4e17bff282547a32c76c6578706572696d656e74616cf564736f6c63430005100040"

// DeployAggrangeproofverifier deploys a new Ethereum contract, binding an instance of Aggrangeproofverifier to it.
func DeployAggrangeproofverifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address) (common.Address, *types.Transaction, *Aggrangeproofverifier, error) {
	parsed, err := abi.JSON(strings.NewReader(AggrangeproofverifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AggrangeproofverifierBin), backend, params_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Aggrangeproofverifier{AggrangeproofverifierCaller: AggrangeproofverifierCaller{contract: contract}, AggrangeproofverifierTransactor: AggrangeproofverifierTransactor{contract: contract}, AggrangeproofverifierFilterer: AggrangeproofverifierFilterer{contract: contract}}, nil
}

// Aggrangeproofverifier is an auto generated Go binding around an Ethereum contract.
type Aggrangeproofverifier struct {
	AggrangeproofverifierCaller     // Read-only binding to the contract
	AggrangeproofverifierTransactor // Write-only binding to the contract
	AggrangeproofverifierFilterer   // Log filterer for contract events
}

// AggrangeproofverifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type AggrangeproofverifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggrangeproofverifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AggrangeproofverifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggrangeproofverifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AggrangeproofverifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggrangeproofverifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AggrangeproofverifierSession struct {
	Contract     *Aggrangeproofverifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// AggrangeproofverifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AggrangeproofverifierCallerSession struct {
	Contract *AggrangeproofverifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// AggrangeproofverifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AggrangeproofverifierTransactorSession struct {
	Contract     *AggrangeproofverifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// AggrangeproofverifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type AggrangeproofverifierRaw struct {
	Contract *Aggrangeproofverifier // Generic contract binding to access the raw methods on
}

// AggrangeproofverifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AggrangeproofverifierCallerRaw struct {
	Contract *AggrangeproofverifierCaller // Generic read-only contract binding to access the raw methods on
}

// AggrangeproofverifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AggrangeproofverifierTransactorRaw struct {
	Contract *AggrangeproofverifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAggrangeproofverifier creates a new instance of Aggrangeproofverifier, bound to a specific deployed contract.
func NewAggrangeproofverifier(address common.Address, backend bind.ContractBackend) (*Aggrangeproofverifier, error) {
	contract, err := bindAggrangeproofverifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Aggrangeproofverifier{AggrangeproofverifierCaller: AggrangeproofverifierCaller{contract: contract}, AggrangeproofverifierTransactor: AggrangeproofverifierTransactor{contract: contract}, AggrangeproofverifierFilterer: AggrangeproofverifierFilterer{contract: contract}}, nil
}

// NewAggrangeproofverifierCaller creates a new read-only instance of Aggrangeproofverifier, bound to a specific deployed contract.
func NewAggrangeproofverifierCaller(address common.Address, caller bind.ContractCaller) (*AggrangeproofverifierCaller, error) {
	contract, err := bindAggrangeproofverifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AggrangeproofverifierCaller{contract: contract}, nil
}

// NewAggrangeproofverifierTransactor creates a new write-only instance of Aggrangeproofverifier, bound to a specific deployed contract.
func NewAggrangeproofverifierTransactor(address common.Address, transactor bind.ContractTransactor) (*AggrangeproofverifierTransactor, error) {
	contract, err := bindAggrangeproofverifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AggrangeproofverifierTransactor{contract: contract}, nil
}

// NewAggrangeproofverifierFilterer creates a new log filterer instance of Aggrangeproofverifier, bound to a specific deployed contract.
func NewAggrangeproofverifierFilterer(address common.Address, filterer bind.ContractFilterer) (*AggrangeproofverifierFilterer, error) {
	contract, err := bindAggrangeproofverifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AggrangeproofverifierFilterer{contract: contract}, nil
}

// bindAggrangeproofverifier binds a generic wrapper to an already deployed contract.
func bindAggrangeproofverifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AggrangeproofverifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Aggrangeproofverifier *AggrangeproofverifierRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Aggrangeproofverifier.Contract.AggrangeproofverifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Aggrangeproofverifier *AggrangeproofverifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Aggrangeproofverifier.Contract.AggrangeproofverifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Aggrangeproofverifier *AggrangeproofverifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Aggrangeproofverifier.Contract.AggrangeproofverifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Aggrangeproofverifier *AggrangeproofverifierCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Aggrangeproofverifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Aggrangeproofverifier *AggrangeproofverifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Aggrangeproofverifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Aggrangeproofverifier *AggrangeproofverifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Aggrangeproofverifier.Contract.contract.Transact(opts, method, params...)
}

// AggVerifyRangeProof is a free data retrieval call binding the contract method 0xe5d34a63.
//
// Solidity: function aggVerifyRangeProof(uint256[12] points, uint256[5] scalar, uint256[14] l, uint256[14] r) constant returns(bool)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) AggVerifyRangeProof(opts *bind.CallOpts, points [12]*big.Int, scalar [5]*big.Int, l [14]*big.Int, r [14]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Aggrangeproofverifier.contract.Call(opts, out, "aggVerifyRangeProof", points, scalar, l, r)
	return *ret0, err
}

// AggVerifyRangeProof is a free data retrieval call binding the contract method 0xe5d34a63.
//
// Solidity: function aggVerifyRangeProof(uint256[12] points, uint256[5] scalar, uint256[14] l, uint256[14] r) constant returns(bool)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) AggVerifyRangeProof(points [12]*big.Int, scalar [5]*big.Int, l [14]*big.Int, r [14]*big.Int) (bool, error) {
	return _Aggrangeproofverifier.Contract.AggVerifyRangeProof(&_Aggrangeproofverifier.CallOpts, points, scalar, l, r)
}

// AggVerifyRangeProof is a free data retrieval call binding the contract method 0xe5d34a63.
//
// Solidity: function aggVerifyRangeProof(uint256[12] points, uint256[5] scalar, uint256[14] l, uint256[14] r) constant returns(bool)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) AggVerifyRangeProof(points [12]*big.Int, scalar [5]*big.Int, l [14]*big.Int, r [14]*big.Int) (bool, error) {
	return _Aggrangeproofverifier.Contract.AggVerifyRangeProof(&_Aggrangeproofverifier.CallOpts, points, scalar, l, r)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Aggrangeproofverifier.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.G(&_Aggrangeproofverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.G(&_Aggrangeproofverifier.CallOpts)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) GvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Aggrangeproofverifier.contract.Call(opts, out, "gvBase", arg0)
	return *ret, err
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.GvBase(&_Aggrangeproofverifier.CallOpts, arg0)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.GvBase(&_Aggrangeproofverifier.CallOpts, arg0)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Aggrangeproofverifier.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.H(&_Aggrangeproofverifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.H(&_Aggrangeproofverifier.CallOpts)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) HvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Aggrangeproofverifier.contract.Call(opts, out, "hvBase", arg0)
	return *ret, err
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.HvBase(&_Aggrangeproofverifier.CallOpts, arg0)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.HvBase(&_Aggrangeproofverifier.CallOpts, arg0)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Aggrangeproofverifier.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) Params() (common.Address, error) {
	return _Aggrangeproofverifier.Contract.Params(&_Aggrangeproofverifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) Params() (common.Address, error) {
	return _Aggrangeproofverifier.Contract.Params(&_Aggrangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCaller) UBase(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Aggrangeproofverifier.contract.Call(opts, out, "uBase")
	return *ret, err
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.UBase(&_Aggrangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Aggrangeproofverifier *AggrangeproofverifierCallerSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Aggrangeproofverifier.Contract.UBase(&_Aggrangeproofverifier.CallOpts)
}
