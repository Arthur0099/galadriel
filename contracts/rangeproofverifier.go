// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RangeproofverifierABI is the input ABI used to generate the binding from.
const RangeproofverifierABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"uBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hvBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gvBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"params_\",\"type\":\"address\"},{\"name\":\"ip\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[10]\"},{\"name\":\"scalar\",\"type\":\"uint256[5]\"},{\"name\":\"l\",\"type\":\"uint256[10]\"},{\"name\":\"r\",\"type\":\"uint256[10]\"}],\"name\":\"optimizedVerifyRangeProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[10]\"},{\"name\":\"scalar\",\"type\":\"uint256[5]\"},{\"name\":\"l\",\"type\":\"uint256[]\"},{\"name\":\"r\",\"type\":\"uint256[]\"}],\"name\":\"verifyRangeProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// RangeproofverifierBin is the compiled bytecode used for deploying new contracts.
const RangeproofverifierBin = `0x60806040523480156200001157600080fd5b50604051604080620036e6833981018060405260408110156200003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200015357600080fd5b505afa15801562000168573d6000803e3d6000fd5b505050506040513d60208110156200017f57600080fd5b8101908080519060200190929190505050602014151562000208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269732073697a65206e6f7420657175616c000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e9552256040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200028c57600080fd5b505afa158015620002a1573d6000803e3d6000fd5b505050506040513d6020811015620002b857600080fd5b8101908080519060200190929190505050600514151562000341576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6e756d626572206f66206c2c72206e6f7420657175616c00000000000000000081525060200191505060405180910390fd5b6200034b6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620003ce57600080fd5b505afa158015620003e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200040957600080fd5b810190809190505090506200041d6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620004a057600080fd5b505afa158015620004b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620004db57600080fd5b81019080919050509050620004ef6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200057257600080fd5b505afa15801562000587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620005ad57600080fd5b81019080919050509050620005c162000931565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffe237f06040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108006040518083038186803b1580156200064657600080fd5b505afa1580156200065b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108008110156200068257600080fd5b810190809190505090506200069662000931565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663483767f06040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108006040518083038186803b1580156200071b57600080fd5b505afa15801562000730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108008110156200075757600080fd5b810190809190505090508460006002811015156200077157fe5b60200201516002600001819055508460016002811015156200078f57fe5b6020020151600260010181905550836000600281101515620007ad57fe5b6020020151600460000181905550836001600281101515620007cb57fe5b6020020151600460010181905550826000600281101515620007e957fe5b60200201516006600001819055508260016002811015156200080757fe5b602002015160066001018190555060008090505b6020811015620009015782816002026040811015156200083757fe5b60200201516008826020811015156200084c57fe5b600202016000018190555082600182600202016040811015156200086c57fe5b60200201516008826020811015156200088157fe5b600202016001018190555081816002026040811015156200089e57fe5b6020020151604882602081101515620008b357fe5b60020201600001819055508160018260020201604081101515620008d357fe5b6020020151604882602081101515620008e857fe5b600202016001018190555080806001019150506200081b565b505050505050505062000955565b6040805190810160405280600290602082028038833980820191505090505090565b61080060405190810160405280604090602082028038833980820191505090505090565b612d8180620009656000396000f3fe6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631213e201146100b45780631f4c4805146100e657806326ff9c68146102375780632e52d6061461028e5780633e8d3764146102b9578063653e4013146102e4578063654474ee146104d9578063b7479f5f1461052f578063b8c9d36514610585578063cff0ab96146105b7578063e2179b8e1461060e575b600080fd5b3480156100c057600080fd5b506100c9610640565b604051808381526020018281526020019250505060405180910390f35b3480156100f257600080fd5b5061021d600480360361046081101561010a57600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192908060a001906005806020026040519081016040528092919082600560200280828437600081840152601f19601f8201169050808301925050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610652565b604051808215151515815260200191505060405180910390f35b34801561024357600080fd5b5061024c61086a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029a57600080fd5b506102a3610890565b6040518082815260200191505060405180910390f35b3480156102c557600080fd5b506102ce610895565b6040518082815260200191505060405180910390f35b3480156102f057600080fd5b506104bf600480360361022081101561030857600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192908060a001906005806020026040519081016040528092919082600560200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001906401000000008111156103a857600080fd5b8201836020820111156103ba57600080fd5b803590602001918460208302840111640100000000831117156103dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561043c57600080fd5b82018360208201111561044e57600080fd5b8035906020019184602083028401116401000000008311171561047057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061089a565b604051808215151515815260200191505060405180910390f35b3480156104e557600080fd5b50610512600480360360208110156104fc57600080fd5b8101908080359060200190929190505050610ab2565b604051808381526020018281526020019250505060405180910390f35b34801561053b57600080fd5b506105686004803603602081101561055257600080fd5b8101908080359060200190929190505050610adb565b604051808381526020018281526020019250505060405180910390f35b34801561059157600080fd5b5061059a610b04565b604051808381526020018281526020019250505060405180910390f35b3480156105c357600080fd5b506105cc610b16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061a57600080fd5b50610623610b3b565b604051808381526020018281526020019250505060405180910390f35b60068060000154908060010154905082565b600061065c6129ed565b6040805190810160405280876000600a8110151561067657fe5b60200201518152602001876001600a8110151561068f57fe5b602002015181525081600001819052506040805190810160405280876002600a811015156106b957fe5b60200201518152602001876003600a811015156106d257fe5b602002015181525081602001819052506040805190810160405280876004600a811015156106fc57fe5b60200201518152602001876005600a8110151561071557fe5b602002015181525081604001819052506040805190810160405280876006600a8110151561073f57fe5b60200201518152602001876007600a8110151561075857fe5b6020020151815250816060018190525084600060058110151561077757fe5b602002015181608001818152505084600160058110151561079457fe5b60200201518160a00181815250508460026005811015156107b157fe5b60200201518160c0018181525050838160e0015160000181905250828160e00151602001819052508460036005811015156107e857fe5b60200201518160e00151608001818152505084600460058110151561080957fe5b60200201518160e0015160a001818152505061085f6040805190810160405280886008600a8110151561083857fe5b60200201518152602001886009600a8110151561085157fe5b602002015181525082610b4d565b915050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600581565b602081565b60006108a46129ed565b6040805190810160405280876000600a811015156108be57fe5b60200201518152602001876001600a811015156108d757fe5b602002015181525081600001819052506040805190810160405280876002600a8110151561090157fe5b60200201518152602001876003600a8110151561091a57fe5b602002015181525081602001819052506040805190810160405280876004600a8110151561094457fe5b60200201518152602001876005600a8110151561095d57fe5b602002015181525081604001819052506040805190810160405280876006600a8110151561098757fe5b60200201518152602001876007600a811015156109a057fe5b602002015181525081606001819052508460006005811015156109bf57fe5b60200201518160800181815250508460016005811015156109dc57fe5b60200201518160a00181815250508460026005811015156109f957fe5b60200201518160c0018181525050838160e0015160400181905250828160e0015160600181905250846003600581101515610a3057fe5b60200201518160e001516080018181525050846004600581101515610a5157fe5b60200201518160e0015160a0018181525050610aa76040805190810160405280886008600a81101515610a8057fe5b60200201518152602001886009600a81101515610a9957fe5b602002015181525082611714565b915050949350505050565b604881602081101515610ac157fe5b600202016000915090508060000154908060010154905082565b600881602081101515610aea57fe5b600202016000915090508060000154908060010154905082565b60048060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028060000154908060010154905082565b6000610b57612a51565b610b5f611bef565b9050610b69612a51565b610b71611c87565b9050610b7b612a80565b610ba7856000015160000151866000015160200151876020015160000151886020015160200151611d1f565b8160e0018181525050610bbd8160e00151611d76565b81610140018181525050610bd48160e00151611db2565b816101000181905250610bf2610bed8260e00151611e57565b611db2565b816101200181905250610c09816101400151611f27565b81610180018181525050610c38610c33826101400151836101400151611f5390919063ffffffff16565b611f8f565b81610160018181525050610c4c6002611db2565b816101a00181905250610c81856040015160000151866040015160200151876060015160000151886060015160200151611d1f565b8160a0018181525050610ca58160a001518260a00151611f5390919063ffffffff16565b8160c0018181525050610d1e610ccc8260c001518760600151611fc990919063ffffffff16565b610d10610cea8460a001518960400151611fc990919063ffffffff16565b610d028561016001518b611fc990919063ffffffff16565b61207690919063ffffffff16565b61207690919063ffffffff16565b816101e00181905250610db0610d66610d3b836101a00151612118565b610d58846101400151856101600151611f5390919063ffffffff16565b611f5390919063ffffffff16565b610da2610d77846101000151612118565b610d9485610160015186610140015161217f90919063ffffffff16565b611f5390919063ffffffff16565b61217f90919063ffffffff16565b81610220018181525050610e50610df48660a00151600460408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b610e42610e13846102200151896080015161217f90919063ffffffff16565b600260408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b61207690919063ffffffff16565b81610200018190525080610200015160000151816101e0015160000151141580610e8c575080610200015160200151816101e001516020015114155b15610e9d576000935050505061170e565b610ea5612bb7565b610ed6610ec38360a001518860200151611fc990919063ffffffff16565b876000015161207690919063ffffffff16565b905060008090505b6005811015611147576000610f6f8860e001516000015183600202600a81101515610f0557fe5b60200201518960e001516000015160018560020201600a81101515610f2657fe5b60200201518a60e001516020015185600202600a81101515610f4457fe5b60200201518b60e001516020015160018760020201600a81101515610f6557fe5b6020020151611d1f565b90508084610260015183600581101515610f8557fe5b602002018181525050610fa9610fa48283611f5390919063ffffffff16565b611f8f565b846102a0015183600581101515610fbc57fe5b602002018181525050610fe5846102a0015183600581101515610fdb57fe5b6020020151611e57565b846102c0015183600581101515610ff857fe5b60200201818152505060408051908101604052808960e001516000015184600202600a8110151561102557fe5b602002015181526020018960e001516000015160018560020201600a8110151561104b57fe5b6020020151815250846080018190525061109b61108c856102a001518460058110151561107457fe5b60200201518660800151611fc990919063ffffffff16565b8461207690919063ffffffff16565b925060408051908101604052808960e001516020015184600202600a811015156110c157fe5b602002015181526020018960e001516020015160018560020201600a811015156110e757fe5b60200201518152508460800181905250611137611128856102c001518460058110151561111057fe5b60200201518660800151611fc990919063ffffffff16565b8461207690919063ffffffff16565b9250508080600101915050610ede565b5060008090505b60208110156115945760008114156112895760008090505b60058110156112135760008461026001518260058110151561118457fe5b6020020151905060008214156111b65780856103000151846020811015156111a857fe5b602002018181525050611205565b6111e86111e382876103000151866020811015156111d057fe5b6020020151611f5390919063ffffffff16565b611f8f565b856103000151846020811015156111fb57fe5b6020020181815250505b508080600101915050611166565b508261030001518160208110151561122757fe5b60200201518361034001518260208110151561123f57fe5b6020020181815250506112688361030001518260208110151561125e57fe5b6020020151611e57565b8361030001518260208110151561127b57fe5b602002018181525050611384565b60006112968260056121c4565b90506112f16112ec856102a00151836005036005811015156112b457fe5b60200201518661030001516112cb60018603612214565b86036020811015156112d957fe5b6020020151611f5390919063ffffffff16565b611f8f565b8461030001518360208110151561130457fe5b602002018181525050611366611361856102c001518360050360058110151561132957fe5b602002015186610340015161134060018603612214565b860360208110151561134e57fe5b6020020151611f5390919063ffffffff16565b611f8f565b8461034001518360208110151561137957fe5b602002018181525050505b8261030001518160208110151561139757fe5b6020020151836102e00151826020811015156113af57fe5b602002018181525050826103400151816020811015156113cb57fe5b6020020151836103200151826020811015156113e357fe5b6020020181815250506114358361014001516114278960e0015160800151866102e001518560208110151561141457fe5b6020020151611f5390919063ffffffff16565b61225c90919063ffffffff16565b836102e001518260208110151561144857fe5b6020020181815250506114838760e0015160a001518461032001518360208110151561147057fe5b6020020151611f5390919063ffffffff16565b8361032001518260208110151561149657fe5b6020020181815250506114f76114d1846101a00151836020811015156114b857fe5b6020020151856101600151611f5390919063ffffffff16565b846103200151836020811015156114e457fe5b602002015161217f90919063ffffffff16565b8361032001518260208110151561150a57fe5b60200201818152505061156b83610140015161155d8561012001518460208110151561153257fe5b60200201518661032001518560208110151561154a57fe5b6020020151611f5390919063ffffffff16565b61217f90919063ffffffff16565b8361032001518260208110151561157e57fe5b602002018181525050808060010191505061114e565b5060006115ce8760800151604051602001808281526020019150506040516020818303038152906040528051906020012060019004611f8f565b90506116d561160a8860c00151600460408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b6116c761168a61165b61164c8c6080015161163e8e60e0015160a001518f60e0015160800151611f5390919063ffffffff16565b61217f90919063ffffffff16565b86611f5390919063ffffffff16565b600660408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b6116b961169c89896103200151612298565b6116ab8b8a6102e00151612298565b61207690919063ffffffff16565b61207690919063ffffffff16565b61207690919063ffffffff16565b8361020001819052508160000151836102000151600001511480156117065750816020015183610200015160200151145b955050505050505b92915050565b600061171e612a51565b611726611bef565b9050611730612a51565b611738611c87565b9050611742612a80565b61176e856000015160000151866000015160200151876020015160000151886020015160200151611d1f565b8160e00181815250506117848160e00151611d76565b8161014001818152505061179b8160e00151611db2565b8161010001819052506117b2816101400151611f27565b816101800181815250506117e16117dc826101400151836101400151611f5390919063ffffffff16565b611f8f565b816101600181815250506117f56002611db2565b816101a0018190525061181c826118176118128460e00151611e57565b611db2565b612356565b816101c00181905250611851856040015160000151866040015160200151876060015160000151886060015160200151611d1f565b8160a00181815250506118758160a001518260a00151611f5390919063ffffffff16565b8160c00181815250506118ee61189c8260c001518760600151611fc990919063ffffffff16565b6118e06118ba8460a001518960400151611fc990919063ffffffff16565b6118d28561016001518b611fc990919063ffffffff16565b61207690919063ffffffff16565b61207690919063ffffffff16565b816101e0018190525061198061193661190b836101a00151612118565b611928846101400151856101600151611f5390919063ffffffff16565b611f5390919063ffffffff16565b611972611947846101000151612118565b61196485610160015186610140015161217f90919063ffffffff16565b611f5390919063ffffffff16565b61217f90919063ffffffff16565b816102200181815250506119d96119c5826102200151600260408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b826101e0015161207690919063ffffffff16565b816101e00181905250611a61611a1c8660a00151600460408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b611a538760800151600260408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b61207690919063ffffffff16565b81610200018190525080610200015160000151816101e0015160000151141580611a9d575080610200015160200151816101e001516020015114155b15611aae5760009350505050611be9565b611ab6612bb7565b611ae7611ad48360a001518860200151611fc990919063ffffffff16565b876000015161207690919063ffffffff16565b9050611b1b611b0c836101800151611afe876123da565b611fc990919063ffffffff16565b8261207690919063ffffffff16565b9050611b4d611b3483610100015184610140015161244e565b611b48846101a0015185610160015161244e565b6124c1565b826102400181905250611b7c611b6d836101c00151846102400151612298565b8261207690919063ffffffff16565b9050611bcf611bc0611bbb8860c00151600460408051908101604052908160008201548152602001600182015481525050611fc990919063ffffffff16565b612546565b8261207690919063ffffffff16565b9050611be284836101c0015183896125d6565b9450505050505b92915050565b611bf7612a51565b611bff612a51565b60008090505b6020811015611c7f57600881602081101515611c1d57fe5b60020201600001548282602081101515611c3357fe5b60200201516000018181525050600881602081101515611c4f57fe5b60020201600101548282602081101515611c6557fe5b602002015160200181815250508080600101915050611c05565b508091505090565b611c8f612a51565b611c97612a51565b60008090505b6020811015611d1757604881602081101515611cb557fe5b60020201600001548282602081101515611ccb57fe5b60200201516000018181525050604881602081101515611ce757fe5b60020201600101548282602081101515611cfd57fe5b602002015160200181815250508080600101915050611c9d565b508091505090565b6000611d6c85858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004611f8f565b9050949350505050565b6000611dab82604051602001808281526020019150506040516020818303038152906040528051906020012060019004611f8f565b9050919050565b611dba612bd1565b6001816000602081101515611dcb57fe5b60200201818152505081816001602081101515611de457fe5b6020020181815250506000600290505b6020811015611e5157611e2d611e28848460018503602081101515611e1557fe5b6020020151611f5390919063ffffffff16565b611f8f565b8282602081101515611e3b57fe5b6020020181815250508080600101915050611df4565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060008390506000811415611e9657600092505050611f22565b81811115611ead578181811515611ea957fe5b0690505b600080600190506000849050600084905060005b600082141515611efa578183811515611ed657fe5b04905083848202860383848402860380955081965082975083985050505050611ec1565b6000851215611f1757846000038703975050505050505050611f22565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080801515611f8357fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508083811515611fc057fe5b06915050919050565b611fd1612bb7565b6001821415611fe257829050612070565b6002821415611ffc57611ff58384612076565b9050612070565b612004612bf5565b836000015181600060038110151561201857fe5b602002018181525050836020015181600160038110151561203557fe5b6020020181815250508281600260038110151561204e57fe5b6020020181815250506040826060836007600019fa151561206e57600080fd5b505b92915050565b61207e612bb7565b612086612c18565b836000015181600060048110151561209a57fe5b60200201818152505083602001518160016004811015156120b757fe5b60200201818152505082600001518160026004811015156120d457fe5b60200201818152505082602001518160036004811015156120f157fe5b6020020181815250506040826080836006600019fa151561211157600080fd5b5092915050565b60008082600060208110151561212a57fe5b602002015190506000600190505b602081101561217557612166848260208110151561215257fe5b60200201518361225c90919063ffffffff16565b91508080600101915050612138565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050828410156121b75783838203016121bb565b8284035b91505092915050565b6000808260019060020a02905060005b81851080156121e35750600082115b1561220457600182908060020a8204915050915080806001019150506121d4565b8084600101039250505092915050565b600080829050600081141561222d576001915050612257565b6000600190505b600082111561225157600281029050818060019003925050612234565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561228c57fe5b83850891505092915050565b6122a0612bb7565b6122a8612bb7565b6122e18360006020811015156122ba57fe5b60200201518560006020811015156122ce57fe5b6020020151611fc990919063ffffffff16565b90506000600190505b602081101561234b5761233c61232d858360208110151561230757fe5b6020020151878460208110151561231a57fe5b6020020151611fc990919063ffffffff16565b8361207690919063ffffffff16565b915080806001019150506122ea565b508091505092915050565b61235e612a51565b612366612a51565b60008090505b60208110156123cf576123ac848260208110151561238657fe5b6020020151868360208110151561239957fe5b6020020151611fc990919063ffffffff16565b82826020811015156123ba57fe5b6020020181905250808060010191505061236c565b508091505092915050565b6123e2612bb7565b6123ea612bb7565b8260006020811015156123f957fe5b602002015190506000600190505b602081101561244457612435848260208110151561242157fe5b60200201518361207690919063ffffffff16565b91508080600101915050612407565b5080915050919050565b612456612bd1565b61245e612bd1565b60008090505b60208110156124b65761249284868360208110151561247f57fe5b6020020151611f5390919063ffffffff16565b82826020811015156124a057fe5b6020020181815250508080600101915050612464565b508091505092915050565b6124c9612bd1565b6124d1612bd1565b60008090505b602081101561253b5761251784826020811015156124f157fe5b6020020151868360208110151561250457fe5b602002015161225c90919063ffffffff16565b828260208110151561252557fe5b60200201818152505080806001019150506124d7565b508091505092915050565b61254e612bb7565b60008260000151148015612566575060008260200151145b1561258957604080519081016040528060008152602001600081525090506125d1565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b60006125e0612a80565b6125e98661291f565b81600001819052506125fa8561291f565b816020018190525061260a612c3b565b846000015181600060028110151561261e57fe5b602002018181525050846020015181600160028110151561263b57fe5b60200201818152505061264c612c3b565b60066000015481600060028110151561266157fe5b60200201818152505060066001015481600160028110151561267f57fe5b602002018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663976168638460000151856020015185858a608001518b60e00151604001518c60e00151606001518d60e00151608001518e60e0015160a001516040518a63ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018a600260200280838360005b8381101561275957808201518184015260208101905061273e565b5050505090500189600260200280838360005b8381101561278757808201518184015260208101905061276c565b50505050905001888152602001806020018060200187815260200186815260200185810385528e818151815260200191508051906020019060200280838360005b838110156127e35780820151818401526020810190506127c8565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b8381101561282557808201518184015260208101905061280a565b50505050905001858103835289818151815260200191508051906020019060200280838360005b8381101561286757808201518184015260208101905061284c565b50505050905001858103825288818151815260200191508051906020019060200280838360005b838110156128a957808201518184015260208101905061288e565b505050509050019d505050505050505050505050505060206040518083038186803b1580156128d757600080fd5b505afa1580156128eb573d6000803e3d6000fd5b505050506040513d602081101561290157600080fd5b81019080805190602001909291905050509350505050949350505050565b60608060206002026040519080825280602002602001820160405280156129555781602001602082028038833980820191505090505b50905060008090505b60208110156129e357838160208110151561297557fe5b602002015160000151828260020281518110151561298f57fe5b906020019060200201818152505083816020811015156129ab57fe5b60200201516020015182600183600202018151811015156129c857fe5b9060200190602002018181525050808060010191505061295e565b5080915050919050565b61046060405190810160405280612a02612c5d565b8152602001612a0f612c5d565b8152602001612a1c612c5d565b8152602001612a29612c5d565b8152602001600081526020016000815260200160008152602001612a4b612c77565b81525090565b610800604051908101604052806020905b612a6a612c5d565b815260200190600190039081612a625790505090565b612ee0604051908101604052806060815260200160608152602001612aa3612cbb565b8152602001612ab0612cbb565b8152602001612abd612c5d565b8152602001600081526020016000815260200160008152602001612adf612cdf565b8152602001612aec612cdf565b8152602001600081526020016000815260200160008152602001612b0e612cdf565b8152602001612b1b612d03565b8152602001612b28612c5d565b8152602001612b35612c5d565b815260200160008152602001612b49612cdf565b8152602001612b56612d32565b8152602001612b63612d32565b8152602001612b70612d32565b8152602001612b7d612d32565b8152602001612b8a612cdf565b8152602001612b97612cdf565b8152602001612ba4612cdf565b8152602001612bb1612cdf565b81525090565b604080519081016040528060008152602001600081525090565b61040060405190810160405280602090602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b6040805190810160405280600290602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b61030060405190810160405280612c8c612cbb565b8152602001612c99612cbb565b8152602001606081526020016060815260200160008152602001600081525090565b61014060405190810160405280600a90602082028038833980820191505090505090565b61040060405190810160405280602090602082028038833980820191505090505090565b610800604051908101604052806020905b612d1c612c5d565b815260200190600190039081612d145790505090565b60a06040519081016040528060059060208202803883398082019150509050509056fea165627a7a72305820d7d9b8b70f9c427c91980ba6a545be86da75df5a5fad274f2358612e7248a3210029`

// DeployRangeproofverifier deploys a new Ethereum contract, binding an instance of Rangeproofverifier to it.
func DeployRangeproofverifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, ip common.Address) (common.Address, *types.Transaction, *Rangeproofverifier, error) {
	parsed, err := abi.JSON(strings.NewReader(RangeproofverifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RangeproofverifierBin), backend, params_, ip)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rangeproofverifier{RangeproofverifierCaller: RangeproofverifierCaller{contract: contract}, RangeproofverifierTransactor: RangeproofverifierTransactor{contract: contract}, RangeproofverifierFilterer: RangeproofverifierFilterer{contract: contract}}, nil
}

// Rangeproofverifier is an auto generated Go binding around an Ethereum contract.
type Rangeproofverifier struct {
	RangeproofverifierCaller     // Read-only binding to the contract
	RangeproofverifierTransactor // Write-only binding to the contract
	RangeproofverifierFilterer   // Log filterer for contract events
}

// RangeproofverifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type RangeproofverifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RangeproofverifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RangeproofverifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RangeproofverifierSession struct {
	Contract     *Rangeproofverifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RangeproofverifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RangeproofverifierCallerSession struct {
	Contract *RangeproofverifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RangeproofverifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RangeproofverifierTransactorSession struct {
	Contract     *RangeproofverifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RangeproofverifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type RangeproofverifierRaw struct {
	Contract *Rangeproofverifier // Generic contract binding to access the raw methods on
}

// RangeproofverifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RangeproofverifierCallerRaw struct {
	Contract *RangeproofverifierCaller // Generic read-only contract binding to access the raw methods on
}

// RangeproofverifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RangeproofverifierTransactorRaw struct {
	Contract *RangeproofverifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRangeproofverifier creates a new instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifier(address common.Address, backend bind.ContractBackend) (*Rangeproofverifier, error) {
	contract, err := bindRangeproofverifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rangeproofverifier{RangeproofverifierCaller: RangeproofverifierCaller{contract: contract}, RangeproofverifierTransactor: RangeproofverifierTransactor{contract: contract}, RangeproofverifierFilterer: RangeproofverifierFilterer{contract: contract}}, nil
}

// NewRangeproofverifierCaller creates a new read-only instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierCaller(address common.Address, caller bind.ContractCaller) (*RangeproofverifierCaller, error) {
	contract, err := bindRangeproofverifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierCaller{contract: contract}, nil
}

// NewRangeproofverifierTransactor creates a new write-only instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierTransactor(address common.Address, transactor bind.ContractTransactor) (*RangeproofverifierTransactor, error) {
	contract, err := bindRangeproofverifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierTransactor{contract: contract}, nil
}

// NewRangeproofverifierFilterer creates a new log filterer instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierFilterer(address common.Address, filterer bind.ContractFilterer) (*RangeproofverifierFilterer, error) {
	contract, err := bindRangeproofverifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierFilterer{contract: contract}, nil
}

// bindRangeproofverifier binds a generic wrapper to an already deployed contract.
func bindRangeproofverifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RangeproofverifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rangeproofverifier *RangeproofverifierRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Rangeproofverifier.Contract.RangeproofverifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rangeproofverifier *RangeproofverifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.RangeproofverifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rangeproofverifier *RangeproofverifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.RangeproofverifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rangeproofverifier *RangeproofverifierCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Rangeproofverifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rangeproofverifier *RangeproofverifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rangeproofverifier *RangeproofverifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierSession) BitSize() (*big.Int, error) {
	return _Rangeproofverifier.Contract.BitSize(&_Rangeproofverifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCallerSession) BitSize() (*big.Int, error) {
	return _Rangeproofverifier.Contract.BitSize(&_Rangeproofverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.G(&_Rangeproofverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.G(&_Rangeproofverifier.CallOpts)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) GvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "gvBase", arg0)
	return *ret, err
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.GvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.GvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.H(&_Rangeproofverifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.H(&_Rangeproofverifier.CallOpts)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) HvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "hvBase", arg0)
	return *ret, err
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.HvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.HvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCaller) IpVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "ipVerifier")
	return *ret0, err
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierSession) IpVerifier() (common.Address, error) {
	return _Rangeproofverifier.Contract.IpVerifier(&_Rangeproofverifier.CallOpts)
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCallerSession) IpVerifier() (common.Address, error) {
	return _Rangeproofverifier.Contract.IpVerifier(&_Rangeproofverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierSession) N() (*big.Int, error) {
	return _Rangeproofverifier.Contract.N(&_Rangeproofverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCallerSession) N() (*big.Int, error) {
	return _Rangeproofverifier.Contract.N(&_Rangeproofverifier.CallOpts)
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x1f4c4805.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[10] l, uint256[10] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCaller) OptimizedVerifyRangeProof(opts *bind.CallOpts, points [10]*big.Int, scalar [5]*big.Int, l [10]*big.Int, r [10]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "optimizedVerifyRangeProof", points, scalar, l, r)
	return *ret0, err
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x1f4c4805.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[10] l, uint256[10] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierSession) OptimizedVerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l [10]*big.Int, r [10]*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.OptimizedVerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x1f4c4805.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[10] l, uint256[10] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCallerSession) OptimizedVerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l [10]*big.Int, r [10]*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.OptimizedVerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierSession) Params() (common.Address, error) {
	return _Rangeproofverifier.Contract.Params(&_Rangeproofverifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCallerSession) Params() (common.Address, error) {
	return _Rangeproofverifier.Contract.Params(&_Rangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) UBase(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "uBase")
	return *ret, err
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.UBase(&_Rangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.UBase(&_Rangeproofverifier.CallOpts)
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCaller) VerifyRangeProof(opts *bind.CallOpts, points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "verifyRangeProof", points, scalar, l, r)
	return *ret0, err
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierSession) VerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.VerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCallerSession) VerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.VerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}
