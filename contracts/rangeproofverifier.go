// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RangeproofverifierABI is the input ABI used to generate the binding from.
const RangeproofverifierABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"uBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hvBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gvBase\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"h\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"g\",\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"params_\",\"type\":\"address\"},{\"name\":\"ip\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[10]\"},{\"name\":\"scalar\",\"type\":\"uint256[5]\"},{\"name\":\"l\",\"type\":\"uint256[12]\"},{\"name\":\"r\",\"type\":\"uint256[12]\"}],\"name\":\"optimizedVerifyRangeProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[10]\"},{\"name\":\"scalar\",\"type\":\"uint256[5]\"},{\"name\":\"l\",\"type\":\"uint256[]\"},{\"name\":\"r\",\"type\":\"uint256[]\"}],\"name\":\"verifyRangeProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// RangeproofverifierBin is the compiled bytecode used for deploying new contracts.
const RangeproofverifierBin = `0x60806040523480156200001157600080fd5b50604051604080620036e8833981018060405260408110156200003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da8972246040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200015357600080fd5b505afa15801562000168573d6000803e3d6000fd5b505050506040513d60208110156200017f57600080fd5b8101908080519060200190929190505050604014151562000208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269732073697a65206e6f7420657175616c000000000000000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e9552256040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200028c57600080fd5b505afa158015620002a1573d6000803e3d6000fd5b505050506040513d6020811015620002b857600080fd5b8101908080519060200190929190505050600614151562000341576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6e756d626572206f66206c2c72206e6f7420657175616c00000000000000000081525060200191505060405180910390fd5b6200034b6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304c09ce96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620003ce57600080fd5b505afa158015620003e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156200040957600080fd5b810190809190505090506200041d6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382529fdb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b158015620004a057600080fd5b505afa158015620004b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620004db57600080fd5b81019080919050509050620004ef6200090f565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6147d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401604080518083038186803b1580156200057257600080fd5b505afa15801562000587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015620005ad57600080fd5b81019080919050509050620005c162000931565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffe237f06040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110006040518083038186803b1580156200064657600080fd5b505afa1580156200065b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110008110156200068257600080fd5b810190809190505090506200069662000931565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663483767f06040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110006040518083038186803b1580156200071b57600080fd5b505afa15801562000730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110008110156200075757600080fd5b810190809190505090508460006002811015156200077157fe5b60200201516002600001819055508460016002811015156200078f57fe5b6020020151600260010181905550836000600281101515620007ad57fe5b6020020151600460000181905550836001600281101515620007cb57fe5b6020020151600460010181905550826000600281101515620007e957fe5b60200201516006600001819055508260016002811015156200080757fe5b602002015160066001018190555060008090505b6040811015620009015782816002026080811015156200083757fe5b60200201516008826040811015156200084c57fe5b600202016000018190555082600182600202016080811015156200086c57fe5b60200201516008826040811015156200088157fe5b600202016001018190555081816002026080811015156200089e57fe5b6020020151608882604081101515620008b357fe5b60020201600001819055508160018260020201608081101515620008d357fe5b6020020151608882604081101515620008e857fe5b600202016001018190555080806001019150506200081b565b505050505050505062000955565b6040805190810160405280600290602082028038833980820191505090505090565b61100060405190810160405280608090602082028038833980820191505090505090565b612d8380620009656000396000f3fe6080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631213e201146100b457806326ff9c68146100e65780632e52d6061461013d5780633679f58a146101685780633e8d3764146102b9578063653e4013146102e4578063654474ee146104d9578063b7479f5f1461052f578063b8c9d36514610585578063cff0ab96146105b7578063e2179b8e1461060e575b600080fd5b3480156100c057600080fd5b506100c9610640565b604051808381526020018281526020019250505060405180910390f35b3480156100f257600080fd5b506100fb610652565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014957600080fd5b50610152610678565b6040518082815260200191505060405180910390f35b34801561017457600080fd5b5061029f60048036036104e081101561018c57600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192908060a001906005806020026040519081016040528092919082600560200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f8201169050808301925050505050509192919290806101800190600c806020026040519081016040528092919082600c60200280828437600081840152601f19601f820116905080830192505050505050919291929050505061067d565b604051808215151515815260200191505060405180910390f35b3480156102c557600080fd5b506102ce610895565b6040518082815260200191505060405180910390f35b3480156102f057600080fd5b506104bf600480360361022081101561030857600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600081840152601f19601f82011690508083019250505050505091929192908060a001906005806020026040519081016040528092919082600560200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001906401000000008111156103a857600080fd5b8201836020820111156103ba57600080fd5b803590602001918460208302840111640100000000831117156103dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561043c57600080fd5b82018360208201111561044e57600080fd5b8035906020019184602083028401116401000000008311171561047057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061089a565b604051808215151515815260200191505060405180910390f35b3480156104e557600080fd5b50610512600480360360208110156104fc57600080fd5b8101908080359060200190929190505050610ab2565b604051808381526020018281526020019250505060405180910390f35b34801561053b57600080fd5b506105686004803603602081101561055257600080fd5b8101908080359060200190929190505050610adb565b604051808381526020018281526020019250505060405180910390f35b34801561059157600080fd5b5061059a610b04565b604051808381526020018281526020019250505060405180910390f35b3480156105c357600080fd5b506105cc610b16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061a57600080fd5b50610623610b3b565b604051808381526020018281526020019250505060405180910390f35b60068060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600681565b60006106876129ef565b6040805190810160405280876000600a811015156106a157fe5b60200201518152602001876001600a811015156106ba57fe5b602002015181525081600001819052506040805190810160405280876002600a811015156106e457fe5b60200201518152602001876003600a811015156106fd57fe5b602002015181525081602001819052506040805190810160405280876004600a8110151561072757fe5b60200201518152602001876005600a8110151561074057fe5b602002015181525081604001819052506040805190810160405280876006600a8110151561076a57fe5b60200201518152602001876007600a8110151561078357fe5b602002015181525081606001819052508460006005811015156107a257fe5b60200201518160800181815250508460016005811015156107bf57fe5b60200201518160a00181815250508460026005811015156107dc57fe5b60200201518160c0018181525050838160e0015160000181905250828160e001516020018190525084600360058110151561081357fe5b60200201518160e00151608001818152505084600460058110151561083457fe5b60200201518160e0015160a001818152505061088a6040805190810160405280886008600a8110151561086357fe5b60200201518152602001886009600a8110151561087c57fe5b602002015181525082610b4d565b915050949350505050565b604081565b60006108a46129ef565b6040805190810160405280876000600a811015156108be57fe5b60200201518152602001876001600a811015156108d757fe5b602002015181525081600001819052506040805190810160405280876002600a8110151561090157fe5b60200201518152602001876003600a8110151561091a57fe5b602002015181525081602001819052506040805190810160405280876004600a8110151561094457fe5b60200201518152602001876005600a8110151561095d57fe5b602002015181525081604001819052506040805190810160405280876006600a8110151561098757fe5b60200201518152602001876007600a811015156109a057fe5b602002015181525081606001819052508460006005811015156109bf57fe5b60200201518160800181815250508460016005811015156109dc57fe5b60200201518160a00181815250508460026005811015156109f957fe5b60200201518160c0018181525050838160e0015160400181905250828160e0015160600181905250846003600581101515610a3057fe5b60200201518160e001516080018181525050846004600581101515610a5157fe5b60200201518160e0015160a0018181525050610aa76040805190810160405280886008600a81101515610a8057fe5b60200201518152602001886009600a81101515610a9957fe5b602002015181525082611733565b915050949350505050565b608881604081101515610ac157fe5b600202016000915090508060000154908060010154905082565b600881604081101515610aea57fe5b600202016000915090508060000154908060010154905082565b60048060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028060000154908060010154905082565b6000610b57612a53565b610b5f611c2d565b9050610b69612a53565b610b71611cc5565b9050610b7b612a82565b610ba7856000015160000151866000015160200151876020015160000151886020015160200151611d5d565b8160e0018181525050610bdc856020015160000151866020015160200151876000015160000151886000015160200151611d5d565b81610140018181525050610bf38160e00151611db4565b816101000181905250610c11610c0c8260e00151611e59565b611db4565b816101200181905250610c28816101400151611f29565b81610180018181525050610c57610c52826101400151836101400151611f5590919063ffffffff16565b611f91565b81610160018181525050610c6b6002611db4565b816101a00181905250610ca0856040015160000151866040015160200151876060015160000151886060015160200151611d5d565b8160a0018181525050610cc48160a001518260a00151611f5590919063ffffffff16565b8160c0018181525050610d3d610ceb8260c001518760600151611fcb90919063ffffffff16565b610d2f610d098460a001518960400151611fcb90919063ffffffff16565b610d218561016001518b611fcb90919063ffffffff16565b61207890919063ffffffff16565b61207890919063ffffffff16565b816101e00181905250610dcf610d85610d5a836101a0015161211a565b610d77846101400151856101600151611f5590919063ffffffff16565b611f5590919063ffffffff16565b610dc1610d9684610100015161211a565b610db385610160015186610140015161218190919063ffffffff16565b611f5590919063ffffffff16565b61218190919063ffffffff16565b81610220018181525050610e6f610e138660a00151600460408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b610e61610e32846102200151896080015161218190919063ffffffff16565b600260408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b61207890919063ffffffff16565b81610200018190525080610200015160000151816101e0015160000151141580610eab575080610200015160200151816101e001516020015114155b15610ebc576000935050505061172d565b610ec4612bb9565b610ef5610ee28360a001518860200151611fcb90919063ffffffff16565b876000015161207890919063ffffffff16565b905060008090505b6006811015611166576000610f8e8860e001516000015183600202600c81101515610f2457fe5b60200201518960e001516000015160018560020201600c81101515610f4557fe5b60200201518a60e001516020015185600202600c81101515610f6357fe5b60200201518b60e001516020015160018760020201600c81101515610f8457fe5b6020020151611d5d565b90508084610260015183600681101515610fa457fe5b602002018181525050610fc8610fc38283611f5590919063ffffffff16565b611f91565b846102a0015183600681101515610fdb57fe5b602002018181525050611004846102a0015183600681101515610ffa57fe5b6020020151611e59565b846102c001518360068110151561101757fe5b60200201818152505060408051908101604052808960e001516000015184600202600c8110151561104457fe5b602002015181526020018960e001516000015160018560020201600c8110151561106a57fe5b602002015181525084608001819052506110ba6110ab856102a001518460068110151561109357fe5b60200201518660800151611fcb90919063ffffffff16565b8461207890919063ffffffff16565b925060408051908101604052808960e001516020015184600202600c811015156110e057fe5b602002015181526020018960e001516020015160018560020201600c8110151561110657fe5b60200201518152508460800181905250611156611147856102c001518460068110151561112f57fe5b60200201518660800151611fcb90919063ffffffff16565b8461207890919063ffffffff16565b9250508080600101915050610efd565b5060008090505b60408110156115b35760008114156112a85760008090505b6006811015611232576000846102600151826006811015156111a357fe5b6020020151905060008214156111d55780856103000151846040811015156111c757fe5b602002018181525050611224565b61120761120282876103000151866040811015156111ef57fe5b6020020151611f5590919063ffffffff16565b611f91565b8561030001518460408110151561121a57fe5b6020020181815250505b508080600101915050611185565b508261030001518160408110151561124657fe5b60200201518361034001518260408110151561125e57fe5b6020020181815250506112878361030001518260408110151561127d57fe5b6020020151611e59565b8361030001518260408110151561129a57fe5b6020020181815250506113a3565b60006112b58260066121c6565b905061131061130b856102a00151836006036006811015156112d357fe5b60200201518661030001516112ea60018603612216565b86036040811015156112f857fe5b6020020151611f5590919063ffffffff16565b611f91565b8461030001518360408110151561132357fe5b602002018181525050611385611380856102c001518360060360068110151561134857fe5b602002015186610340015161135f60018603612216565b860360408110151561136d57fe5b6020020151611f5590919063ffffffff16565b611f91565b8461034001518360408110151561139857fe5b602002018181525050505b826103000151816040811015156113b657fe5b6020020151836102e00151826040811015156113ce57fe5b602002018181525050826103400151816040811015156113ea57fe5b60200201518361032001518260408110151561140257fe5b6020020181815250506114548361014001516114468960e0015160800151866102e001518560408110151561143357fe5b6020020151611f5590919063ffffffff16565b61225e90919063ffffffff16565b836102e001518260408110151561146757fe5b6020020181815250506114a28760e0015160a001518461032001518360408110151561148f57fe5b6020020151611f5590919063ffffffff16565b836103200151826040811015156114b557fe5b6020020181815250506115166114f0846101a00151836040811015156114d757fe5b6020020151856101600151611f5590919063ffffffff16565b8461032001518360408110151561150357fe5b602002015161218190919063ffffffff16565b8361032001518260408110151561152957fe5b60200201818152505061158a83610140015161157c8561012001518460408110151561155157fe5b60200201518661032001518560408110151561156957fe5b6020020151611f5590919063ffffffff16565b61218190919063ffffffff16565b8361032001518260408110151561159d57fe5b602002018181525050808060010191505061116d565b5060006115ed8760800151604051602001808281526020019150506040516020818303038152906040528051906020012060019004611f91565b90506116f46116298860c00151600460408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b6116e66116a961167a61166b8c6080015161165d8e60e0015160a001518f60e0015160800151611f5590919063ffffffff16565b61218190919063ffffffff16565b86611f5590919063ffffffff16565b600660408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b6116d86116bb8989610320015161229a565b6116ca8b8a6102e0015161229a565b61207890919063ffffffff16565b61207890919063ffffffff16565b61207890919063ffffffff16565b8361020001819052508160000151836102000151600001511480156117255750816020015183610200015160200151145b955050505050505b92915050565b600061173d612a53565b611745611c2d565b905061174f612a53565b611757611cc5565b9050611761612a82565b61178d856000015160000151866000015160200151876020015160000151886020015160200151611d5d565b8160e00181815250506117c2856020015160000151866020015160200151876000015160000151886000015160200151611d5d565b816101400181815250506117d98160e00151611db4565b8161010001819052506117f0816101400151611f29565b8161018001818152505061181f61181a826101400151836101400151611f5590919063ffffffff16565b611f91565b816101600181815250506118336002611db4565b816101a0018190525061185a826118556118508460e00151611e59565b611db4565b612358565b816101c0018190525061188f856040015160000151866040015160200151876060015160000151886060015160200151611d5d565b8160a00181815250506118b38160a001518260a00151611f5590919063ffffffff16565b8160c001818152505061192c6118da8260c001518760600151611fcb90919063ffffffff16565b61191e6118f88460a001518960400151611fcb90919063ffffffff16565b6119108561016001518b611fcb90919063ffffffff16565b61207890919063ffffffff16565b61207890919063ffffffff16565b816101e001819052506119be611974611949836101a0015161211a565b611966846101400151856101600151611f5590919063ffffffff16565b611f5590919063ffffffff16565b6119b061198584610100015161211a565b6119a285610160015186610140015161218190919063ffffffff16565b611f5590919063ffffffff16565b61218190919063ffffffff16565b81610220018181525050611a17611a03826102200151600260408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b826101e0015161207890919063ffffffff16565b816101e00181905250611a9f611a5a8660a00151600460408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b611a918760800151600260408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b61207890919063ffffffff16565b81610200018190525080610200015160000151816101e0015160000151141580611adb575080610200015160200151816101e001516020015114155b15611aec5760009350505050611c27565b611af4612bb9565b611b25611b128360a001518860200151611fcb90919063ffffffff16565b876000015161207890919063ffffffff16565b9050611b59611b4a836101800151611b3c876123dc565b611fcb90919063ffffffff16565b8261207890919063ffffffff16565b9050611b8b611b72836101000151846101400151612450565b611b86846101a00151856101600151612450565b6124c3565b826102400181905250611bba611bab836101c0015184610240015161229a565b8261207890919063ffffffff16565b9050611c0d611bfe611bf98860c00151600460408051908101604052908160008201548152602001600182015481525050611fcb90919063ffffffff16565b612548565b8261207890919063ffffffff16565b9050611c2084836101c0015183896125d8565b9450505050505b92915050565b611c35612a53565b611c3d612a53565b60008090505b6040811015611cbd57600881604081101515611c5b57fe5b60020201600001548282604081101515611c7157fe5b60200201516000018181525050600881604081101515611c8d57fe5b60020201600101548282604081101515611ca357fe5b602002015160200181815250508080600101915050611c43565b508091505090565b611ccd612a53565b611cd5612a53565b60008090505b6040811015611d5557608881604081101515611cf357fe5b60020201600001548282604081101515611d0957fe5b60200201516000018181525050608881604081101515611d2557fe5b60020201600101548282604081101515611d3b57fe5b602002015160200181815250508080600101915050611cdb565b508091505090565b6000611daa85858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004611f91565b9050949350505050565b611dbc612bd3565b6001816000604081101515611dcd57fe5b60200201818152505081816001604081101515611de657fe5b6020020181815250506000600290505b6040811015611e5357611e2f611e2a848460018503604081101515611e1757fe5b6020020151611f5590919063ffffffff16565b611f91565b8282604081101515611e3d57fe5b6020020181815250508080600101915050611df6565b50919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905060008390506000811415611e9857600092505050611f24565b81811115611eaf578181811515611eab57fe5b0690505b600080600190506000849050600084905060005b600082141515611efc578183811515611ed857fe5b04905083848202860383848402860380955081965082975083985050505050611ec3565b6000851215611f1957846000038703975050505050505050611f24565b849750505050505050505b919050565b6000817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001039050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905080801515611f8557fe5b83850991505092915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508083811515611fc257fe5b06915050919050565b611fd3612bb9565b6001821415611fe457829050612072565b6002821415611ffe57611ff78384612078565b9050612072565b612006612bf7565b836000015181600060038110151561201a57fe5b602002018181525050836020015181600160038110151561203757fe5b6020020181815250508281600260038110151561205057fe5b6020020181815250506040826060836007600019fa151561207057600080fd5b505b92915050565b612080612bb9565b612088612c1a565b836000015181600060048110151561209c57fe5b60200201818152505083602001518160016004811015156120b957fe5b60200201818152505082600001518160026004811015156120d657fe5b60200201818152505082602001518160036004811015156120f357fe5b6020020181815250506040826080836006600019fa151561211357600080fd5b5092915050565b60008082600060408110151561212c57fe5b602002015190506000600190505b604081101561217757612168848260408110151561215457fe5b60200201518361225e90919063ffffffff16565b9150808060010191505061213a565b5080915050919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050828410156121b95783838203016121bd565b8284035b91505092915050565b6000808260019060020a02905060005b81851080156121e55750600082115b1561220657600182908060020a8204915050915080806001019150506121d6565b8084600101039250505092915050565b600080829050600081141561222f576001915050612259565b6000600190505b600082111561225357600281029050818060019003925050612236565b80925050505b919050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190508080151561228e57fe5b83850891505092915050565b6122a2612bb9565b6122aa612bb9565b6122e38360006040811015156122bc57fe5b60200201518560006040811015156122d057fe5b6020020151611fcb90919063ffffffff16565b90506000600190505b604081101561234d5761233e61232f858360408110151561230957fe5b6020020151878460408110151561231c57fe5b6020020151611fcb90919063ffffffff16565b8361207890919063ffffffff16565b915080806001019150506122ec565b508091505092915050565b612360612a53565b612368612a53565b60008090505b60408110156123d1576123ae848260408110151561238857fe5b6020020151868360408110151561239b57fe5b6020020151611fcb90919063ffffffff16565b82826040811015156123bc57fe5b6020020181905250808060010191505061236e565b508091505092915050565b6123e4612bb9565b6123ec612bb9565b8260006040811015156123fb57fe5b602002015190506000600190505b604081101561244657612437848260408110151561242357fe5b60200201518361207890919063ffffffff16565b91508080600101915050612409565b5080915050919050565b612458612bd3565b612460612bd3565b60008090505b60408110156124b85761249484868360408110151561248157fe5b6020020151611f5590919063ffffffff16565b82826040811015156124a257fe5b6020020181815250508080600101915050612466565b508091505092915050565b6124cb612bd3565b6124d3612bd3565b60008090505b604081101561253d5761251984826040811015156124f357fe5b6020020151868360408110151561250657fe5b602002015161225e90919063ffffffff16565b828260408110151561252757fe5b60200201818152505080806001019150506124d9565b508091505092915050565b612550612bb9565b60008260000151148015612568575060008260200151145b1561258b57604080519081016040528060008152602001600081525090506125d3565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479050604080519081016040528084600001518152602001846020015183038152509150505b919050565b60006125e2612a82565b6125eb86612921565b81600001819052506125fc85612921565b816020018190525061260c612c3d565b846000015181600060028110151561262057fe5b602002018181525050846020015181600160028110151561263d57fe5b60200201818152505061264e612c3d565b60066000015481600060028110151561266357fe5b60200201818152505060066001015481600160028110151561268157fe5b602002018181525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663976168638460000151856020015185858a608001518b60e00151604001518c60e00151606001518d60e00151608001518e60e0015160a001516040518a63ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018a600260200280838360005b8381101561275b578082015181840152602081019050612740565b5050505090500189600260200280838360005b8381101561278957808201518184015260208101905061276e565b50505050905001888152602001806020018060200187815260200186815260200185810385528e818151815260200191508051906020019060200280838360005b838110156127e55780820151818401526020810190506127ca565b5050505090500185810384528d818151815260200191508051906020019060200280838360005b8381101561282757808201518184015260208101905061280c565b50505050905001858103835289818151815260200191508051906020019060200280838360005b8381101561286957808201518184015260208101905061284e565b50505050905001858103825288818151815260200191508051906020019060200280838360005b838110156128ab578082015181840152602081019050612890565b505050509050019d505050505050505050505050505060206040518083038186803b1580156128d957600080fd5b505afa1580156128ed573d6000803e3d6000fd5b505050506040513d602081101561290357600080fd5b81019080805190602001909291905050509350505050949350505050565b60608060406002026040519080825280602002602001820160405280156129575781602001602082028038833980820191505090505b50905060008090505b60408110156129e557838160408110151561297757fe5b602002015160000151828260020281518110151561299157fe5b906020019060200201818152505083816040811015156129ad57fe5b60200201516020015182600183600202018151811015156129ca57fe5b90602001906020020181815250508080600101915050612960565b5080915050919050565b6104e060405190810160405280612a04612c5f565b8152602001612a11612c5f565b8152602001612a1e612c5f565b8152602001612a2b612c5f565b8152602001600081526020016000815260200160008152602001612a4d612c79565b81525090565b611000604051908101604052806040905b612a6c612c5f565b815260200190600190039081612a645790505090565b6157e0604051908101604052806060815260200160608152602001612aa5612cbd565b8152602001612ab2612cbd565b8152602001612abf612c5f565b8152602001600081526020016000815260200160008152602001612ae1612ce1565b8152602001612aee612ce1565b8152602001600081526020016000815260200160008152602001612b10612ce1565b8152602001612b1d612d05565b8152602001612b2a612c5f565b8152602001612b37612c5f565b815260200160008152602001612b4b612ce1565b8152602001612b58612d34565b8152602001612b65612d34565b8152602001612b72612d34565b8152602001612b7f612d34565b8152602001612b8c612ce1565b8152602001612b99612ce1565b8152602001612ba6612ce1565b8152602001612bb3612ce1565b81525090565b604080519081016040528060008152602001600081525090565b61080060405190810160405280604090602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b6040805190810160405280600290602082028038833980820191505090505090565b604080519081016040528060008152602001600081525090565b61038060405190810160405280612c8e612cbd565b8152602001612c9b612cbd565b8152602001606081526020016060815260200160008152602001600081525090565b61018060405190810160405280600c90602082028038833980820191505090505090565b61080060405190810160405280604090602082028038833980820191505090505090565b611000604051908101604052806040905b612d1e612c5f565b815260200190600190039081612d165790505090565b60c06040519081016040528060069060208202803883398082019150509050509056fea165627a7a72305820ae557132809ec83b4f54ea3dfd408777a48bbc442ac3b73cf924732c8dda461f0029`

// DeployRangeproofverifier deploys a new Ethereum contract, binding an instance of Rangeproofverifier to it.
func DeployRangeproofverifier(auth *bind.TransactOpts, backend bind.ContractBackend, params_ common.Address, ip common.Address) (common.Address, *types.Transaction, *Rangeproofverifier, error) {
	parsed, err := abi.JSON(strings.NewReader(RangeproofverifierABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RangeproofverifierBin), backend, params_, ip)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Rangeproofverifier{RangeproofverifierCaller: RangeproofverifierCaller{contract: contract}, RangeproofverifierTransactor: RangeproofverifierTransactor{contract: contract}, RangeproofverifierFilterer: RangeproofverifierFilterer{contract: contract}}, nil
}

// Rangeproofverifier is an auto generated Go binding around an Ethereum contract.
type Rangeproofverifier struct {
	RangeproofverifierCaller     // Read-only binding to the contract
	RangeproofverifierTransactor // Write-only binding to the contract
	RangeproofverifierFilterer   // Log filterer for contract events
}

// RangeproofverifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type RangeproofverifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RangeproofverifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RangeproofverifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RangeproofverifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RangeproofverifierSession struct {
	Contract     *Rangeproofverifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RangeproofverifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RangeproofverifierCallerSession struct {
	Contract *RangeproofverifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RangeproofverifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RangeproofverifierTransactorSession struct {
	Contract     *RangeproofverifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RangeproofverifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type RangeproofverifierRaw struct {
	Contract *Rangeproofverifier // Generic contract binding to access the raw methods on
}

// RangeproofverifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RangeproofverifierCallerRaw struct {
	Contract *RangeproofverifierCaller // Generic read-only contract binding to access the raw methods on
}

// RangeproofverifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RangeproofverifierTransactorRaw struct {
	Contract *RangeproofverifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRangeproofverifier creates a new instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifier(address common.Address, backend bind.ContractBackend) (*Rangeproofverifier, error) {
	contract, err := bindRangeproofverifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Rangeproofverifier{RangeproofverifierCaller: RangeproofverifierCaller{contract: contract}, RangeproofverifierTransactor: RangeproofverifierTransactor{contract: contract}, RangeproofverifierFilterer: RangeproofverifierFilterer{contract: contract}}, nil
}

// NewRangeproofverifierCaller creates a new read-only instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierCaller(address common.Address, caller bind.ContractCaller) (*RangeproofverifierCaller, error) {
	contract, err := bindRangeproofverifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierCaller{contract: contract}, nil
}

// NewRangeproofverifierTransactor creates a new write-only instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierTransactor(address common.Address, transactor bind.ContractTransactor) (*RangeproofverifierTransactor, error) {
	contract, err := bindRangeproofverifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierTransactor{contract: contract}, nil
}

// NewRangeproofverifierFilterer creates a new log filterer instance of Rangeproofverifier, bound to a specific deployed contract.
func NewRangeproofverifierFilterer(address common.Address, filterer bind.ContractFilterer) (*RangeproofverifierFilterer, error) {
	contract, err := bindRangeproofverifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RangeproofverifierFilterer{contract: contract}, nil
}

// bindRangeproofverifier binds a generic wrapper to an already deployed contract.
func bindRangeproofverifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RangeproofverifierABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rangeproofverifier *RangeproofverifierRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Rangeproofverifier.Contract.RangeproofverifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rangeproofverifier *RangeproofverifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.RangeproofverifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rangeproofverifier *RangeproofverifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.RangeproofverifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Rangeproofverifier *RangeproofverifierCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Rangeproofverifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Rangeproofverifier *RangeproofverifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Rangeproofverifier *RangeproofverifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Rangeproofverifier.Contract.contract.Transact(opts, method, params...)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCaller) BitSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "bitSize")
	return *ret0, err
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierSession) BitSize() (*big.Int, error) {
	return _Rangeproofverifier.Contract.BitSize(&_Rangeproofverifier.CallOpts)
}

// BitSize is a free data retrieval call binding the contract method 0x3e8d3764.
//
// Solidity: function bitSize() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCallerSession) BitSize() (*big.Int, error) {
	return _Rangeproofverifier.Contract.BitSize(&_Rangeproofverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) G(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "g")
	return *ret, err
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.G(&_Rangeproofverifier.CallOpts)
}

// G is a free data retrieval call binding the contract method 0xe2179b8e.
//
// Solidity: function g() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) G() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.G(&_Rangeproofverifier.CallOpts)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) GvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "gvBase", arg0)
	return *ret, err
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.GvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// GvBase is a free data retrieval call binding the contract method 0xb7479f5f.
//
// Solidity: function gvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) GvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.GvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) H(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "h")
	return *ret, err
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.H(&_Rangeproofverifier.CallOpts)
}

// H is a free data retrieval call binding the contract method 0xb8c9d365.
//
// Solidity: function h() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) H() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.H(&_Rangeproofverifier.CallOpts)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) HvBase(opts *bind.CallOpts, arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "hvBase", arg0)
	return *ret, err
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.HvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// HvBase is a free data retrieval call binding the contract method 0x654474ee.
//
// Solidity: function hvBase(uint256 ) constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) HvBase(arg0 *big.Int) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.HvBase(&_Rangeproofverifier.CallOpts, arg0)
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCaller) IpVerifier(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "ipVerifier")
	return *ret0, err
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierSession) IpVerifier() (common.Address, error) {
	return _Rangeproofverifier.Contract.IpVerifier(&_Rangeproofverifier.CallOpts)
}

// IpVerifier is a free data retrieval call binding the contract method 0x26ff9c68.
//
// Solidity: function ipVerifier() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCallerSession) IpVerifier() (common.Address, error) {
	return _Rangeproofverifier.Contract.IpVerifier(&_Rangeproofverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCaller) N(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierSession) N() (*big.Int, error) {
	return _Rangeproofverifier.Contract.N(&_Rangeproofverifier.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint256)
func (_Rangeproofverifier *RangeproofverifierCallerSession) N() (*big.Int, error) {
	return _Rangeproofverifier.Contract.N(&_Rangeproofverifier.CallOpts)
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x3679f58a.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[12] l, uint256[12] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCaller) OptimizedVerifyRangeProof(opts *bind.CallOpts, points [10]*big.Int, scalar [5]*big.Int, l [12]*big.Int, r [12]*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "optimizedVerifyRangeProof", points, scalar, l, r)
	return *ret0, err
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x3679f58a.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[12] l, uint256[12] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierSession) OptimizedVerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l [12]*big.Int, r [12]*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.OptimizedVerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// OptimizedVerifyRangeProof is a free data retrieval call binding the contract method 0x3679f58a.
//
// Solidity: function optimizedVerifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[12] l, uint256[12] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCallerSession) OptimizedVerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l [12]*big.Int, r [12]*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.OptimizedVerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCaller) Params(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "params")
	return *ret0, err
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierSession) Params() (common.Address, error) {
	return _Rangeproofverifier.Contract.Params(&_Rangeproofverifier.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() constant returns(address)
func (_Rangeproofverifier *RangeproofverifierCallerSession) Params() (common.Address, error) {
	return _Rangeproofverifier.Contract.Params(&_Rangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCaller) UBase(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	ret := new(struct {
		X *big.Int
		Y *big.Int
	})
	out := ret
	err := _Rangeproofverifier.contract.Call(opts, out, "uBase")
	return *ret, err
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.UBase(&_Rangeproofverifier.CallOpts)
}

// UBase is a free data retrieval call binding the contract method 0x1213e201.
//
// Solidity: function uBase() constant returns(uint256 X, uint256 Y)
func (_Rangeproofverifier *RangeproofverifierCallerSession) UBase() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _Rangeproofverifier.Contract.UBase(&_Rangeproofverifier.CallOpts)
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCaller) VerifyRangeProof(opts *bind.CallOpts, points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Rangeproofverifier.contract.Call(opts, out, "verifyRangeProof", points, scalar, l, r)
	return *ret0, err
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierSession) VerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.VerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}

// VerifyRangeProof is a free data retrieval call binding the contract method 0x653e4013.
//
// Solidity: function verifyRangeProof(uint256[10] points, uint256[5] scalar, uint256[] l, uint256[] r) constant returns(bool)
func (_Rangeproofverifier *RangeproofverifierCallerSession) VerifyRangeProof(points [10]*big.Int, scalar [5]*big.Int, l []*big.Int, r []*big.Int) (bool, error) {
	return _Rangeproofverifier.Contract.VerifyRangeProof(&_Rangeproofverifier.CallOpts, points, scalar, l, r)
}
